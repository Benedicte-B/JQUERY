%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Spiral bound notepad.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Ilona
%%CreationDate: 9/2/2014
%%BoundingBox: 0 0 735 755
%%HiResBoundingBox: 0 0 734.2076 754.6358
%%CropBox: 0 0 734.2076 754.6358
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>ilonitta</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Spiral bound notepad. Vector EPS10 template. Easy to place your image on the cover.</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Spiral bound notepad. Vector EPS10 template. Easy to place your image on the cover.</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>Spiral bound</rdf:li>
               <rdf:li>spiral</rdf:li>
               <rdf:li>bound</rdf:li>
               <rdf:li>notepad</rdf:li>
               <rdf:li>note</rdf:li>
               <rdf:li>Vector</rdf:li>
               <rdf:li>template</rdf:li>
               <rdf:li>easy to place your image on the cover</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>background</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>mock up</rdf:li>
               <rdf:li>mock</rdf:li>
               <rdf:li>up</rdf:li>
               <rdf:li>education</rdf:li>
               <rdf:li>business</rdf:li>
               <rdf:li>blank</rdf:li>
               <rdf:li>page</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>white</rdf:li>
               <rdf:li>notepad</rdf:li>
               <rdf:li>spiral</rdf:li>
               <rdf:li>bound</rdf:li>
               <rdf:li>notebook</rdf:li>
               <rdf:li>paper</rdf:li>
               <rdf:li>pad</rdf:li>
               <rdf:li>white</rdf:li>
               <rdf:li>new</rdf:li>
               <rdf:li>pocketbook</rdf:li>
               <rdf:li>template</rdf:li>
               <rdf:li>spiral bound</rdf:li>
               <rdf:li>ring</rdf:li>
               <rdf:li>cardboard</rdf:li>
               <rdf:li>clean</rdf:li>
               <rdf:li>object</rdf:li>
               <rdf:li>notepaper</rdf:li>
               <rdf:li>texture</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>stationary</rdf:li>
               <rdf:li>empty</rdf:li>
               <rdf:li>writing pad</rdf:li>
               <rdf:li>sheet</rdf:li>
               <rdf:li>note</rdf:li>
               <rdf:li>notebook</rdf:li>
               <rdf:li>cover</rdf:li>
               <rdf:li>spiral</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>ring</rdf:li>
               <rdf:li>background</rdf:li>
               <rdf:li>ruled</rdf:li>
               <rdf:li>binder</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>page</rdf:li>
               <rdf:li>document</rdf:li>
               <rdf:li>pad</rdf:li>
               <rdf:li>white</rdf:li>
               <rdf:li>copybook</rdf:li>
               <rdf:li>business</rdf:li>
               <rdf:li>blank</rdf:li>
               <rdf:li>new</rdf:li>
               <rdf:li>write</rdf:li>
               <rdf:li>notebook paper</rdf:li>
               <rdf:li>spotted</rdf:li>
               <rdf:li>supplies</rdf:li>
               <rdf:li>reminder</rdf:li>
               <rdf:li>clean</rdf:li>
               <rdf:li>element</rdf:li>
               <rdf:li>bound</rdf:li>
               <rdf:li>mottled</rdf:li>
               <rdf:li>diary</rdf:li>
               <rdf:li>school</rdf:li>
               <rdf:li>empty</rdf:li>
               <rdf:li>paper</rdf:li>
               <rdf:li>journal</rdf:li>
               <rdf:li>education</rdf:li>
               <rdf:li>work</rdf:li>
               <rdf:li>memo</rdf:li>
               <rdf:li>space</rdf:li>
               <rdf:li>note</rdf:li>
               <rdf:li>office</rdf:li>
               <rdf:li>pattern</rdf:li>
               <rdf:li>notebook cover</rdf:li>
               <rdf:li>notepad</rdf:li>
               <rdf:li>book</rdf:li>
               <rdf:li>office supplies</rdf:li>
            </rdf:Bag>
         </dc:subject>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2014-09-02T17:19:35+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2014-09-02T17:19:35+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2014-09-02T17:19:35+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>252</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxLTPzFttU1Q2VhpN&#xA;/cW31mayXUkWH6uJrYEyCQ+rzjX4fhLL8XbJGLATspVYfnRot1AskmmX1sZ47uWx9UQ8Lj6ipadE&#xA;ZZGoy0P2gB74eBiMoVX/ADf0lY7d/wBF3zLLpg1ucr9XPpWJf0/UNZRyIbqq748C+KEw82/mVoXl&#xA;vQ9P1idZLmDUjH9Whi4rMUkjMgk4SFDxCj4vDAI2ylkAFo7UfOFpZeYND0b6vJO+vCY2lzE0ZjX6&#xA;ugkk5VYdFIO1a4ANkmW4HerebvNNn5Y0STVryCa4hjdI/SgCly0rBE+2yCnIjviBaylQtJm/NLRI&#xA;7G8muLO8gvrG6isJdMdIzO1zOCY44+LmNuQUtXl0w8DHxAp3n5qaXaq0cmnXa38N9badeae/pLNF&#xA;LeJzgY/vODI4BowbHgU5A1r35p2Whyy/XtMultYr8aa12rQFPUKCTn9uoTiwJLU64RC1OSnf8rOX&#xA;6zHbJoV/PPLdXlmkUJt2dnsKesyhpUqvxfDvvTHhXxPJNG89aRJ5Nn812SS3VhbxPLJCAI5gIjSR&#xA;SshWjLQ7d+2Dh3pPGKtJYfzi0J7T649lcpavaQXcEimJ2la5kaGOBFV6+p6kcimuw4mpw8DHxQq3&#xA;n5qW1utxGND1GS+saHUbEJGJLdGiaZZWbn6ZjZY2+IN12O5GPAk5PJCr+b6Np9lff4c1JYNSuLa0&#xA;08v6C+vJeKzw+mTJxIPA1Ndj1x4EeL5I4fmS5sdPuh5fvzJqV3LZ21rW3EjNEhk5qTKEZGCvxYNv&#xA;T3GDhT4nk3efmr5cg8nN5pRZZLVJfQazPBLkS8grR8C3EsnKpo3THgN0pyCrReoefbS30fRNVtbG&#xA;fUIddeOK1itmh9QSSxNMqtzdErxRgfi6jHhSZ7A96ZeWvM+meYbKW6sRIht5ntbu2nThNDPHTnHI&#xA;tSOS17Ej3wEUmMrTbAydirsVdirsVdirsVdirsVdirsVdirsVdiryG1/LfzRN5iTVpbC20i+a7lu&#xA;NTv9Ovp41u7aTkxt/SVQVdmahkBWn2vtZZxCmjwzdo3yp+Wc+meSbyO50uD/ABSYL22tpfW5Dhdc&#xA;uNH3A2koTxrt74mW6Y46HmxfUfyk81XFsry2XOS18vx2MAFyshW+tHEqemhPH05BHw49OTcjvkhM&#xA;MDiP2J5rn5f+afOF3ayaxp8eixWelm2g+pXEZLTNxLxMOFFiZaoo349d8iJAMjAy5taX5Q8+6avk&#xA;uaLR7eSfytHfxzRfW1RJjdx+mjK3F+P8zbda4kjdRGQrbknPnTyz5t80/l5aWN/ZW7eY0uIpZo0m&#xA;4QqY3PJ1O4PKPbifH2wRIBZTiZR80psvyv8AMccd3c2aW+kxxajaaro+hmd7iJJ7ZXjm9ScoSPWV&#xA;67A0PbbDxBiMZVdS/LjzRqlxq/mCYW0GtXd/p97aad6jGIJpq8BG8wU1MgPUL91aBEhyScZO6L1H&#xA;yj5m1Zlj1LTIGs9R1G5uNRhW4UtBbz2a2YCMVAeRTWQEU6Dv0AIUxJS/y/5K8/aDHobi1t9SutLn&#xA;1GSWV7n0w/1pFiiY1Vj0Xke+EyBRGEhSbL5F13TfypvfLVoIrzWdQWX6w3P04RJdNWRlZhWiqdvE&#xA;4OLe2XARGklH5Ra0LvW57MxWsVw9nfaNbSvzjhmjeSWe2fiDSPlO4UqO9cPGx8I7p+nlTzPczebN&#xA;avYYItQ1qxFhYadHJyVESJlBecqK8mav2RgsbMuE7lJ9c/L/AMxX3kzybpp02K5vNCngfULeS69O&#xA;N4YBxaNaBlPrCnxUqv0nCJCyxMDQHcuPk7zVf/4fh1LQLWKw0e7kVbWC+dkXT2iMaJxY0eRef29i&#xA;eNNq42E8JNbIzzd+W0+qXuh6LptnFp3lrTFmkW9t3X6xFNKDQKjipXkAX+I8q+2ASWWO6A5JToPk&#xA;jzro2g6TpkOkwSnR9abU0Y3aqZYTHIiqx4mj/vNzSlANsJkCgQIFebN/y+8rX+hWOpS6k0banrGo&#xA;XGpXawkmNGnaoRS1OgyMjbZCNMpyLN2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV3yxV55c/mDr17pOp&#xA;W1jawab5kttXj0W3t5Ha7RmkYVm2WCi+lzkFQdl3yfC1cZrztR8u/mlqt/qh0g6bbTmxu57HULz9&#xA;IJ6vp2XET3voC3jBjPIEcSKnYYmKxyEmkZZ/mF5p1Oxt9U0byqb7Sr4TGxlN4scp9EMf3yem6x+o&#xA;UKr8R369ceEd6iZO4CBf83dXtbTU7/UvLi2+m6RczWN5cRXyylbqMJwjCGGOod5lHKu257Y8CPFP&#xA;ci9V/NS70a31OPVtDNtqun2EWprZLcrJHLDLOLc0mEY4lHYV+Dx+lELSclcwm3k7z0PMN7qOnyWa&#xA;215poiaRoZxdW7CZeQCzKqfEOjKV6+NDgMaZRnaT235jecJfMI0J/Kccd6sUVzcD9Ig+nBJP6HqH&#xA;/RxXj9ogH7OHhFc2PGbqmvL/AOaGq61dpDbaPZvHwuJJ3i1ISPCtuCA8kf1dWCu9FU+9cTGljkJ6&#xA;ICx/PCO8sPLs8WlxG68wag2nLafW2rAVeNPUdvq+/wDeg0p8iex4EDNy80Vafm/LNrp0uTR41U6r&#xA;Nokcsd4skhuIjQSNCYkcQmoq4rTw8RwJGXeqZN5K84L5k8oW/mW4t106CcTO0Rl9UIkEjxszOUj/&#xA;AN9k9MEhRplCVi0i8tfmvD5gv9asLOyiF5ZK76LC91xOpIpkAeLlEvBT6XX4qV8MJhTGOS7WR/mR&#xA;5sK6jJJ5Xiji0kyLqL/pEH0mjtBdCo+rioYEJUftY8I718Q9yYeSfPep+Zroj9F28NgsAme8t75b&#xA;rhIxHCCSMRRFXKkt1wSjSYTtmWRbHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqwhPIV&#xA;2v5oS+bOUH6OkgANtyf1PrKxeiJyvHhX0yydehrk+Lamvg9VpNpH5Z+atIu7l7C40mOG61C4vZgL&#xA;Zw/1e5CrJZqa/BDxQbDceOEyBYjGR3Jz5T8l+Z9CNjpZ1aJ/LmlTSy2kaIwupo5FcJDcNUJxjaQt&#xA;sPiNOlMBkCyjAjboh7f8ub+70PzRpGtTW4i13UH1K2ntebNFIxQryWRV+yYU6HepGPFyRwbEHqlf&#xA;mX8qvMfmO31O71W+s5tZurWCwsyqSJbxRQzCZpafE3qMa+IFT2OETARLGTzTryL5Q8weXNb1Qf6J&#xA;F5evhDPHaQli0d36SLMY/hUemzhtj7e+CRBZQiQfJGp5V1T/AJWFfeYZWtpNLu9OXTlt25mX4WDl&#xA;nUrwYFqinLpgvak8J4rY7pf5f+e9HgiTTbnRo3jE6zMLeVWmjnNfSeQcmCI1CoXwyRkCwEJDuSOy&#xA;/IvW7K502+huLFrqxudPuWiYzCL/AEFOLqh4E/6QwV3+Hrh42IwlmHkX8vX8uNrNxLZ6Y17d3s95&#xA;plxDGQYUmFFt6lFZI0psFPc/TGUrbIQq0k0TyP8Amxonl610HTtU0mOytYLmCrLOzO11I0nqElPt&#xA;Rl/gpt41wmQJYiEgKXeXfyiv/LvmPRNZ0w2gNrbmDVYZZJnBLqFc2vJD6YrWQV35MwJpiZ2Fjiog&#xA;hPU8m63ND5wtr1rGSDzC7SWW0j+m3oiFPVRgAaCNGqp2b6MjxcmXAd/Nryd5T83aFe2qS3OmjSY4&#xA;PQuoLWB45ZnUH05mkatXB28KV70wkgrGJDN8g2OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV5do35jeaNX80PpdhdaRLbxX8sRX0bkSPZQv8cySrM8XLh07E5YYgBpGQk1sg9K/N/zHc649&#xA;msFhqsDarcadbwWKzJcNBDut5yLzRGI/P5VxMAgZTaafl9+ZGseaLl1M2lu4tZZjpqevBdxzowVY&#xA;pBIZAU/mkRT/AKuCUaZQyEo1/wAxdSh8kya5NYRfpJtQk02GzEjekrrdNbqXk4liFC8mIXfsBjw7&#xA;rx7WmnlTzLqt7rOsaBrMVump6P8AV3aa0L+jLHcxlwVWSrKVKkGpOAjqyjI2QWUZFm7FXYq7FUFr&#xA;V7LY6Td3kQVpbeJpED1KkqK70IOTxxuQDXlmYxJHR51/ytLzB/yz2n/ASf8AVTM78pHzdX/KE+4f&#xA;j4u/5Wl5g/5Z7T/gJP8Aqpj+Uj5r/KE+4fj4u/5Wl5g/5Z7T/gJP+qmP5SPmv8oT7h+Pi7/laXmD&#xA;/lntP+Ak/wCqmP5SPmv8oT7h+Pi7/laXmD/lntP+Ak/6qY/lI+a/yhPuH4+Lv+VpeYP+We0/4CT/&#xA;AKqY/lI+a/yhPuH4+Lv+VpeYP+We0/4CT/qpj+Uj5r/KE+4fj4u/5Wl5g/5Z7T/gJP8Aqpj+Uj5r&#xA;/KE+4fj4u/5Wl5g/5Z7T/gJP+qmP5SPmv8oT7h+Pi7/laXmD/lntP+Ak/wCqmP5SPmv8oT7h+Pi7&#xA;/laXmD/lntP+Ak/6qY/lI+a/yhPuH4+Lv+VpeYP+We0/4CT/AKqY/lI+a/yhPuH4+Lv+VpeYP+We&#xA;0/4CT/qpj+Uj5r/KE+4fj4u/5Wl5g/5Z7T/gJP8Aqpj+Uj5r/KE+4fj4u/5Wl5g/5Z7T/gJP+qmP&#xA;5SPmv8oT7h+Pi7/laXmD/lntP+Ak/wCqmP5SPmv8oT7h+Pi7/laXmD/lntP+Ak/6qY/lI+a/yhPu&#xA;H4+Ke+T/ADtqutasbO6igSIRNJWJXDVUgftOw75TnwRhGw5Gl1cskqNM1zEdg7FXYq7FWBf8q48x&#xA;Q3l3Pp/mmSyju799ReOO0jJ5sxPAuXqV7EdD3yfEO5q8M96Z+XfJE+i6dr1mmpsx1u6uL0TxwrE9&#xA;vNdLxYoOTqeNFK7YDK2UYVaG8vfly2na1ZavqOqPqt3psEltZSvDHFJxloC08qlnmYKOI5HbfviZ&#xA;IjCjbcP5dK3lW+8v6hf/AFlbq6kvre6SL0Xgnkl9cMoDvXjLuPbY48W9rwbUmvlzyqNJvL/Urm8f&#xA;UNW1T0vrt26rGCIFKRhI02QAHtgJZRjSe4GTsVdiqF1bVLPSdLu9UvnMdnYwyXFzIqs5WOJS7txU&#xA;EmijtirzS7/OryzrukXFrp9rdFrtPRjdza0BkB3dEneVaAV3TLMX1j3tOo/u5e5g+p6rp2l2pu9Q&#xA;uEtrdSAZHNBU9h45tZSERZdDDHKRoC1eGeGeNZYZFlidVdJI2DKyuodWBFQQysCPbGMhIWFnAxNE&#xA;L8kwdirsVdirsVdirsVdirsVdirsVdirsVdirsVZb+WX/KRt/wAw8n/ElzG1X0OboP7z4PVs1run&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYqg9ZtdLu9IvbXVgjaZNBIl8JW4R+iVIk5NVeI413rtirx6Ty1+&#xA;Tlk9xJoOqLcXUP72C1haK8h5BaIn1gxSyBfi7TA++Txi5ANeaRECR3MT8y+WrHzHCYtTklcM5kZ0&#xA;4ByzdSWKk5nnSxP4H6nUjXTHd9v60XpWkabpNmllptutraR/YhUswGwBNXLNvSpqeuW48YgKDj5s&#xA;xyGyi8sanYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWW/ll/wApG3/MPJ/xJcxtV9Dm6D+8+D1b&#xA;Na7p2KuxV2KuxV2KuxV2KuxV2KuxV2Kpd5j0S313QNR0a4Yxw6jby2zyKAzKJUK8lDAiq1qMVeRy&#xA;fknfaDy1JdUgvLa1RWcPA6yhIwQQhmkuqHj0IK/RkoAmQprykCJJ5MG88+WdQ8xWLwWl4LFpH5tG&#xA;C/pCnQLQ8hmbLBMjcuthqscTYim2jadcafp8VrcX0+pTIqh7u5PKViECmp8Ntq706knc34cZhGi4&#xA;upzDJKwKRuWtDsVdirsVdirsVdirsVdirsVdirsVdirsVdirLfyy/wCUjb/mHk/4kuY2q+hzdB/e&#xA;fB6tmtd07FXYq7FXYq7FXYq7FXYq7FXYq7FUs80WOp6h5b1Sx0q5+p6ldWs0Nndc2j9KaRCqPzQM&#xA;68WNeSio7Yq8G0n8rPO+nObjXYWliiYSz3jJYzKCgJMhmaZrogH4qhOVegyWO+IU15a4DfKkk85v&#xA;5uks5I/LsRicv8EjGMuEFfFwK9Og/pmdM5SNh+Pm6zHHADub/HuTbRF1xdOiXW3t5NRCqJXtQwiJ&#xA;CKK/EB8RNeVBStabUy7DxcPq5uNqODi9HJHZa0OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kst/&#xA;LL/lI2/5h5P+JLmNqvoc3Qf3nwerZrXdOxV2KuxV2KuxV2KuxV2KuxV2KuxVK/NVzrFr5Z1W60WL&#xA;19WgtZpLCHh6nOZEJReAZeVWFOv39MVeCWvnf8yL65Ww1ue+WRwsM9rJHb2/L1NiPSaKzfcj/Kbw&#xA;yWM1IFryxuBHklXnrzLdeX9NNxp8CahIXKo45emQvU0oJO3gMzp6qhsHWYtDZ9R/HxTLRNQvNQ06&#xA;K6vLCXTLh1UvZz/bQlQTXYbVO1RXxANQLsOQyjZcbU4hjlQNo/LWh2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxVlv5Zf8pG3/MPJ/xJcxtV9Dm6D+8+D1bNa7p2KuxV2KuxV2KuxV2KuxV2KuxV2KpZ&#xA;5o1saD5b1PWjCbkabay3X1cOI+fpIW4822WtOtD7AnbFXkMP5xeZfMMc9nLpCafZ3cXwFkd24SD/&#xA;AH5LJbV2IHJYzv2yeM1IFqzRuBHkxXzP5q0vy5BJJf8AqF4m4NDGhZq/qzYy1EA6eGjySPKkXo+t&#xA;aZrNhHf6bN69pJ9iTiy70BIowBqpND75PHkExYas2E45UUbljU7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqy38sv8AlI2/5h5P+JLmNqvoc3Qf3nwerZrXdOxV2KuxV2KuxV2KuxV2KuxV2KuxVCax&#xA;qWnaXpV3qOpSCLT7SJ5ruQqzhYkUlyVUMzbdgMVeOt50/KjVYDLovl1bfUGPK1vIorCB0lIPGR1j&#xA;nE3w+6E+2TxgGQasxIgSO5imvxeWk08vraW4s1NOU4FAW3+E9a/LNjLHjiNwHTQy5ZGgTaY2z2zw&#xA;RNbMjQGOP0miIKen6a+nx47U9PjT2plmPhr08mvLx8Xr5qmTanYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FWW/ll/ykbf8AMPJ/xJcxtV9Dm6D+8+D1bNa7p2KuxV2KuxV2KuxV2KuxV2KuxV2KoPWb&#xA;PTL3SL201VUbTLiCSO9WRuCeiykScnBXiONfiqKYq8gXy1+T+mi4fQdXS7uIgJI7OJre8jLfsIZl&#xA;hklCk9xMCPEZLGLkA15ZERJHcw/zJ5XsPMUTR6nLK5dzI8ilA7MajclD45sDpY/iv1OpGumOg+39&#xA;aM0nR9M0iySx02AW1pH9iIM7AGgBNXLNv1O+W48YgKDj5sxyGyjMsanYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FWW/ll/ykbf8w8n/ABJcxtV9Dm6D+8+D1bNa7p2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;Kpb5l0OHXvL+o6LO5ii1G2ltnlVVYoJVK8gGqKrWoxV5BJ+Seq6Fyv8A9KQXtlaBXblHIkojiSjc&#xA;BK11Ruwo65LGDxCmvKQIG+VMK87+WtR8wac9tZXf1JpG5NGGk9Kg+yBQltvnmbLDOQ3LrcepxQO0&#xA;U10XT7rT9Pitbq/m1KdFUPd3BrIxVFXc+Hw7V38STUm/DjMI0XG1OUZJWBSOy1x3Yq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FWW/ll/ykbf8w8n/ElzG1X0OboP7z4PVs1runYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqlfmmw1TUPLeqWOk3RstTurWWGyuwzR+nK6FUfmoZloT9pRUdt8VeE6T+WnnzTXlutbg&#xA;lmUcXuLyT6jMooavIZnmluiO9VUN+OShfEKYZa4TfJIvOsnm1rWSPy1GVLN+7kb0/UCbijcnAr0+&#xA;yMzZSykcnVwhpwdzf49ya6H+nBpsI1w251HgnrG15emTwWv2qfFWvKm1a02pl+Hi4fVzcbUcHF6O&#xA;SPy1odirsVdirsVdirsVdirsVdirsVdirsVdirsVZb+WX/KRt/zDyf8AElzG1X0OboP7z4PVs1ru&#xA;nYq7FXYq7FXYq7FXYq7FXYq7FXYqlfmm61e08t6pd6NCLjVre1llsbcoZBJMiFkTgGQnkRTY/f0x&#xA;V4HbefvzI1B003WJrpJZHSG5tZFtLctzB5KImhtZu32fiPhksZqQLXljcCPJK/PHmebQNMa5sIUv&#xA;5i/CMgn06CtTTZ+3h/TM6eqobB1ePQkn1Hb4/pCZaJqVzqOnRXVzYTabO6r6lncikiMUBbw2qTSo&#xA;Bp1AOwuw5DONlo1OIY5UDaPy1x3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWW/ll/ykbf8w8n/&#xA;ABJcxtV9Dm6D+8+D1bNa7p2KuxV2KuxV2KuxV2KuxV2KuxV2KpZ5n1tdB8uanrTQm4XTbaW6MAZU&#xA;L+khbjybYVp7+wPTFXkifnJruvpc2UulRWFlcwChYuXCyfCPjmNry3NPhjO/SuTxmpAteaNwIHcx&#xA;PzR5o0zy3DI+oiQSRNweFELOG/VmxlqIB00NHkJ5Ui9J1jTNXskvtNuBc2kn2JVVlBNASKOFYEVo&#xA;duuTx5BMWGrNhOOVFGZY1OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kst/LL/lI2/5h5P8AiS5j&#xA;ar6HN0H958Hq2a13TsVdirsVdirsVdirsVdirsVdirsVQmsalp2l6Vd6jqUgi0+0iea7kKs4WJFJ&#xA;c8VDM23YDFXjUnnL8o9Sjd9D8vJBft8NrdQx2NsVdgeMjRrOku3X+7LU7ZPF9Qas5IgSO5i/mC38&#xA;uHTy2uJAbJNuU4FATvsetflmxljxgbh00M2WRoE2mFsLUW8X1Xh9XMcZh9KnD0zGpi48duPp8ePt&#xA;TLMfDXp5NeXj4vXzVcm1OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kst/LL/lI2/wCYeT/iS5ja&#xA;r6HN0H958Hq2a13TsVdirsVdirsVdirsVdirsVdirsVQmr2WnX2lXlnqaq2nXMEkV6rsUUwuhWSr&#xA;gqVHEncEUxV5AnlX8otMWd9C1uK8uIlE0VlG9ndIxXZEaVIWm60/3aG98ljFyAa8siIkjuYX5l8q&#xA;WXmKN11KeZ2kYuzgpUsa9aofHM86WP4p1I18x0H2/rR+kaPpuj2SWOmw/V7SP7EQZmoaAE1cs29K&#xA;nfLseMQFBx82Y5JWUZljU7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqy38sv+Ujb/mHk/4kuY2q&#xA;+hzdB/efB6tmtd07FXYq7FXYq7FXYq7FXYq7FXYq7FUt8y6HDr3l/UdFncxRajbS2zyqqsUEqleQ&#xA;DVFVrUYq8gb8lda0FXvDq0V7YWiKx5I6yrHGvSNJfrQB7bONvDJ4weIU15iBA3yphfnry7qPmHT2&#xA;trG5FgXbkYw0giAHQClX29zmbPDOXM/j5OsxajFA2I/j5pnoenXen6dFa3d/LqU6Koe8n/vGIUDf&#xA;c+Hc18STU5dhxmMaLjanKMkrApH5a0OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kst/LL/lI2/5&#xA;h5P+JLmNqvoc3Qf3nwerZrXdOxV2KuxV2KuxV2KuxV2KuxV2KuxVK/NNjql/5a1Sy0m4NpqdzaTR&#xA;WV0rmMxzOhCNzUMy0Y9VFR23xV4PYfl75+02Zr3Xbe4nV2Q3N5N9TuApG7yNIZbm4pXcsApyUL4h&#xA;TDLXCb5UkvnWbzaLOT/DcXxF/wB27CNpAgr9oMwFTt9kZmynlI5Osjj04O5v8e5NdE/Tn6Oh/TYt&#xA;xqPFPW+q8jFXgtftftVryptWtNqZfh4uH1c3F1PBxejkjstaHYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FWW/ll/wApG3/MPJ/xJcxtV9Dm6D+8+D1bNa7p2KuxV2KuxV2KuxV2KuxV2KuxV2KpX5qv&#xA;NXsvLWqXejQC61W3tZZbG3Kl/UmRCUXipUtU9gd8VeDad+YX5jap/uL1i4milmZYri2l+pQM1QSy&#xA;CBoYLgE0pQMTkoGpAteWNxI8kp87+Z5vL+ntPZwpfTcykZDfAQtatQfGengP4HOnqgBsHV49CSfU&#xA;dvj+kJlouo3Oo6fFdXNhPpszqpezuRSRCUVjUUG1TtUA06gHYXYchnGy4+pxDHKgbR2WtDsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirLfyy/5SNv8AmHk/4kuY2q+hzdB/efB6tmtd07FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FUt8za0uheXdT1loTcLpttLdNArKhcQoXK8m2HT+w9MVeQv8AnRrOurLp7aTD&#xA;p9tdRKh9SR2ceqtT8Uwta96cUO/jk8ZqQLXmjcCPJi3mbzNpnluGSTU/UVom4PCiFnr8tht882Mt&#xA;RAdXTQ0eQmqpF6Xq2m6tZpe6bcLdWkn2JlDAHYEijhWBFaEEbHJ48gmLDVmwnGaKLyxqdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVZb+WX/KRt/wAw8n/ElzG1X0OboP7z4PVs1runYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYqhNYv9N0/Sby/1N1j061gkmvHdS6iFFLPVAGLfCOgBrirxqTzb+UGoLLJoOhrB&#xA;fkqLa4gS0tKSb8HMQnjkIHU1jJI7Hpk8YBkGrMSIEjuYv5htfLkmn/7nEhNkh2M5oATvsetc2MsW&#xA;MDd00M2WR2O6Y262whjFsIxBwjMXpceHp+mvp8eO3H0+PGnamWY+GvTya8vHxevmqZNqdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVZb+WX/KRt/wAw8n/ElzG1X0OboP7z4PVs1runYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYqhNXsNP1DSryx1JQ+n3UMkV4jMUBidSHBdSpX4e4OKvIV8rflLo8Usmh+YIbi5&#xA;RSYLKOWwnDMAOMbyRwmfeopWQN4HJ4xcgGvLIiBI7mE+ZvKVh5jSRdQmlJkYu5X0xVjXtw98zjpY&#xA;+bqhr5joPt/Wj9H0bTNGsUsNNh+r2kf2I+TPvQAmrlj8RFTl2PGICg42bMckrKNyxqdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVZb+WX/KRt/zDyf8SXMbVfQ5ug/vPg9WzWu6dirsVdirsVdirsVd&#xA;irsVdirsVdiqW+ZtDi17y7qeiyv6UepWstqZeIcp6qFQ4U9SpNRirx0fkpr2go10+sJd6dZKHFCy&#xA;OI0BDKsUy3K9OwkX5jJ4weIU15iBA3yph/nrQNU8w6abWwnSwZnLMivII6fsgEcnNPc5mzxZJDn+&#xA;Pk6zFqMUDYj+PmUz0XTrrTtOitLq/l1KaJVU3c4Cu3FFXcAn+XxJ8STUm7DAxjRcbU5ROVgUjsta&#xA;HYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWW/ll/wApG3/MPJ/xJcxtV9Dm6D+8+D1bNa7p2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KpX5ps9VvfLWq2ekzG31S5tJorG4DmIxzPGVR+ahmXixrUCuKvCbPy&#xA;J59068N3r1vd3EcgUXF5M1tcKpUVaR5GmvJuIPxcvhbw75KF8QphlA4TfKki863Hm5LGQ+W4Qzlv&#xA;gYhDKEHipam/tmbKeUjYOshiwA7ytNtEbW206JtbS3TUCqGVbUsYhVFP7W/KteXavTamX4eLh9XN&#xA;xdSIcXo5I7LWh2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVlv5Zf8pG3/MPJ/xJcxtV9Dm6D+8+&#xA;D1bNa7p2KuxV2KuxV2KuxV2KuxV2KuxV2KpX5pvtWsPLeqXuj2wvNUtrWWaytSrSCSVELInBCrNU&#xA;jopqe2KvB9I/MP8AMbWK6dq1zJHJMVintC2nwu/OoKC3eBbjc9g3LwOSxyqQLXljxRI8km86eazo&#xA;Fi8tnCt/MJDGhVqRtQEkj9o9PD+mZ09UK2DrMegJO5+/9SZ6HqdxqWmw3dxYz6bNIql7S5XjIrFA&#xA;TsQPhqfh8R2HTLsOTjjbjajCMcqBtH5a0OxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kst/LL/lI&#xA;2/5h5P8AiS5jar6HN0H958Hq2a13TsVdirsVdiqm1xAv2pFHtUVxVTbULQft1+QOKqZ1S3HRWP0D&#xA;+uKqbaxEOifeQMVU21tB+yo+bf2Yqptr6jug+k4qpnzEo/bjH0H+uKrG8yx/79QfRiqWa/5hjm0W&#xA;9hEqkyQutAOtRlmH6w06j+7l7nlxAIodweozbvPOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2Kst/LL/lI2/wCYeT/iS5jar6HN0H958Hq2a13TsVdirsVSq5t78sedZF/ydx92KoN1kXalD4HF&#xA;UNJ9Z7fhiqElF574qgpRe++KoOUX3viqClGoe+KoOUaj74qhJRqnauKoSRdUJowYr3Htk8cqkC15&#xA;YGUSB1UjHOP90v8AcP65nfm4+bq/5Pn3j8fBYTMP90SfcP64/m4+a/yfPvH4+C0ySj/j3l+4f1x/&#xA;Nx81/k+fePx8GvWl/wCWeX7l/rj+bj5r/J8+8fj4O9aX/lnl+5f64/m4+a/yfPvH4+C4SSn/AHRJ&#xA;9w/rj+bj5r/J8+8fj4Lh6x/3TJ9w/rj+bj5r/J8+8fj4LxFOf91P9w/rj+bj5r/J8+8fj4Ki2lyf&#xA;91nH83HzX+T594/HwVF067P7GP5uPmv8nz7x+PgqLo963RR+P9MfzcfNf5Pn3j8fBUXQL9ugX7z/&#xA;AEx/Nx81/k+fePx8FRfLOpN04fe39MfzcfNf5Pn3j8fBVXyjqrdDH97f804/m4+a/wAnz7x+Pgqr&#xA;5K1dujRfe/8AzTj+bj5r/J8+8fj4Lx5E1k/7sgHzZ/8AmjH83HzX+T594/HwVU/LzXX+w8DfIyf8&#xA;0Y/m4+a/yfPvH4+DJPJnkvVtH1U3t28JjMTR8UZi1WII6qB28cpz54zjQcjS6SWOVmmb5iOwdirs&#xA;VdirsVcQDsdxiqm1vbt1jU/QMVWGwtD/ALr+4kfxxVTbS7Q/skfT/XFVM6NaHx/D+mKqbaDan/aG&#xA;KrD5ctD3H/A/24qpnyxansv3H+uKrD5VtT2X7jiqw+UrU/sp+P8ATFVp8n2v8qfj/TFVv+DrX+RP&#xA;vP8ATFXf4Ntf5E+8/wBMVd/g21/kT7z/AExV3+DrX+RPvP8ATFVw8oWg/ZT8f6YquHlK1H7Kfjiq&#xA;8eVbUdl+44qqL5ZtB/L/AMD/AG4qvXy7aDuP+B/txVUXQrQf7QxVUGj2Y7H8P6YqqLptoP2CfpP8&#xA;MVVBZWo6Rj6d/wBeKqixRL9lFHyAGKrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:DC8E732AAC32E411B547EB5D5DE1A803</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:DC8E732AAC32E411B547EB5D5DE1A803</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:06639F948632E411B547EB5D5DE1A803</stRef:instanceID>
            <stRef:documentID>xmp.did:06639F948632E411B547EB5D5DE1A803</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05639F948632E411B547EB5D5DE1A803</stEvt:instanceID>
                  <stEvt:when>2014-09-02T17:18:39+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:DC8E732AAC32E411B547EB5D5DE1A803</stEvt:instanceID>
                  <stEvt:when>2014-09-02T17:19:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>259.012097</stDim:w>
            <stDim:h>266.218720</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Оттенки серого</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=230 B=230</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=179 G=179 B=179</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>179</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=153 B=153</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=102 B=102</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 G=51 B=51</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=26 G=26 B=26</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>26</xmpG:red>
                           <xmpG:green>26</xmpG:green>
                           <xmpG:blue>26</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>My_Palette</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=2 M=100 Y=96 K=0 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>206</xmpG:red>
                           <xmpG:green>75</xmpG:green>
                           <xmpG:blue>69</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=87 Y=59 K=0 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>215</xmpG:red>
                           <xmpG:green>94</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=7 M=5 Y=15 K=0 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>233</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>213</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=100 M=0 Y=30 K=0 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>75</xmpG:red>
                           <xmpG:green>178</xmpG:green>
                           <xmpG:blue>186</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=89 M=59 Y=40 K=53 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>63</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=120 G=92 B=141 копия</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>119</xmpG:red>
                           <xmpG:green>91</xmpG:green>
                           <xmpG:blue>140</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=226 B=116</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>226</xmpG:green>
                           <xmpG:blue>116</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=198 G=116 B=255</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>198</xmpG:red>
                           <xmpG:green>116</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=141 G=130 B=92</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>130</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=236 G=230 B=209</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>235</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>209</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный копия</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=4 G=11 B=39 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>4</xmpG:red>
                           <xmpG:green>11</xmpG:green>
                           <xmpG:blue>39</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=107 G=138 B=120 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>107</xmpG:red>
                           <xmpG:green>138</xmpG:green>
                           <xmpG:blue>120</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=243 G=240 B=205 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>243</xmpG:red>
                           <xmpG:green>240</xmpG:green>
                           <xmpG:blue>205</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=222 B=163 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>222</xmpG:green>
                           <xmpG:blue>163</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=185 B=116 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>185</xmpG:green>
                           <xmpG:blue>116</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный копия 2</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=2 G=37 B=37 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>2</xmpG:red>
                           <xmpG:green>37</xmpG:green>
                           <xmpG:blue>37</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=3 G=85 B=79 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>3</xmpG:red>
                           <xmpG:green>85</xmpG:green>
                           <xmpG:blue>79</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=233 G=219 B=174 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>233</xmpG:red>
                           <xmpG:green>219</xmpG:green>
                           <xmpG:blue>174</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=250 G=175 B=6 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>250</xmpG:red>
                           <xmpG:green>175</xmpG:green>
                           <xmpG:blue>6</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=11 G=25 B=25 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>11</xmpG:red>
                           <xmpG:green>25</xmpG:green>
                           <xmpG:blue>25</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный копия 3</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=126 G=168 B=66 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>126</xmpG:red>
                           <xmpG:green>168</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=254 B=189 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>254</xmpG:green>
                           <xmpG:blue>189</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=235 G=210 B=65 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>235</xmpG:red>
                           <xmpG:green>210</xmpG:green>
                           <xmpG:blue>65</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=122 G=83 B=66 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>122</xmpG:red>
                           <xmpG:green>83</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=111 B=99 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>111</xmpG:green>
                           <xmpG:blue>99</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=41 G=22 B=44</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>40</xmpG:red>
                           <xmpG:green>22</xmpG:green>
                           <xmpG:blue>43</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=89 G=144 B=147</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>89</xmpG:red>
                           <xmpG:green>144</xmpG:green>
                           <xmpG:blue>147</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=181 G=181 B=151</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>181</xmpG:red>
                           <xmpG:green>181</xmpG:green>
                           <xmpG:blue>151</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=96 G=166 B=141</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>165</xmpG:green>
                           <xmpG:blue>140</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=156 G=216 B=244</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>156</xmpG:red>
                           <xmpG:green>216</xmpG:green>
                           <xmpG:blue>244</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=240 G=204 B=74</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>239</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>73</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=191 G=127 B=53</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>191</xmpG:red>
                           <xmpG:green>126</xmpG:green>
                           <xmpG:blue>52</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=234 G=171 B=36</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>233</xmpG:red>
                           <xmpG:green>170</xmpG:green>
                           <xmpG:blue>35</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=64 G=64 B=76</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>63</xmpG:red>
                           <xmpG:green>63</xmpG:green>
                           <xmpG:blue>75</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=56 G=29 B=76</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>56</xmpG:red>
                           <xmpG:green>28</xmpG:green>
                           <xmpG:blue>75</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=219 G=139 B=0</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>219</xmpG:red>
                           <xmpG:green>138</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=234 G=171 B=59</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>233</xmpG:red>
                           <xmpG:green>170</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=205 G=127 B=53</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>205</xmpG:red>
                           <xmpG:green>126</xmpG:green>
                           <xmpG:blue>52</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=216 G=141 B=55</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>216</xmpG:red>
                           <xmpG:green>140</xmpG:green>
                           <xmpG:blue>54</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=224 B=179</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>240</xmpG:red>
                           <xmpG:green>223</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=236 G=204 B=107</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>235</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>107</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=126 G=179 B=219</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>126</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>219</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=2 G=49 B=64</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>1</xmpG:red>
                           <xmpG:green>49</xmpG:green>
                           <xmpG:blue>63</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=120 G=92 B=141 копия</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>119</xmpG:red>
                           <xmpG:green>91</xmpG:green>
                           <xmpG:blue>140</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=243 G=236 B=107</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>235</xmpG:green>
                           <xmpG:blue>107</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=222 B=119</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>221</xmpG:green>
                           <xmpG:blue>119</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=244 G=131 B=74</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>244</xmpG:red>
                           <xmpG:green>131</xmpG:green>
                           <xmpG:blue>73</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=110 G=200 B=198</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>110</xmpG:red>
                           <xmpG:green>200</xmpG:green>
                           <xmpG:blue>198</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=202 G=33 B=39</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>202</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>38</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=243 B=243</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=46 G=111 B=182</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>45</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>182</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=123 G=61 B=59</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>123</xmpG:red>
                           <xmpG:green>61</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=241 B=242</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>240</xmpG:red>
                           <xmpG:green>240</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=4</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>241</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpRights="http://ns.adobe.com/xap/1.0/rights/">
         <xmpRights:Marked>True</xmpRights:Marked>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:photoshop="http://ns.adobe.com/photoshop/1.0/">
         <photoshop:AuthorsPosition>Spiral bound notepad. Vector EPS10 template. Easy to place your image on the cover.</photoshop:AuthorsPosition>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -754.636 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 754.636 li
734.208 754.636 li
734.208 0 li
cp
clp
734.208 754.636 mo
0 754.636 li
0 0 li
734.208 0 li
734.208 754.636 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
675.666 694.07 mo
675.666 709.395 529.641 721.818 349.511 721.818 cv
169.381 721.818 23.3574 709.395 23.3574 694.07 cv
23.3574 678.745 169.381 666.321 349.511 666.321 cv
529.641 666.321 675.666 678.745 675.666 694.07 cv
cp
level3{
gsave
clp
[296.39 0 0 21.749 349.511 694.07 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.4 .4 .4 ]
/C1 [.901961 .901961 .901961 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[296.39 0 0 21.749 349.511 694.07 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~AnGXfB4tsmBkhBuCM[g(D/O60DfBZ8EH6)@F*)MHF`qqPGBe@XH$Xd`H[L3hI=?WpIt3'#JV&K+K7no3
Knb>;LPUbCM2I1KMi<USNK0$[O-#HcOcklkPE_;sQ'R`&Q^F/.R@9S6S"-">SXuFFT:hjNTq\9VUSO]^
V5C,fVl6PnWN)u!X/rD)Xfeh1YHY79Z*L[AZa@*I[C3NQ\%&rY\[oAa]=bei]tV4q^VIY$_8=(,_o0L4
`Q#p<a2l?Dai_cLbKS2Tc-FV\cd:%ddF-Ile'umte^i='f@\a/g"P07gYCT?h;7#Ghr*GOiSrkWj5f:_
~>
<~AnGXfB4tsmBkhBuCM[g(D/O60DfBZ8EH6)@F*)MHF`qqPGBe@XH$Xd`H[L3hI=?WpIt3'#JV&K+K7no3
Knb>;LPUbCM2I1KMi<USNK0$[O-#HcOcklkPE_;sQ'R`&Q^F/.R@9S6S"-">SXuFFT:hjNTq\9VUSO]^
V5C,fVl6PnWN)u!X/rD)Xfeh1YHY79Z*L[AZa@*I[C3NQ\%&rY\[oAa]=bei]tV4q^VIY$_8=(,_o0L4
`Q#p<a2l?Dai_cLbKS2Tc-FV\cd:%ddF-Ile'umte^i='f@\a/g"P07gYCT?h;7#Ghr*GOiSrkWj5f:_
~>
<~AnGXfB4tsmBkhBuCM[g(D/O60DfBZ8EH6)@F*)MHF`qqPGBe@XH$Xd`H[L3hI=?WpIt3'#JV&K+K7no3
Knb>;LPUbCM2I1KMi<USNK0$[O-#HcOcklkPE_;sQ'R`&Q^F/.R@9S6S"-">SXuFFT:hjNTq\9VUSO]^
V5C,fVl6PnWN)u!X/rD)Xfeh1YHY79Z*L[AZa@*I[C3NQ\%&rY\[oAa]=bei]tV4q^VIY$_8=(,_o0L4
`Q#p<a2l?Dai_cLbKS2Tc-FV\cd:%ddF-Ile'umte^i='f@\a/g"P07gYCT?h;7#Ghr*GOiSrkWj5f:_
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
256.136 103.194 mo
256.136 361.314 li
256.136 363.304 li
256.136 366.314 li
256.136 368.304 li
256.136 698.475 li
675.666 698.475 li
675.666 103.194 li
256.136 103.194 li
cp
.427451 .678431 .776471 rgb
f
290.125 370.244 mo
290.125 373.32 287.632 375.813 284.556 375.813 cv
281.076 375.813 li
278 375.813 275.506 373.32 275.506 370.244 cv
275.506 370.244 li
275.506 367.168 278 364.675 281.076 364.675 cv
284.556 364.675 li
287.632 364.675 290.125 367.168 290.125 370.244 cv
290.125 370.244 li
cp
0 0 0 rgb
f
281.076 365.719 mo
278.58 365.719 276.55 367.749 276.55 370.244 cv
276.55 372.739 278.58 374.769 281.076 374.769 cv
284.556 374.769 li
287.052 374.769 289.082 372.739 289.082 370.244 cv
289.082 367.749 287.052 365.719 284.556 365.719 cv
281.076 365.719 li
cp
284.556 376.858 mo
281.076 376.858 li
277.429 376.858 274.462 373.891 274.462 370.244 cv
274.462 366.598 277.429 363.63 281.076 363.63 cv
284.556 363.63 li
288.203 363.63 291.17 366.598 291.17 370.244 cv
291.17 373.891 288.203 376.858 284.556 376.858 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 370.244 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.282353 .282353 .278431 ]
/C1 [.184314 .180392 .176471 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.196078 .196078 .192157 ]
/C1 [.282353 .282353 .278431 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.196078 .196078 .192157 ]
/C1 [.376471 .376471 .372549 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.376471 .376471 .372549 ]
/C1 [.211765 .211765 .207843 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.211765 .211765 .207843 ]
/C1 [.607843 .607843 .603922 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.607843 .607843 .603922 ]
/C1 [1 1 1 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [.313726 .309804 .305882 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.576471 .576471 .572549 ]
/C1 [.313726 .309804 .305882 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.576471 .576471 .572549 ]
/C1 [.00392157 .00392157 .00392157 ]
/N 1 
>>
]
/Bounds [.127551 .183673 .27551 .352041 .47449 .663265 .744898 .816326 ]
/Encode [1 0 1 0 0 1 0 1 0 1 0 1 0 1 1 0 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 370.244 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~0/#"61,:XB2)R9N3&ioZ4$5Vg5!M7s5sdn*6q'O67n6!96:!h"4?GP_2Dm9G1Gq*O4$>eo6UaL:92/2Z
;cQn%>?tQA>Zt61<)QLd91_WB6U3gt3]K#W4?l/$85)fW<EWR6@V'7iDfU#HI"-a&M2[LZQC487TVA6Z
W2cr%Yd1XE\\#Pi_8F74aihrTdF6\!g>(QCioK7clKms.oC_kRqu-Kcm,ZpMbJLiqWM,]@LjsVdAmSJ7
<*3C4@qTOoEclYUJ:r`:O-5Q_M2$Y5I<p'XE,B?&A78eK=&`$l91VK<5<Ch^1+t1--6jWQ)&<ks%13=C
~>
<~/hSe20ekF>1c7-K2`NfX3]fGe4[)(q5s[h)6q'O67n6!96:!h"4?GP_2Dm9G1Gq*O4$>eo6UaL:92/2Z
;cQn%>?tQA>Zt61<)QLd91_WB6U3gt3]K#W4?l/$85)fW<EWR6@V'7iDfU#HI"-a&M2[LZQC487TVA6Z
W2cr%Yd1XE\\#Pi_8F74aihrTdF6\!g>(QCioK7clKms.oC_kRqu-Kcm,ZpMb/1]oWM#W>LOODaAR/83
;cd11@V0@lEHQPSJ:r]9O-5Q_M2$Y5I<p'XE,B?&A78eK=&`$l91VK<5<Ch^1+t1--6jWQ)&<ks%13=C
~>
<~/M/S.0JG4:1GgpG2E*TT3BB5a4?Ykm5X7V%6UX=27Rfd55sRUs4$#>[2)I'C1,LmK3]oSk6:=:68k_uV
;H-\!>$P?=>?P$-;c-:`8k;E>69dUp3B&fS4$Gqu7nZTS<*3@2@:X%eDK0fDH[^O"Ll7:VQ'e&3T:r$V
Vl?`!Yd1XE\@T>e^r"%0aihrTdF6Xtg"Y?@ioK7clKms.o(;\Pqu-Kcm,QjKb/(WnW1]K<L448^A6`&/
;H?t-@:a.hE-->OItNK5Nff?[LkUG1I!KmVE,96#@piSG=&`$l91MB95!(_]1+t1--6aNO)&<ks%13=C
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
285.766 367.744 mo
285.076 367.364 284.236 367.024 283.286 366.724 cv
282.236 367.074 280.866 367.424 279.176 367.744 cv
280.866 368.064 282.236 368.414 283.286 368.764 cv
284.886 369.294 285.746 369.824 285.816 370.244 cv
285.576 371.634 276.596 374.244 260.316 374.244 cv
258.866 374.244 257.476 374.224 256.136 374.184 cv
242.506 373.784 235.036 371.514 234.816 370.244 cv
234.886 369.824 235.746 369.294 237.346 368.764 cv
238.396 368.414 239.766 368.064 241.456 367.744 cv
244.996 367.054 249.926 366.484 256.136 366.304 cv
256.136 364.314 li
249.906 364.524 242.156 365.194 237.346 366.724 cv
236.396 367.024 235.556 367.364 234.866 367.744 cv
233.576 368.434 232.816 369.264 232.816 370.244 cv
232.816 374.364 246.346 375.854 256.136 376.174 cv
257.636 376.224 259.046 376.244 260.316 376.244 cv
269.826 376.244 287.816 374.994 287.816 370.244 cv
287.816 369.264 287.056 368.434 285.766 367.744 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 370.279 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 370.279 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 366.724 mo
282.236 367.074 280.866 367.424 279.176 367.744 cv
274.866 368.584 268.516 369.244 260.316 369.244 cv
258.866 369.244 257.476 369.224 256.136 369.184 cv
249.926 369.004 244.996 368.434 241.456 367.744 cv
239.766 367.424 238.396 367.074 237.346 366.724 cv
235.746 366.194 234.886 365.664 234.816 365.244 cv
235.036 363.974 242.506 361.704 256.136 361.304 cv
256.136 359.314 li
246.346 359.634 232.816 361.124 232.816 365.244 cv
232.816 366.224 233.576 367.054 234.866 367.744 cv
235.556 368.124 236.396 368.464 237.346 368.764 cv
242.156 370.294 249.906 370.964 256.136 371.174 cv
257.636 371.224 259.046 371.244 260.316 371.244 cv
266.826 371.244 277.316 370.654 283.286 368.764 cv
284.236 368.464 285.076 368.124 285.766 367.744 cv
285.076 367.364 284.236 367.024 283.286 366.724 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 365.279 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 365.279 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 366.724 mo
282.236 367.074 280.866 367.424 279.176 367.744 cv
274.866 368.584 268.516 369.244 260.316 369.244 cv
258.866 369.244 257.476 369.224 256.136 369.184 cv
249.926 369.004 244.996 368.434 241.456 367.744 cv
239.766 367.424 238.396 367.074 237.346 366.724 cv
235.746 366.194 234.886 365.664 234.816 365.244 cv
235.036 363.974 242.506 361.704 256.136 361.304 cv
256.136 359.314 li
246.346 359.634 232.816 361.124 232.816 365.244 cv
232.816 366.224 233.576 367.054 234.866 367.744 cv
235.556 368.124 236.396 368.464 237.346 368.764 cv
242.156 370.294 249.906 370.964 256.136 371.174 cv
257.636 371.224 259.046 371.244 260.316 371.244 cv
266.826 371.244 277.316 370.654 283.286 368.764 cv
284.236 368.464 285.076 368.124 285.766 367.744 cv
285.076 367.364 284.236 367.024 283.286 366.724 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 365.279 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 365.279 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 367.744 mo
285.076 367.364 284.236 367.024 283.286 366.724 cv
282.236 367.074 280.866 367.424 279.176 367.744 cv
280.866 368.064 282.236 368.414 283.286 368.764 cv
284.886 369.294 285.746 369.824 285.816 370.244 cv
285.576 371.634 276.596 374.244 260.316 374.244 cv
258.866 374.244 257.476 374.224 256.136 374.184 cv
242.506 373.784 235.036 371.514 234.816 370.244 cv
234.886 369.824 235.746 369.294 237.346 368.764 cv
238.396 368.414 239.766 368.064 241.456 367.744 cv
244.996 367.054 249.926 366.484 256.136 366.304 cv
256.136 364.314 li
249.906 364.524 242.156 365.194 237.346 366.724 cv
236.396 367.024 235.556 367.364 234.866 367.744 cv
233.576 368.434 232.816 369.264 232.816 370.244 cv
232.816 374.364 246.346 375.854 256.136 376.174 cv
257.636 376.224 259.046 376.244 260.316 376.244 cv
269.826 376.244 287.816 374.994 287.816 370.244 cv
287.816 369.264 287.056 368.434 285.766 367.744 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 370.279 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.282353 .282353 .278431 ]
/C1 [.184314 .180392 .176471 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.196078 .196078 .192157 ]
/C1 [.282353 .282353 .278431 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.196078 .196078 .192157 ]
/C1 [.376471 .376471 .372549 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.376471 .376471 .372549 ]
/C1 [.211765 .211765 .207843 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.211765 .211765 .207843 ]
/C1 [1 1 1 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [.607843 .607843 .603922 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.607843 .607843 .603922 ]
/C1 [.313726 .309804 .305882 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.576471 .576471 .572549 ]
/C1 [.313726 .309804 .305882 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.576471 .576471 .572549 ]
/C1 [.00392157 .00392157 .00392157 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.00392157 .00392157 .00392157 ]
/C1 [.00392157 .00392157 .00392157 ]
/N 1 
>>
]
/Bounds [.127551 .183673 .27551 .352041 .418367 .47449 .515306 .561224 .862245 ]
/Encode [1 0 1 0 0 1 0 1 0 1 0 1 0 1 1 0 0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 370.279 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~0/#"61,:XB2)R9N3&ioZ4$5Vg5!M7s5sdn*6q'O67n6!96:!h"4?GP_2Dm9G1Gq*O4$>eo6UaL:92/2Z
;cQn%>?tQA>Zt61<)QLd91_WB6U3gt3]K#_9NYeCH\[fWWj]dig?.r(q!mY0gss]k_7HtSV4O$8Lk0kn
Ch-gP:f^e/B5DU5IY3K<P)t]_MMR%AK7SN#H[0gXFE2><ChdWqA7K%T?!CH5<Duak:/"8N7RTR.5<V(g
2`3BG0.e_)-mg2`+<DLA)&F#$&J#<Y#m^_<!W`<&!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
~>
<~/hSe20ekF>1c7-K2`NfX3]fGe4[)(q5s[h)6q'O67n6!96:!h"4?GP_2Dm9G1Gq*O4$>eo6UaL:92/2Z
;cQn%>?tQA>Zt61<)QLd91_WB6U3gt3]K#_9NYeCH\[fWWj]dig?.r(q!mY0gss]k_7HtSV4O$7Lk0km
CLg[M:K:V,Ao)L3I=mB;P)t]_MMR%AK7SN#H[0gXFE2><ChdWqA7K%T?!CH5<Duak:/"8N7RTR.5<V(g
2`3BG0.e_)-mg2`+<DLA)&F#$&J#<Y#m^_<!W`<&!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
~>
<~/M/S.0JG4:1GgpG2E*TT3BB5a4?Ykm5X7V%6UX=27Rfd55sRUs4$#>[2)I'C1,LmK3]oSk6:=:68k_uV
;H-\!>$P?=>?P$-;c-:`8k;E>69dUp3B&f[935VAHA7TSWj]dig?%l'q!mY0gss]j^q$bOUn*g3LOaYi
C1CII:/kD(ASZ:/I"I07OcPK[M2-h=Jq/;tH?aXVF)c,8CM@EnA7AqQ>Zt62<Duaj9hS&K7RTR.5!1kc
2`3BG0.e\'-mg2`+<DL@(`*o#&J#<Y#m^_<!W`<&!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
283.286 366.724 mo
282.236 367.074 280.866 367.424 279.176 367.744 cv
274.866 368.584 268.516 369.244 260.316 369.244 cv
258.866 369.244 257.476 369.224 256.136 369.184 cv
249.926 369.004 244.996 368.434 241.456 367.744 cv
239.766 367.424 238.396 367.074 237.346 366.724 cv
235.746 366.194 234.886 365.664 234.816 365.244 cv
235.036 363.974 242.506 361.704 256.136 361.304 cv
256.136 359.314 li
246.346 359.634 232.816 361.124 232.816 365.244 cv
232.816 366.224 233.576 367.054 234.866 367.744 cv
235.556 368.124 236.396 368.464 237.346 368.764 cv
242.156 370.294 249.906 370.964 256.136 371.174 cv
257.636 371.224 259.046 371.244 260.316 371.244 cv
266.826 371.244 277.316 370.654 283.286 368.764 cv
284.236 368.464 285.076 368.124 285.766 367.744 cv
285.076 367.364 284.236 367.024 283.286 366.724 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 365.279 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.00392157 .00392157 .00392157 ]
/C1 [.00392157 .00392157 .00392157 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.576471 .576471 .572549 ]
/C1 [.00392157 .00392157 .00392157 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.576471 .576471 .572549 ]
/C1 [.607843 .607843 .603922 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.607843 .607843 .603922 ]
/C1 [1 1 1 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [.313726 .309804 .305882 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.211765 .211765 .207843 ]
/C1 [.313726 .309804 .305882 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.376471 .376471 .372549 ]
/C1 [.211765 .211765 .207843 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.196078 .196078 .192157 ]
/C1 [.376471 .376471 .372549 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.196078 .196078 .192157 ]
/C1 [.282353 .282353 .278431 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.282353 .282353 .278431 ]
/C1 [.184314 .180392 .176471 ]
/N 1 
>>
]
/Bounds [.137755 .336735 .423469 .505102 .581633 .647959 .72449 .816326 .872449 ]
/Encode [0 1 1 0 0 1 0 1 0 1 1 0 1 0 1 0 0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 365.279 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!sJr<%M9Bk)B9hC,q(8r0JbUI4?l/$7nQKP
;c[%*?=@AWC2Ip1Fa/7^JV8c7N/s-cPE_;rQ'IW#QBml(Q^F/.R@0M4R[p1NXK]+D^Vn4<db!:4jm)=+
q#1!Vk2+Y4_n*+OT9bIiHZEh.=AM[c91_ZD770C,5!:tg3&``T3]oSk6UaL:92/2[<*!+)>[C`B>?P$-
;c-=b91_WB6U<q"4#o5W1GUaD2E3]Y4?btq6:=747n,p96pj:-5sRY!5!;"j4$#A]3&``Q2)I*E1,1I9
~>
<~!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!sJr<%M9Bk)B9hC,q(8r0JbUI4?l/$7nQKP
;c[%*?=@AWC2Ip1Fa/7^JV8c7N/s-cPE_;rQ'IW#QBml(Q^F/.R@0M4R[p1NXK]+D^Vn4<db!:4jm)=+
q#1!Vk2"P1_RZnKSs>7eHZEh.=&)I_8k;HA6pj7*5!:tg3&``T3]oSk6UaL:92/2[<*!+)>[C`B>?P$-
;c-=b91_WB6U<q"4#o5W1GUaD2E3]Y4?btq6:=747n,p96pj:,5sRXu4Ztnh3]T2[2`<NN1c$mA0eb75
~>
<~!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!sJr<%M9Bk)&s_B,q(5p0JbUI4?c&!7nQKO
;H6h'?=@>UBl%^.FE`%ZJ:iT4MiNp_P*;)nPa%DtQ'IZ$QC!r*R$a;0R@KtJX0B"B^;J%:dam12jm)=+
q#1!Vk2"P1_RZnKSs>7eH?!V*<_Z7[8Ol6=6UF%&4Zkbc2`<NP3BKAg6:=:68k_uW;cQn%>?tN>>$+g)
;G^+^8k;E>69m^s3]K#S1,1O@2)dKU4$>bm5sn%07R]^56UF((5X.Fq4?P\d3B/uW2Dm<J1GU[=0J>%1
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
290.125 398.591 mo
290.125 401.667 287.632 404.16 284.556 404.16 cv
281.076 404.16 li
278 404.16 275.506 401.667 275.506 398.591 cv
275.506 398.591 li
275.506 395.515 278 393.021 281.076 393.021 cv
284.556 393.021 li
287.632 393.021 290.125 395.515 290.125 398.591 cv
290.125 398.591 li
cp
0 0 0 rgb
f
281.076 394.066 mo
278.58 394.066 276.55 396.096 276.55 398.591 cv
276.55 401.086 278.58 403.115 281.076 403.115 cv
284.556 403.115 li
287.052 403.115 289.082 401.086 289.082 398.591 cv
289.082 396.096 287.052 394.066 284.556 394.066 cv
281.076 394.066 li
cp
284.556 405.204 mo
281.076 405.204 li
277.429 405.204 274.462 402.237 274.462 398.591 cv
274.462 394.944 277.429 391.977 281.076 391.977 cv
284.556 391.977 li
288.203 391.977 291.17 394.944 291.17 398.591 cv
291.17 402.237 288.203 405.204 284.556 405.204 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 398.591 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 398.591 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 396.091 mo
285.076 395.711 284.236 395.371 283.286 395.071 cv
282.236 395.421 280.866 395.771 279.176 396.091 cv
280.866 396.411 282.236 396.761 283.286 397.111 cv
284.886 397.641 285.746 398.171 285.816 398.591 cv
285.576 399.981 276.596 402.591 260.316 402.591 cv
258.866 402.591 257.476 402.57 256.136 402.53 cv
242.506 402.131 235.036 399.861 234.816 398.591 cv
234.886 398.171 235.746 397.641 237.346 397.111 cv
238.396 396.761 239.766 396.411 241.456 396.091 cv
244.996 395.401 249.926 394.831 256.136 394.651 cv
256.136 392.661 li
249.906 392.871 242.156 393.541 237.346 395.071 cv
236.396 395.371 235.556 395.711 234.866 396.091 cv
233.576 396.781 232.816 397.611 232.816 398.591 cv
232.816 402.711 246.346 404.2 256.136 404.521 cv
257.636 404.57 259.046 404.591 260.316 404.591 cv
269.826 404.591 287.816 403.341 287.816 398.591 cv
287.816 397.611 287.056 396.781 285.766 396.091 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 398.626 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 398.626 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 395.071 mo
282.236 395.421 280.866 395.771 279.176 396.091 cv
274.866 396.931 268.516 397.591 260.316 397.591 cv
258.866 397.591 257.476 397.571 256.136 397.531 cv
249.926 397.351 244.996 396.781 241.456 396.091 cv
239.766 395.771 238.396 395.421 237.346 395.071 cv
235.746 394.541 234.886 394.011 234.816 393.591 cv
235.036 392.321 242.506 390.051 256.136 389.651 cv
256.136 387.661 li
246.346 387.981 232.816 389.471 232.816 393.591 cv
232.816 394.571 233.576 395.401 234.866 396.091 cv
235.556 396.471 236.396 396.811 237.346 397.111 cv
242.156 398.641 249.906 399.311 256.136 399.521 cv
257.636 399.571 259.046 399.591 260.316 399.591 cv
266.826 399.591 277.316 399.001 283.286 397.111 cv
284.236 396.811 285.076 396.471 285.766 396.091 cv
285.076 395.711 284.236 395.371 283.286 395.071 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 393.626 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 393.626 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 395.071 mo
282.236 395.421 280.866 395.771 279.176 396.091 cv
274.866 396.931 268.516 397.591 260.316 397.591 cv
258.866 397.591 257.476 397.571 256.136 397.531 cv
249.926 397.351 244.996 396.781 241.456 396.091 cv
239.766 395.771 238.396 395.421 237.346 395.071 cv
235.746 394.541 234.886 394.011 234.816 393.591 cv
235.036 392.321 242.506 390.051 256.136 389.651 cv
256.136 387.661 li
246.346 387.981 232.816 389.471 232.816 393.591 cv
232.816 394.571 233.576 395.401 234.866 396.091 cv
235.556 396.471 236.396 396.811 237.346 397.111 cv
242.156 398.641 249.906 399.311 256.136 399.521 cv
257.636 399.571 259.046 399.591 260.316 399.591 cv
266.826 399.591 277.316 399.001 283.286 397.111 cv
284.236 396.811 285.076 396.471 285.766 396.091 cv
285.076 395.711 284.236 395.371 283.286 395.071 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 393.626 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 393.626 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 396.091 mo
285.076 395.711 284.236 395.371 283.286 395.071 cv
282.236 395.421 280.866 395.771 279.176 396.091 cv
280.866 396.411 282.236 396.761 283.286 397.111 cv
284.886 397.641 285.746 398.171 285.816 398.591 cv
285.576 399.981 276.596 402.591 260.316 402.591 cv
258.866 402.591 257.476 402.57 256.136 402.53 cv
242.506 402.131 235.036 399.861 234.816 398.591 cv
234.886 398.171 235.746 397.641 237.346 397.111 cv
238.396 396.761 239.766 396.411 241.456 396.091 cv
244.996 395.401 249.926 394.831 256.136 394.651 cv
256.136 392.661 li
249.906 392.871 242.156 393.541 237.346 395.071 cv
236.396 395.371 235.556 395.711 234.866 396.091 cv
233.576 396.781 232.816 397.611 232.816 398.591 cv
232.816 402.711 246.346 404.2 256.136 404.521 cv
257.636 404.57 259.046 404.591 260.316 404.591 cv
269.826 404.591 287.816 403.341 287.816 398.591 cv
287.816 397.611 287.056 396.781 285.766 396.091 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 398.626 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 398.626 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 395.071 mo
282.236 395.421 280.866 395.771 279.176 396.091 cv
274.866 396.931 268.516 397.591 260.316 397.591 cv
258.866 397.591 257.476 397.571 256.136 397.531 cv
249.926 397.351 244.996 396.781 241.456 396.091 cv
239.766 395.771 238.396 395.421 237.346 395.071 cv
235.746 394.541 234.886 394.011 234.816 393.591 cv
235.036 392.321 242.506 390.051 256.136 389.651 cv
256.136 387.661 li
246.346 387.981 232.816 389.471 232.816 393.591 cv
232.816 394.571 233.576 395.401 234.866 396.091 cv
235.556 396.471 236.396 396.811 237.346 397.111 cv
242.156 398.641 249.906 399.311 256.136 399.521 cv
257.636 399.571 259.046 399.591 260.316 399.591 cv
266.826 399.591 277.316 399.001 283.286 397.111 cv
284.236 396.811 285.076 396.471 285.766 396.091 cv
285.076 395.711 284.236 395.371 283.286 395.071 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 393.626 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 393.626 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 426.938 mo
290.125 430.014 287.632 432.507 284.556 432.507 cv
281.076 432.507 li
278 432.507 275.506 430.014 275.506 426.938 cv
275.506 426.938 li
275.506 423.861 278 421.368 281.076 421.368 cv
284.556 421.368 li
287.632 421.368 290.125 423.861 290.125 426.938 cv
290.125 426.938 li
cp
0 0 0 rgb
f
281.076 422.412 mo
278.58 422.412 276.55 424.442 276.55 426.938 cv
276.55 429.433 278.58 431.462 281.076 431.462 cv
284.556 431.462 li
287.052 431.462 289.082 429.433 289.082 426.938 cv
289.082 424.442 287.052 422.412 284.556 422.412 cv
281.076 422.412 li
cp
284.556 433.551 mo
281.076 433.551 li
277.429 433.551 274.462 430.584 274.462 426.938 cv
274.462 423.291 277.429 420.323 281.076 420.323 cv
284.556 420.323 li
288.203 420.323 291.17 423.291 291.17 426.938 cv
291.17 430.584 288.203 433.551 284.556 433.551 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 426.938 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 426.938 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 424.438 mo
285.076 424.058 284.236 423.717 283.286 423.417 cv
282.236 423.768 280.866 424.117 279.176 424.438 cv
280.866 424.757 282.236 425.107 283.286 425.457 cv
284.886 425.987 285.746 426.518 285.816 426.938 cv
285.576 428.327 276.596 430.938 260.316 430.938 cv
258.866 430.938 257.476 430.917 256.136 430.877 cv
242.506 430.478 235.036 428.207 234.816 426.938 cv
234.886 426.518 235.746 425.987 237.346 425.457 cv
238.396 425.107 239.766 424.757 241.456 424.438 cv
244.996 423.747 249.926 423.178 256.136 422.997 cv
256.136 421.007 li
249.906 421.217 242.156 421.888 237.346 423.417 cv
236.396 423.717 235.556 424.058 234.866 424.438 cv
233.576 425.127 232.816 425.957 232.816 426.938 cv
232.816 431.058 246.346 432.547 256.136 432.867 cv
257.636 432.917 259.046 432.938 260.316 432.938 cv
269.826 432.938 287.816 431.688 287.816 426.938 cv
287.816 425.957 287.056 425.127 285.766 424.438 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 426.973 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 426.973 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 423.417 mo
282.236 423.768 280.866 424.117 279.176 424.438 cv
274.866 425.277 268.516 425.938 260.316 425.938 cv
258.866 425.938 257.476 425.917 256.136 425.877 cv
249.926 425.697 244.996 425.127 241.456 424.438 cv
239.766 424.117 238.396 423.768 237.346 423.417 cv
235.746 422.888 234.886 422.357 234.816 421.938 cv
235.036 420.667 242.506 418.397 256.136 417.997 cv
256.136 416.007 li
246.346 416.327 232.816 417.817 232.816 421.938 cv
232.816 422.917 233.576 423.747 234.866 424.438 cv
235.556 424.817 236.396 425.157 237.346 425.457 cv
242.156 426.987 249.906 427.657 256.136 427.867 cv
257.636 427.917 259.046 427.938 260.316 427.938 cv
266.826 427.938 277.316 427.348 283.286 425.457 cv
284.236 425.157 285.076 424.817 285.766 424.438 cv
285.076 424.058 284.236 423.717 283.286 423.417 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 421.973 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 421.973 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 423.417 mo
282.236 423.768 280.866 424.117 279.176 424.438 cv
274.866 425.277 268.516 425.938 260.316 425.938 cv
258.866 425.938 257.476 425.917 256.136 425.877 cv
249.926 425.697 244.996 425.127 241.456 424.438 cv
239.766 424.117 238.396 423.768 237.346 423.417 cv
235.746 422.888 234.886 422.357 234.816 421.938 cv
235.036 420.667 242.506 418.397 256.136 417.997 cv
256.136 416.007 li
246.346 416.327 232.816 417.817 232.816 421.938 cv
232.816 422.917 233.576 423.747 234.866 424.438 cv
235.556 424.817 236.396 425.157 237.346 425.457 cv
242.156 426.987 249.906 427.657 256.136 427.867 cv
257.636 427.917 259.046 427.938 260.316 427.938 cv
266.826 427.938 277.316 427.348 283.286 425.457 cv
284.236 425.157 285.076 424.817 285.766 424.438 cv
285.076 424.058 284.236 423.717 283.286 423.417 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 421.973 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 421.973 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 424.438 mo
285.076 424.058 284.236 423.717 283.286 423.417 cv
282.236 423.768 280.866 424.117 279.176 424.438 cv
280.866 424.757 282.236 425.107 283.286 425.457 cv
284.886 425.987 285.746 426.518 285.816 426.938 cv
285.576 428.327 276.596 430.938 260.316 430.938 cv
258.866 430.938 257.476 430.917 256.136 430.877 cv
242.506 430.478 235.036 428.207 234.816 426.938 cv
234.886 426.518 235.746 425.987 237.346 425.457 cv
238.396 425.107 239.766 424.757 241.456 424.438 cv
244.996 423.747 249.926 423.178 256.136 422.997 cv
256.136 421.007 li
249.906 421.217 242.156 421.888 237.346 423.417 cv
236.396 423.717 235.556 424.058 234.866 424.438 cv
233.576 425.127 232.816 425.957 232.816 426.938 cv
232.816 431.058 246.346 432.547 256.136 432.867 cv
257.636 432.917 259.046 432.938 260.316 432.938 cv
269.826 432.938 287.816 431.688 287.816 426.938 cv
287.816 425.957 287.056 425.127 285.766 424.438 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 426.973 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 426.973 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 423.417 mo
282.236 423.768 280.866 424.117 279.176 424.438 cv
274.866 425.277 268.516 425.938 260.316 425.938 cv
258.866 425.938 257.476 425.917 256.136 425.877 cv
249.926 425.697 244.996 425.127 241.456 424.438 cv
239.766 424.117 238.396 423.768 237.346 423.417 cv
235.746 422.888 234.886 422.357 234.816 421.938 cv
235.036 420.667 242.506 418.397 256.136 417.997 cv
256.136 416.007 li
246.346 416.327 232.816 417.817 232.816 421.938 cv
232.816 422.917 233.576 423.747 234.866 424.438 cv
235.556 424.817 236.396 425.157 237.346 425.457 cv
242.156 426.987 249.906 427.657 256.136 427.867 cv
257.636 427.917 259.046 427.938 260.316 427.938 cv
266.826 427.938 277.316 427.348 283.286 425.457 cv
284.236 425.157 285.076 424.817 285.766 424.438 cv
285.076 424.058 284.236 423.717 283.286 423.417 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 421.973 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 421.973 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 455.284 mo
290.125 458.36 287.632 460.854 284.556 460.854 cv
281.076 460.854 li
278 460.854 275.506 458.36 275.506 455.284 cv
275.506 455.284 li
275.506 452.208 278 449.715 281.076 449.715 cv
284.556 449.715 li
287.632 449.715 290.125 452.208 290.125 455.284 cv
290.125 455.284 li
cp
0 0 0 rgb
f
281.076 450.759 mo
278.58 450.759 276.55 452.789 276.55 455.284 cv
276.55 457.779 278.58 459.809 281.076 459.809 cv
284.556 459.809 li
287.052 459.809 289.082 457.779 289.082 455.284 cv
289.082 452.789 287.052 450.759 284.556 450.759 cv
281.076 450.759 li
cp
284.556 461.897 mo
281.076 461.897 li
277.429 461.897 274.462 458.931 274.462 455.284 cv
274.462 451.638 277.429 448.67 281.076 448.67 cv
284.556 448.67 li
288.203 448.67 291.17 451.638 291.17 455.284 cv
291.17 458.931 288.203 461.897 284.556 461.897 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 455.283 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 455.283 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 452.784 mo
285.076 452.404 284.236 452.063 283.286 451.764 cv
282.236 452.114 280.866 452.464 279.176 452.784 cv
280.866 453.104 282.236 453.454 283.286 453.804 cv
284.886 454.334 285.746 454.864 285.816 455.284 cv
285.576 456.674 276.596 459.284 260.316 459.284 cv
258.866 459.284 257.476 459.264 256.136 459.224 cv
242.506 458.824 235.036 456.554 234.816 455.284 cv
234.886 454.864 235.746 454.334 237.346 453.804 cv
238.396 453.454 239.766 453.104 241.456 452.784 cv
244.996 452.094 249.926 451.524 256.136 451.344 cv
256.136 449.354 li
249.906 449.563 242.156 450.234 237.346 451.764 cv
236.396 452.063 235.556 452.404 234.866 452.784 cv
233.576 453.474 232.816 454.304 232.816 455.284 cv
232.816 459.404 246.346 460.894 256.136 461.214 cv
257.636 461.264 259.046 461.284 260.316 461.284 cv
269.826 461.284 287.816 460.034 287.816 455.284 cv
287.816 454.304 287.056 453.474 285.766 452.784 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 455.318 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 455.318 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 451.764 mo
282.236 452.114 280.866 452.464 279.176 452.784 cv
274.866 453.624 268.516 454.284 260.316 454.284 cv
258.866 454.284 257.476 454.264 256.136 454.224 cv
249.926 454.044 244.996 453.474 241.456 452.784 cv
239.766 452.464 238.396 452.114 237.346 451.764 cv
235.746 451.234 234.886 450.704 234.816 450.284 cv
235.036 449.014 242.506 446.744 256.136 446.344 cv
256.136 444.354 li
246.346 444.674 232.816 446.164 232.816 450.284 cv
232.816 451.264 233.576 452.094 234.866 452.784 cv
235.556 453.164 236.396 453.504 237.346 453.804 cv
242.156 455.334 249.906 456.004 256.136 456.214 cv
257.636 456.264 259.046 456.284 260.316 456.284 cv
266.826 456.284 277.316 455.694 283.286 453.804 cv
284.236 453.504 285.076 453.164 285.766 452.784 cv
285.076 452.404 284.236 452.063 283.286 451.764 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 450.318 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 450.318 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 451.764 mo
282.236 452.114 280.866 452.464 279.176 452.784 cv
274.866 453.624 268.516 454.284 260.316 454.284 cv
258.866 454.284 257.476 454.264 256.136 454.224 cv
249.926 454.044 244.996 453.474 241.456 452.784 cv
239.766 452.464 238.396 452.114 237.346 451.764 cv
235.746 451.234 234.886 450.704 234.816 450.284 cv
235.036 449.014 242.506 446.744 256.136 446.344 cv
256.136 444.354 li
246.346 444.674 232.816 446.164 232.816 450.284 cv
232.816 451.264 233.576 452.094 234.866 452.784 cv
235.556 453.164 236.396 453.504 237.346 453.804 cv
242.156 455.334 249.906 456.004 256.136 456.214 cv
257.636 456.264 259.046 456.284 260.316 456.284 cv
266.826 456.284 277.316 455.694 283.286 453.804 cv
284.236 453.504 285.076 453.164 285.766 452.784 cv
285.076 452.404 284.236 452.063 283.286 451.764 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 450.318 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 450.318 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 452.784 mo
285.076 452.404 284.236 452.063 283.286 451.764 cv
282.236 452.114 280.866 452.464 279.176 452.784 cv
280.866 453.104 282.236 453.454 283.286 453.804 cv
284.886 454.334 285.746 454.864 285.816 455.284 cv
285.576 456.674 276.596 459.284 260.316 459.284 cv
258.866 459.284 257.476 459.264 256.136 459.224 cv
242.506 458.824 235.036 456.554 234.816 455.284 cv
234.886 454.864 235.746 454.334 237.346 453.804 cv
238.396 453.454 239.766 453.104 241.456 452.784 cv
244.996 452.094 249.926 451.524 256.136 451.344 cv
256.136 449.354 li
249.906 449.563 242.156 450.234 237.346 451.764 cv
236.396 452.063 235.556 452.404 234.866 452.784 cv
233.576 453.474 232.816 454.304 232.816 455.284 cv
232.816 459.404 246.346 460.894 256.136 461.214 cv
257.636 461.264 259.046 461.284 260.316 461.284 cv
269.826 461.284 287.816 460.034 287.816 455.284 cv
287.816 454.304 287.056 453.474 285.766 452.784 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 455.318 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 455.318 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 451.764 mo
282.236 452.114 280.866 452.464 279.176 452.784 cv
274.866 453.624 268.516 454.284 260.316 454.284 cv
258.866 454.284 257.476 454.264 256.136 454.224 cv
249.926 454.044 244.996 453.474 241.456 452.784 cv
239.766 452.464 238.396 452.114 237.346 451.764 cv
235.746 451.234 234.886 450.704 234.816 450.284 cv
235.036 449.014 242.506 446.744 256.136 446.344 cv
256.136 444.354 li
246.346 444.674 232.816 446.164 232.816 450.284 cv
232.816 451.264 233.576 452.094 234.866 452.784 cv
235.556 453.164 236.396 453.504 237.346 453.804 cv
242.156 455.334 249.906 456.004 256.136 456.214 cv
257.636 456.264 259.046 456.284 260.316 456.284 cv
266.826 456.284 277.316 455.694 283.286 453.804 cv
284.236 453.504 285.076 453.164 285.766 452.784 cv
285.076 452.404 284.236 452.063 283.286 451.764 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 450.318 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 450.318 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 483.631 mo
290.125 486.707 287.632 489.2 284.556 489.2 cv
281.076 489.2 li
278 489.2 275.506 486.707 275.506 483.631 cv
275.506 483.631 li
275.506 480.555 278 478.062 281.076 478.062 cv
284.556 478.062 li
287.632 478.062 290.125 480.555 290.125 483.631 cv
290.125 483.631 li
cp
0 0 0 rgb
f
281.076 479.105 mo
278.58 479.105 276.55 481.136 276.55 483.631 cv
276.55 486.126 278.58 488.155 281.076 488.155 cv
284.556 488.155 li
287.052 488.155 289.082 486.126 289.082 483.631 cv
289.082 481.136 287.052 479.105 284.556 479.105 cv
281.076 479.105 li
cp
284.556 490.244 mo
281.076 490.244 li
277.429 490.244 274.462 487.277 274.462 483.631 cv
274.462 479.984 277.429 477.017 281.076 477.017 cv
284.556 477.017 li
288.203 477.017 291.17 479.984 291.17 483.631 cv
291.17 487.277 288.203 490.244 284.556 490.244 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 483.631 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 483.631 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 481.131 mo
285.076 480.751 284.236 480.41 283.286 480.11 cv
282.236 480.461 280.866 480.811 279.176 481.131 cv
280.866 481.45 282.236 481.801 283.286 482.15 cv
284.886 482.681 285.746 483.211 285.816 483.631 cv
285.576 485.021 276.596 487.631 260.316 487.631 cv
258.866 487.631 257.476 487.61 256.136 487.57 cv
242.506 487.171 235.036 484.9 234.816 483.631 cv
234.886 483.211 235.746 482.681 237.346 482.15 cv
238.396 481.801 239.766 481.45 241.456 481.131 cv
244.996 480.44 249.926 479.871 256.136 479.69 cv
256.136 477.7 li
249.906 477.91 242.156 478.581 237.346 480.11 cv
236.396 480.41 235.556 480.751 234.866 481.131 cv
233.576 481.82 232.816 482.65 232.816 483.631 cv
232.816 487.751 246.346 489.24 256.136 489.561 cv
257.636 489.61 259.046 489.631 260.316 489.631 cv
269.826 489.631 287.816 488.381 287.816 483.631 cv
287.816 482.65 287.056 481.82 285.766 481.131 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 483.666 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 483.666 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 480.11 mo
282.236 480.461 280.866 480.811 279.176 481.131 cv
274.866 481.971 268.516 482.631 260.316 482.631 cv
258.866 482.631 257.476 482.61 256.136 482.57 cv
249.926 482.391 244.996 481.82 241.456 481.131 cv
239.766 480.811 238.396 480.461 237.346 480.11 cv
235.746 479.581 234.886 479.051 234.816 478.631 cv
235.036 477.36 242.506 475.091 256.136 474.69 cv
256.136 472.7 li
246.346 473.021 232.816 474.511 232.816 478.631 cv
232.816 479.61 233.576 480.44 234.866 481.131 cv
235.556 481.511 236.396 481.851 237.346 482.15 cv
242.156 483.681 249.906 484.351 256.136 484.561 cv
257.636 484.61 259.046 484.631 260.316 484.631 cv
266.826 484.631 277.316 484.041 283.286 482.15 cv
284.236 481.851 285.076 481.511 285.766 481.131 cv
285.076 480.751 284.236 480.41 283.286 480.11 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 478.666 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 478.666 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 480.11 mo
282.236 480.461 280.866 480.811 279.176 481.131 cv
274.866 481.971 268.516 482.631 260.316 482.631 cv
258.866 482.631 257.476 482.61 256.136 482.57 cv
249.926 482.391 244.996 481.82 241.456 481.131 cv
239.766 480.811 238.396 480.461 237.346 480.11 cv
235.746 479.581 234.886 479.051 234.816 478.631 cv
235.036 477.36 242.506 475.091 256.136 474.69 cv
256.136 472.7 li
246.346 473.021 232.816 474.511 232.816 478.631 cv
232.816 479.61 233.576 480.44 234.866 481.131 cv
235.556 481.511 236.396 481.851 237.346 482.15 cv
242.156 483.681 249.906 484.351 256.136 484.561 cv
257.636 484.61 259.046 484.631 260.316 484.631 cv
266.826 484.631 277.316 484.041 283.286 482.15 cv
284.236 481.851 285.076 481.511 285.766 481.131 cv
285.076 480.751 284.236 480.41 283.286 480.11 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 478.666 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 478.666 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 481.131 mo
285.076 480.751 284.236 480.41 283.286 480.11 cv
282.236 480.461 280.866 480.811 279.176 481.131 cv
280.866 481.45 282.236 481.801 283.286 482.15 cv
284.886 482.681 285.746 483.211 285.816 483.631 cv
285.576 485.021 276.596 487.631 260.316 487.631 cv
258.866 487.631 257.476 487.61 256.136 487.57 cv
242.506 487.171 235.036 484.9 234.816 483.631 cv
234.886 483.211 235.746 482.681 237.346 482.15 cv
238.396 481.801 239.766 481.45 241.456 481.131 cv
244.996 480.44 249.926 479.871 256.136 479.69 cv
256.136 477.7 li
249.906 477.91 242.156 478.581 237.346 480.11 cv
236.396 480.41 235.556 480.751 234.866 481.131 cv
233.576 481.82 232.816 482.65 232.816 483.631 cv
232.816 487.751 246.346 489.24 256.136 489.561 cv
257.636 489.61 259.046 489.631 260.316 489.631 cv
269.826 489.631 287.816 488.381 287.816 483.631 cv
287.816 482.65 287.056 481.82 285.766 481.131 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 483.666 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 483.666 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 480.11 mo
282.236 480.461 280.866 480.811 279.176 481.131 cv
274.866 481.971 268.516 482.631 260.316 482.631 cv
258.866 482.631 257.476 482.61 256.136 482.57 cv
249.926 482.391 244.996 481.82 241.456 481.131 cv
239.766 480.811 238.396 480.461 237.346 480.11 cv
235.746 479.581 234.886 479.051 234.816 478.631 cv
235.036 477.36 242.506 475.091 256.136 474.69 cv
256.136 472.7 li
246.346 473.021 232.816 474.511 232.816 478.631 cv
232.816 479.61 233.576 480.44 234.866 481.131 cv
235.556 481.511 236.396 481.851 237.346 482.15 cv
242.156 483.681 249.906 484.351 256.136 484.561 cv
257.636 484.61 259.046 484.631 260.316 484.631 cv
266.826 484.631 277.316 484.041 283.286 482.15 cv
284.236 481.851 285.076 481.511 285.766 481.131 cv
285.076 480.751 284.236 480.41 283.286 480.11 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 478.666 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 478.666 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 511.978 mo
290.125 515.054 287.632 517.547 284.556 517.547 cv
281.076 517.547 li
278 517.547 275.506 515.054 275.506 511.978 cv
275.506 511.978 li
275.506 508.901 278 506.408 281.076 506.408 cv
284.556 506.408 li
287.632 506.408 290.125 508.901 290.125 511.978 cv
290.125 511.978 li
cp
0 0 0 rgb
f
281.076 507.452 mo
278.58 507.452 276.55 509.482 276.55 511.978 cv
276.55 514.473 278.58 516.502 281.076 516.502 cv
284.556 516.502 li
287.052 516.502 289.082 514.473 289.082 511.978 cv
289.082 509.482 287.052 507.452 284.556 507.452 cv
281.076 507.452 li
cp
284.556 518.591 mo
281.076 518.591 li
277.429 518.591 274.462 515.624 274.462 511.978 cv
274.462 508.331 277.429 505.363 281.076 505.363 cv
284.556 505.363 li
288.203 505.363 291.17 508.331 291.17 511.978 cv
291.17 515.624 288.203 518.591 284.556 518.591 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 511.977 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 511.977 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 509.478 mo
285.076 509.098 284.236 508.757 283.286 508.457 cv
282.236 508.808 280.866 509.157 279.176 509.478 cv
280.866 509.797 282.236 510.147 283.286 510.497 cv
284.886 511.027 285.746 511.558 285.816 511.978 cv
285.576 513.367 276.596 515.978 260.316 515.978 cv
258.866 515.978 257.476 515.957 256.136 515.917 cv
242.506 515.518 235.036 513.247 234.816 511.978 cv
234.886 511.558 235.746 511.027 237.346 510.497 cv
238.396 510.147 239.766 509.797 241.456 509.478 cv
244.996 508.787 249.926 508.218 256.136 508.037 cv
256.136 506.047 li
249.906 506.257 242.156 506.928 237.346 508.457 cv
236.396 508.757 235.556 509.098 234.866 509.478 cv
233.576 510.167 232.816 510.997 232.816 511.978 cv
232.816 516.098 246.346 517.587 256.136 517.907 cv
257.636 517.957 259.046 517.978 260.316 517.978 cv
269.826 517.978 287.816 516.728 287.816 511.978 cv
287.816 510.997 287.056 510.167 285.766 509.478 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 512.012 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 512.012 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 508.457 mo
282.236 508.808 280.866 509.157 279.176 509.478 cv
274.866 510.317 268.516 510.978 260.316 510.978 cv
258.866 510.978 257.476 510.957 256.136 510.917 cv
249.926 510.737 244.996 510.167 241.456 509.478 cv
239.766 509.157 238.396 508.808 237.346 508.457 cv
235.746 507.928 234.886 507.397 234.816 506.978 cv
235.036 505.707 242.506 503.438 256.136 503.037 cv
256.136 501.047 li
246.346 501.367 232.816 502.857 232.816 506.978 cv
232.816 507.957 233.576 508.787 234.866 509.478 cv
235.556 509.857 236.396 510.197 237.346 510.497 cv
242.156 512.027 249.906 512.697 256.136 512.907 cv
257.636 512.957 259.046 512.978 260.316 512.978 cv
266.826 512.978 277.316 512.388 283.286 510.497 cv
284.236 510.197 285.076 509.857 285.766 509.478 cv
285.076 509.098 284.236 508.757 283.286 508.457 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 507.012 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 507.012 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 508.457 mo
282.236 508.808 280.866 509.157 279.176 509.478 cv
274.866 510.317 268.516 510.978 260.316 510.978 cv
258.866 510.978 257.476 510.957 256.136 510.917 cv
249.926 510.737 244.996 510.167 241.456 509.478 cv
239.766 509.157 238.396 508.808 237.346 508.457 cv
235.746 507.928 234.886 507.397 234.816 506.978 cv
235.036 505.707 242.506 503.438 256.136 503.037 cv
256.136 501.047 li
246.346 501.367 232.816 502.857 232.816 506.978 cv
232.816 507.957 233.576 508.787 234.866 509.478 cv
235.556 509.857 236.396 510.197 237.346 510.497 cv
242.156 512.027 249.906 512.697 256.136 512.907 cv
257.636 512.957 259.046 512.978 260.316 512.978 cv
266.826 512.978 277.316 512.388 283.286 510.497 cv
284.236 510.197 285.076 509.857 285.766 509.478 cv
285.076 509.098 284.236 508.757 283.286 508.457 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 507.012 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 507.012 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 509.478 mo
285.076 509.098 284.236 508.757 283.286 508.457 cv
282.236 508.808 280.866 509.157 279.176 509.478 cv
280.866 509.797 282.236 510.147 283.286 510.497 cv
284.886 511.027 285.746 511.558 285.816 511.978 cv
285.576 513.367 276.596 515.978 260.316 515.978 cv
258.866 515.978 257.476 515.957 256.136 515.917 cv
242.506 515.518 235.036 513.247 234.816 511.978 cv
234.886 511.558 235.746 511.027 237.346 510.497 cv
238.396 510.147 239.766 509.797 241.456 509.478 cv
244.996 508.787 249.926 508.218 256.136 508.037 cv
256.136 506.047 li
249.906 506.257 242.156 506.928 237.346 508.457 cv
236.396 508.757 235.556 509.098 234.866 509.478 cv
233.576 510.167 232.816 510.997 232.816 511.978 cv
232.816 516.098 246.346 517.587 256.136 517.907 cv
257.636 517.957 259.046 517.978 260.316 517.978 cv
269.826 517.978 287.816 516.728 287.816 511.978 cv
287.816 510.997 287.056 510.167 285.766 509.478 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 512.012 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 512.012 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 508.457 mo
282.236 508.808 280.866 509.157 279.176 509.478 cv
274.866 510.317 268.516 510.978 260.316 510.978 cv
258.866 510.978 257.476 510.957 256.136 510.917 cv
249.926 510.737 244.996 510.167 241.456 509.478 cv
239.766 509.157 238.396 508.808 237.346 508.457 cv
235.746 507.928 234.886 507.397 234.816 506.978 cv
235.036 505.707 242.506 503.438 256.136 503.037 cv
256.136 501.047 li
246.346 501.367 232.816 502.857 232.816 506.978 cv
232.816 507.957 233.576 508.787 234.866 509.478 cv
235.556 509.857 236.396 510.197 237.346 510.497 cv
242.156 512.027 249.906 512.697 256.136 512.907 cv
257.636 512.957 259.046 512.978 260.316 512.978 cv
266.826 512.978 277.316 512.388 283.286 510.497 cv
284.236 510.197 285.076 509.857 285.766 509.478 cv
285.076 509.098 284.236 508.757 283.286 508.457 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 507.012 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 507.012 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 540.324 mo
290.125 543.4 287.632 545.894 284.556 545.894 cv
281.076 545.894 li
278 545.894 275.506 543.4 275.506 540.324 cv
275.506 540.324 li
275.506 537.248 278 534.755 281.076 534.755 cv
284.556 534.755 li
287.632 534.755 290.125 537.248 290.125 540.324 cv
290.125 540.324 li
cp
0 0 0 rgb
f
281.076 535.799 mo
278.58 535.799 276.55 537.829 276.55 540.324 cv
276.55 542.819 278.58 544.849 281.076 544.849 cv
284.556 544.849 li
287.052 544.849 289.082 542.819 289.082 540.324 cv
289.082 537.829 287.052 535.799 284.556 535.799 cv
281.076 535.799 li
cp
284.556 546.938 mo
281.076 546.938 li
277.429 546.938 274.462 543.971 274.462 540.324 cv
274.462 536.678 277.429 533.71 281.076 533.71 cv
284.556 533.71 li
288.203 533.71 291.17 536.678 291.17 540.324 cv
291.17 543.971 288.203 546.938 284.556 546.938 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 540.324 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 540.324 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 537.824 mo
285.076 537.444 284.236 537.104 283.286 536.804 cv
282.236 537.154 280.866 537.504 279.176 537.824 cv
280.866 538.144 282.236 538.494 283.286 538.844 cv
284.886 539.374 285.746 539.904 285.816 540.324 cv
285.576 541.714 276.596 544.324 260.316 544.324 cv
258.866 544.324 257.476 544.304 256.136 544.264 cv
242.506 543.864 235.036 541.594 234.816 540.324 cv
234.886 539.904 235.746 539.374 237.346 538.844 cv
238.396 538.494 239.766 538.144 241.456 537.824 cv
244.996 537.134 249.926 536.564 256.136 536.384 cv
256.136 534.394 li
249.906 534.604 242.156 535.274 237.346 536.804 cv
236.396 537.104 235.556 537.444 234.866 537.824 cv
233.576 538.514 232.816 539.344 232.816 540.324 cv
232.816 544.444 246.346 545.934 256.136 546.254 cv
257.636 546.304 259.046 546.324 260.316 546.324 cv
269.826 546.324 287.816 545.074 287.816 540.324 cv
287.816 539.344 287.056 538.514 285.766 537.824 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 540.359 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 540.359 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 536.804 mo
282.236 537.154 280.866 537.504 279.176 537.824 cv
274.866 538.664 268.516 539.324 260.316 539.324 cv
258.866 539.324 257.476 539.304 256.136 539.264 cv
249.926 539.084 244.996 538.514 241.456 537.824 cv
239.766 537.504 238.396 537.154 237.346 536.804 cv
235.746 536.274 234.886 535.744 234.816 535.324 cv
235.036 534.054 242.506 531.784 256.136 531.384 cv
256.136 529.394 li
246.346 529.714 232.816 531.204 232.816 535.324 cv
232.816 536.304 233.576 537.134 234.866 537.824 cv
235.556 538.204 236.396 538.544 237.346 538.844 cv
242.156 540.374 249.906 541.044 256.136 541.254 cv
257.636 541.304 259.046 541.324 260.316 541.324 cv
266.826 541.324 277.316 540.734 283.286 538.844 cv
284.236 538.544 285.076 538.204 285.766 537.824 cv
285.076 537.444 284.236 537.104 283.286 536.804 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 535.359 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 535.359 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 536.804 mo
282.236 537.154 280.866 537.504 279.176 537.824 cv
274.866 538.664 268.516 539.324 260.316 539.324 cv
258.866 539.324 257.476 539.304 256.136 539.264 cv
249.926 539.084 244.996 538.514 241.456 537.824 cv
239.766 537.504 238.396 537.154 237.346 536.804 cv
235.746 536.274 234.886 535.744 234.816 535.324 cv
235.036 534.054 242.506 531.784 256.136 531.384 cv
256.136 529.394 li
246.346 529.714 232.816 531.204 232.816 535.324 cv
232.816 536.304 233.576 537.134 234.866 537.824 cv
235.556 538.204 236.396 538.544 237.346 538.844 cv
242.156 540.374 249.906 541.044 256.136 541.254 cv
257.636 541.304 259.046 541.324 260.316 541.324 cv
266.826 541.324 277.316 540.734 283.286 538.844 cv
284.236 538.544 285.076 538.204 285.766 537.824 cv
285.076 537.444 284.236 537.104 283.286 536.804 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 535.359 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 535.359 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 537.824 mo
285.076 537.444 284.236 537.104 283.286 536.804 cv
282.236 537.154 280.866 537.504 279.176 537.824 cv
280.866 538.144 282.236 538.494 283.286 538.844 cv
284.886 539.374 285.746 539.904 285.816 540.324 cv
285.576 541.714 276.596 544.324 260.316 544.324 cv
258.866 544.324 257.476 544.304 256.136 544.264 cv
242.506 543.864 235.036 541.594 234.816 540.324 cv
234.886 539.904 235.746 539.374 237.346 538.844 cv
238.396 538.494 239.766 538.144 241.456 537.824 cv
244.996 537.134 249.926 536.564 256.136 536.384 cv
256.136 534.394 li
249.906 534.604 242.156 535.274 237.346 536.804 cv
236.396 537.104 235.556 537.444 234.866 537.824 cv
233.576 538.514 232.816 539.344 232.816 540.324 cv
232.816 544.444 246.346 545.934 256.136 546.254 cv
257.636 546.304 259.046 546.324 260.316 546.324 cv
269.826 546.324 287.816 545.074 287.816 540.324 cv
287.816 539.344 287.056 538.514 285.766 537.824 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 540.359 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 540.359 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 536.804 mo
282.236 537.154 280.866 537.504 279.176 537.824 cv
274.866 538.664 268.516 539.324 260.316 539.324 cv
258.866 539.324 257.476 539.304 256.136 539.264 cv
249.926 539.084 244.996 538.514 241.456 537.824 cv
239.766 537.504 238.396 537.154 237.346 536.804 cv
235.746 536.274 234.886 535.744 234.816 535.324 cv
235.036 534.054 242.506 531.784 256.136 531.384 cv
256.136 529.394 li
246.346 529.714 232.816 531.204 232.816 535.324 cv
232.816 536.304 233.576 537.134 234.866 537.824 cv
235.556 538.204 236.396 538.544 237.346 538.844 cv
242.156 540.374 249.906 541.044 256.136 541.254 cv
257.636 541.304 259.046 541.324 260.316 541.324 cv
266.826 541.324 277.316 540.734 283.286 538.844 cv
284.236 538.544 285.076 538.204 285.766 537.824 cv
285.076 537.444 284.236 537.104 283.286 536.804 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 535.359 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 535.359 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 568.671 mo
290.125 571.747 287.632 574.24 284.556 574.24 cv
281.076 574.24 li
278 574.24 275.506 571.747 275.506 568.671 cv
275.506 568.671 li
275.506 565.595 278 563.102 281.076 563.102 cv
284.556 563.102 li
287.632 563.102 290.125 565.595 290.125 568.671 cv
290.125 568.671 li
cp
0 0 0 rgb
f
281.076 564.146 mo
278.58 564.146 276.55 566.176 276.55 568.671 cv
276.55 571.166 278.58 573.195 281.076 573.195 cv
284.556 573.195 li
287.052 573.195 289.082 571.166 289.082 568.671 cv
289.082 566.176 287.052 564.146 284.556 564.146 cv
281.076 564.146 li
cp
284.556 575.284 mo
281.076 575.284 li
277.429 575.284 274.462 572.317 274.462 568.671 cv
274.462 565.024 277.429 562.057 281.076 562.057 cv
284.556 562.057 li
288.203 562.057 291.17 565.024 291.17 568.671 cv
291.17 572.317 288.203 575.284 284.556 575.284 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 568.67 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 568.67 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 566.171 mo
285.076 565.791 284.236 565.45 283.286 565.15 cv
282.236 565.501 280.866 565.851 279.176 566.171 cv
280.866 566.49 282.236 566.841 283.286 567.19 cv
284.886 567.721 285.746 568.251 285.816 568.671 cv
285.576 570.061 276.596 572.671 260.316 572.671 cv
258.866 572.671 257.476 572.65 256.136 572.61 cv
242.506 572.211 235.036 569.94 234.816 568.671 cv
234.886 568.251 235.746 567.721 237.346 567.19 cv
238.396 566.841 239.766 566.49 241.456 566.171 cv
244.996 565.48 249.926 564.911 256.136 564.73 cv
256.136 562.74 li
249.906 562.95 242.156 563.621 237.346 565.15 cv
236.396 565.45 235.556 565.791 234.866 566.171 cv
233.576 566.86 232.816 567.69 232.816 568.671 cv
232.816 572.791 246.346 574.28 256.136 574.601 cv
257.636 574.65 259.046 574.671 260.316 574.671 cv
269.826 574.671 287.816 573.421 287.816 568.671 cv
287.816 567.69 287.056 566.86 285.766 566.171 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 568.705 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 568.705 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 565.15 mo
282.236 565.501 280.866 565.851 279.176 566.171 cv
274.866 567.011 268.516 567.671 260.316 567.671 cv
258.866 567.671 257.476 567.65 256.136 567.61 cv
249.926 567.431 244.996 566.86 241.456 566.171 cv
239.766 565.851 238.396 565.501 237.346 565.15 cv
235.746 564.621 234.886 564.091 234.816 563.671 cv
235.036 562.4 242.506 560.131 256.136 559.73 cv
256.136 557.74 li
246.346 558.061 232.816 559.551 232.816 563.671 cv
232.816 564.65 233.576 565.48 234.866 566.171 cv
235.556 566.551 236.396 566.891 237.346 567.19 cv
242.156 568.721 249.906 569.391 256.136 569.601 cv
257.636 569.65 259.046 569.671 260.316 569.671 cv
266.826 569.671 277.316 569.081 283.286 567.19 cv
284.236 566.891 285.076 566.551 285.766 566.171 cv
285.076 565.791 284.236 565.45 283.286 565.15 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 563.705 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 563.705 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 565.15 mo
282.236 565.501 280.866 565.851 279.176 566.171 cv
274.866 567.011 268.516 567.671 260.316 567.671 cv
258.866 567.671 257.476 567.65 256.136 567.61 cv
249.926 567.431 244.996 566.86 241.456 566.171 cv
239.766 565.851 238.396 565.501 237.346 565.15 cv
235.746 564.621 234.886 564.091 234.816 563.671 cv
235.036 562.4 242.506 560.131 256.136 559.73 cv
256.136 557.74 li
246.346 558.061 232.816 559.551 232.816 563.671 cv
232.816 564.65 233.576 565.48 234.866 566.171 cv
235.556 566.551 236.396 566.891 237.346 567.19 cv
242.156 568.721 249.906 569.391 256.136 569.601 cv
257.636 569.65 259.046 569.671 260.316 569.671 cv
266.826 569.671 277.316 569.081 283.286 567.19 cv
284.236 566.891 285.076 566.551 285.766 566.171 cv
285.076 565.791 284.236 565.45 283.286 565.15 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 563.705 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 563.705 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 566.171 mo
285.076 565.791 284.236 565.45 283.286 565.15 cv
282.236 565.501 280.866 565.851 279.176 566.171 cv
280.866 566.49 282.236 566.841 283.286 567.19 cv
284.886 567.721 285.746 568.251 285.816 568.671 cv
285.576 570.061 276.596 572.671 260.316 572.671 cv
258.866 572.671 257.476 572.65 256.136 572.61 cv
242.506 572.211 235.036 569.94 234.816 568.671 cv
234.886 568.251 235.746 567.721 237.346 567.19 cv
238.396 566.841 239.766 566.49 241.456 566.171 cv
244.996 565.48 249.926 564.911 256.136 564.73 cv
256.136 562.74 li
249.906 562.95 242.156 563.621 237.346 565.15 cv
236.396 565.45 235.556 565.791 234.866 566.171 cv
233.576 566.86 232.816 567.69 232.816 568.671 cv
232.816 572.791 246.346 574.28 256.136 574.601 cv
257.636 574.65 259.046 574.671 260.316 574.671 cv
269.826 574.671 287.816 573.421 287.816 568.671 cv
287.816 567.69 287.056 566.86 285.766 566.171 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 568.705 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 568.705 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 565.15 mo
282.236 565.501 280.866 565.851 279.176 566.171 cv
274.866 567.011 268.516 567.671 260.316 567.671 cv
258.866 567.671 257.476 567.65 256.136 567.61 cv
249.926 567.431 244.996 566.86 241.456 566.171 cv
239.766 565.851 238.396 565.501 237.346 565.15 cv
235.746 564.621 234.886 564.091 234.816 563.671 cv
235.036 562.4 242.506 560.131 256.136 559.73 cv
256.136 557.74 li
246.346 558.061 232.816 559.551 232.816 563.671 cv
232.816 564.65 233.576 565.48 234.866 566.171 cv
235.556 566.551 236.396 566.891 237.346 567.19 cv
242.156 568.721 249.906 569.391 256.136 569.601 cv
257.636 569.65 259.046 569.671 260.316 569.671 cv
266.826 569.671 277.316 569.081 283.286 567.19 cv
284.236 566.891 285.076 566.551 285.766 566.171 cv
285.076 565.791 284.236 565.45 283.286 565.15 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 563.705 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 563.705 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 597.018 mo
290.125 600.094 287.632 602.587 284.556 602.587 cv
281.076 602.587 li
278 602.587 275.506 600.094 275.506 597.018 cv
275.506 597.018 li
275.506 593.941 278 591.448 281.076 591.448 cv
284.556 591.448 li
287.632 591.448 290.125 593.941 290.125 597.018 cv
290.125 597.018 li
cp
0 0 0 rgb
f
281.076 592.492 mo
278.58 592.492 276.55 594.522 276.55 597.018 cv
276.55 599.513 278.58 601.542 281.076 601.542 cv
284.556 601.542 li
287.052 601.542 289.082 599.513 289.082 597.018 cv
289.082 594.522 287.052 592.492 284.556 592.492 cv
281.076 592.492 li
cp
284.556 603.631 mo
281.076 603.631 li
277.429 603.631 274.462 600.664 274.462 597.018 cv
274.462 593.371 277.429 590.403 281.076 590.403 cv
284.556 590.403 li
288.203 590.403 291.17 593.371 291.17 597.018 cv
291.17 600.664 288.203 603.631 284.556 603.631 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 597.018 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 597.018 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 594.518 mo
285.076 594.138 284.236 593.797 283.286 593.497 cv
282.236 593.848 280.866 594.197 279.176 594.518 cv
280.866 594.837 282.236 595.188 283.286 595.537 cv
284.886 596.067 285.746 596.598 285.816 597.018 cv
285.576 598.407 276.596 601.018 260.316 601.018 cv
258.866 601.018 257.476 600.997 256.136 600.957 cv
242.506 600.558 235.036 598.287 234.816 597.018 cv
234.886 596.598 235.746 596.067 237.346 595.537 cv
238.396 595.188 239.766 594.837 241.456 594.518 cv
244.996 593.827 249.926 593.258 256.136 593.077 cv
256.136 591.087 li
249.906 591.297 242.156 591.968 237.346 593.497 cv
236.396 593.797 235.556 594.138 234.866 594.518 cv
233.576 595.207 232.816 596.037 232.816 597.018 cv
232.816 601.138 246.346 602.627 256.136 602.947 cv
257.636 602.997 259.046 603.018 260.316 603.018 cv
269.826 603.018 287.816 601.768 287.816 597.018 cv
287.816 596.037 287.056 595.207 285.766 594.518 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 597.053 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 597.053 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 593.497 mo
282.236 593.848 280.866 594.197 279.176 594.518 cv
274.866 595.357 268.516 596.018 260.316 596.018 cv
258.866 596.018 257.476 595.997 256.136 595.957 cv
249.926 595.777 244.996 595.207 241.456 594.518 cv
239.766 594.197 238.396 593.848 237.346 593.497 cv
235.746 592.968 234.886 592.438 234.816 592.018 cv
235.036 590.747 242.506 588.478 256.136 588.077 cv
256.136 586.087 li
246.346 586.407 232.816 587.897 232.816 592.018 cv
232.816 592.997 233.576 593.827 234.866 594.518 cv
235.556 594.897 236.396 595.237 237.346 595.537 cv
242.156 597.067 249.906 597.737 256.136 597.947 cv
257.636 597.997 259.046 598.018 260.316 598.018 cv
266.826 598.018 277.316 597.428 283.286 595.537 cv
284.236 595.237 285.076 594.897 285.766 594.518 cv
285.076 594.138 284.236 593.797 283.286 593.497 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 592.053 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 592.053 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 593.497 mo
282.236 593.848 280.866 594.197 279.176 594.518 cv
274.866 595.357 268.516 596.018 260.316 596.018 cv
258.866 596.018 257.476 595.997 256.136 595.957 cv
249.926 595.777 244.996 595.207 241.456 594.518 cv
239.766 594.197 238.396 593.848 237.346 593.497 cv
235.746 592.968 234.886 592.438 234.816 592.018 cv
235.036 590.747 242.506 588.478 256.136 588.077 cv
256.136 586.087 li
246.346 586.407 232.816 587.897 232.816 592.018 cv
232.816 592.997 233.576 593.827 234.866 594.518 cv
235.556 594.897 236.396 595.237 237.346 595.537 cv
242.156 597.067 249.906 597.737 256.136 597.947 cv
257.636 597.997 259.046 598.018 260.316 598.018 cv
266.826 598.018 277.316 597.428 283.286 595.537 cv
284.236 595.237 285.076 594.897 285.766 594.518 cv
285.076 594.138 284.236 593.797 283.286 593.497 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 592.053 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 592.053 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 594.518 mo
285.076 594.138 284.236 593.797 283.286 593.497 cv
282.236 593.848 280.866 594.197 279.176 594.518 cv
280.866 594.837 282.236 595.188 283.286 595.537 cv
284.886 596.067 285.746 596.598 285.816 597.018 cv
285.576 598.407 276.596 601.018 260.316 601.018 cv
258.866 601.018 257.476 600.997 256.136 600.957 cv
242.506 600.558 235.036 598.287 234.816 597.018 cv
234.886 596.598 235.746 596.067 237.346 595.537 cv
238.396 595.188 239.766 594.837 241.456 594.518 cv
244.996 593.827 249.926 593.258 256.136 593.077 cv
256.136 591.087 li
249.906 591.297 242.156 591.968 237.346 593.497 cv
236.396 593.797 235.556 594.138 234.866 594.518 cv
233.576 595.207 232.816 596.037 232.816 597.018 cv
232.816 601.138 246.346 602.627 256.136 602.947 cv
257.636 602.997 259.046 603.018 260.316 603.018 cv
269.826 603.018 287.816 601.768 287.816 597.018 cv
287.816 596.037 287.056 595.207 285.766 594.518 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 597.053 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 597.053 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 593.497 mo
282.236 593.848 280.866 594.197 279.176 594.518 cv
274.866 595.357 268.516 596.018 260.316 596.018 cv
258.866 596.018 257.476 595.997 256.136 595.957 cv
249.926 595.777 244.996 595.207 241.456 594.518 cv
239.766 594.197 238.396 593.848 237.346 593.497 cv
235.746 592.968 234.886 592.438 234.816 592.018 cv
235.036 590.747 242.506 588.478 256.136 588.077 cv
256.136 586.087 li
246.346 586.407 232.816 587.897 232.816 592.018 cv
232.816 592.997 233.576 593.827 234.866 594.518 cv
235.556 594.897 236.396 595.237 237.346 595.537 cv
242.156 597.067 249.906 597.737 256.136 597.947 cv
257.636 597.997 259.046 598.018 260.316 598.018 cv
266.826 598.018 277.316 597.428 283.286 595.537 cv
284.236 595.237 285.076 594.897 285.766 594.518 cv
285.076 594.138 284.236 593.797 283.286 593.497 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 592.053 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 592.053 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 625.364 mo
290.125 628.44 287.632 630.934 284.556 630.934 cv
281.076 630.934 li
278 630.934 275.506 628.44 275.506 625.364 cv
275.506 625.364 li
275.506 622.288 278 619.795 281.076 619.795 cv
284.556 619.795 li
287.632 619.795 290.125 622.288 290.125 625.364 cv
290.125 625.364 li
cp
0 0 0 rgb
f
281.076 620.839 mo
278.58 620.839 276.55 622.869 276.55 625.364 cv
276.55 627.859 278.58 629.889 281.076 629.889 cv
284.556 629.889 li
287.052 629.889 289.082 627.859 289.082 625.364 cv
289.082 622.869 287.052 620.839 284.556 620.839 cv
281.076 620.839 li
cp
284.556 631.978 mo
281.076 631.978 li
277.429 631.978 274.462 629.011 274.462 625.364 cv
274.462 621.718 277.429 618.75 281.076 618.75 cv
284.556 618.75 li
288.203 618.75 291.17 621.718 291.17 625.364 cv
291.17 629.011 288.203 631.978 284.556 631.978 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 625.363 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 625.363 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 622.864 mo
285.076 622.484 284.236 622.144 283.286 621.844 cv
282.236 622.194 280.866 622.544 279.176 622.864 cv
280.866 623.184 282.236 623.534 283.286 623.884 cv
284.886 624.414 285.746 624.944 285.816 625.364 cv
285.576 626.754 276.596 629.364 260.316 629.364 cv
258.866 629.364 257.476 629.344 256.136 629.304 cv
242.506 628.904 235.036 626.634 234.816 625.364 cv
234.886 624.944 235.746 624.414 237.346 623.884 cv
238.396 623.534 239.766 623.184 241.456 622.864 cv
244.996 622.174 249.926 621.604 256.136 621.424 cv
256.136 619.434 li
249.906 619.644 242.156 620.314 237.346 621.844 cv
236.396 622.144 235.556 622.484 234.866 622.864 cv
233.576 623.554 232.816 624.384 232.816 625.364 cv
232.816 629.484 246.346 630.974 256.136 631.294 cv
257.636 631.344 259.046 631.364 260.316 631.364 cv
269.826 631.364 287.816 630.114 287.816 625.364 cv
287.816 624.384 287.056 623.554 285.766 622.864 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 625.398 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 625.398 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 621.844 mo
282.236 622.194 280.866 622.544 279.176 622.864 cv
274.866 623.704 268.516 624.364 260.316 624.364 cv
258.866 624.364 257.476 624.344 256.136 624.304 cv
249.926 624.124 244.996 623.554 241.456 622.864 cv
239.766 622.544 238.396 622.194 237.346 621.844 cv
235.746 621.314 234.886 620.784 234.816 620.364 cv
235.036 619.094 242.506 616.824 256.136 616.424 cv
256.136 614.434 li
246.346 614.754 232.816 616.244 232.816 620.364 cv
232.816 621.344 233.576 622.174 234.866 622.864 cv
235.556 623.244 236.396 623.584 237.346 623.884 cv
242.156 625.414 249.906 626.084 256.136 626.294 cv
257.636 626.344 259.046 626.364 260.316 626.364 cv
266.826 626.364 277.316 625.774 283.286 623.884 cv
284.236 623.584 285.076 623.244 285.766 622.864 cv
285.076 622.484 284.236 622.144 283.286 621.844 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 620.398 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 620.398 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 621.844 mo
282.236 622.194 280.866 622.544 279.176 622.864 cv
274.866 623.704 268.516 624.364 260.316 624.364 cv
258.866 624.364 257.476 624.344 256.136 624.304 cv
249.926 624.124 244.996 623.554 241.456 622.864 cv
239.766 622.544 238.396 622.194 237.346 621.844 cv
235.746 621.314 234.886 620.784 234.816 620.364 cv
235.036 619.094 242.506 616.824 256.136 616.424 cv
256.136 614.434 li
246.346 614.754 232.816 616.244 232.816 620.364 cv
232.816 621.344 233.576 622.174 234.866 622.864 cv
235.556 623.244 236.396 623.584 237.346 623.884 cv
242.156 625.414 249.906 626.084 256.136 626.294 cv
257.636 626.344 259.046 626.364 260.316 626.364 cv
266.826 626.364 277.316 625.774 283.286 623.884 cv
284.236 623.584 285.076 623.244 285.766 622.864 cv
285.076 622.484 284.236 622.144 283.286 621.844 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 620.398 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 620.398 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 622.864 mo
285.076 622.484 284.236 622.144 283.286 621.844 cv
282.236 622.194 280.866 622.544 279.176 622.864 cv
280.866 623.184 282.236 623.534 283.286 623.884 cv
284.886 624.414 285.746 624.944 285.816 625.364 cv
285.576 626.754 276.596 629.364 260.316 629.364 cv
258.866 629.364 257.476 629.344 256.136 629.304 cv
242.506 628.904 235.036 626.634 234.816 625.364 cv
234.886 624.944 235.746 624.414 237.346 623.884 cv
238.396 623.534 239.766 623.184 241.456 622.864 cv
244.996 622.174 249.926 621.604 256.136 621.424 cv
256.136 619.434 li
249.906 619.644 242.156 620.314 237.346 621.844 cv
236.396 622.144 235.556 622.484 234.866 622.864 cv
233.576 623.554 232.816 624.384 232.816 625.364 cv
232.816 629.484 246.346 630.974 256.136 631.294 cv
257.636 631.344 259.046 631.364 260.316 631.364 cv
269.826 631.364 287.816 630.114 287.816 625.364 cv
287.816 624.384 287.056 623.554 285.766 622.864 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 625.398 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 625.398 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 621.844 mo
282.236 622.194 280.866 622.544 279.176 622.864 cv
274.866 623.704 268.516 624.364 260.316 624.364 cv
258.866 624.364 257.476 624.344 256.136 624.304 cv
249.926 624.124 244.996 623.554 241.456 622.864 cv
239.766 622.544 238.396 622.194 237.346 621.844 cv
235.746 621.314 234.886 620.784 234.816 620.364 cv
235.036 619.094 242.506 616.824 256.136 616.424 cv
256.136 614.434 li
246.346 614.754 232.816 616.244 232.816 620.364 cv
232.816 621.344 233.576 622.174 234.866 622.864 cv
235.556 623.244 236.396 623.584 237.346 623.884 cv
242.156 625.414 249.906 626.084 256.136 626.294 cv
257.636 626.344 259.046 626.364 260.316 626.364 cv
266.826 626.364 277.316 625.774 283.286 623.884 cv
284.236 623.584 285.076 623.244 285.766 622.864 cv
285.076 622.484 284.236 622.144 283.286 621.844 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 620.398 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 620.398 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 653.711 mo
290.125 656.787 287.632 659.28 284.556 659.28 cv
281.076 659.28 li
278 659.28 275.506 656.787 275.506 653.711 cv
275.506 653.711 li
275.506 650.635 278 648.142 281.076 648.142 cv
284.556 648.142 li
287.632 648.142 290.125 650.635 290.125 653.711 cv
290.125 653.711 li
cp
0 0 0 rgb
f
281.076 649.186 mo
278.58 649.186 276.55 651.216 276.55 653.711 cv
276.55 656.206 278.58 658.235 281.076 658.235 cv
284.556 658.235 li
287.052 658.235 289.082 656.206 289.082 653.711 cv
289.082 651.216 287.052 649.186 284.556 649.186 cv
281.076 649.186 li
cp
284.556 660.324 mo
281.076 660.324 li
277.429 660.324 274.462 657.357 274.462 653.711 cv
274.462 650.064 277.429 647.097 281.076 647.097 cv
284.556 647.097 li
288.203 647.097 291.17 650.064 291.17 653.711 cv
291.17 657.357 288.203 660.324 284.556 660.324 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 653.711 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 653.711 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 651.211 mo
285.076 650.831 284.236 650.49 283.286 650.19 cv
282.236 650.541 280.866 650.891 279.176 651.211 cv
280.866 651.53 282.236 651.881 283.286 652.23 cv
284.886 652.761 285.746 653.291 285.816 653.711 cv
285.576 655.101 276.596 657.711 260.316 657.711 cv
258.866 657.711 257.476 657.69 256.136 657.65 cv
242.506 657.251 235.036 654.98 234.816 653.711 cv
234.886 653.291 235.746 652.761 237.346 652.23 cv
238.396 651.881 239.766 651.53 241.456 651.211 cv
244.996 650.521 249.926 649.951 256.136 649.771 cv
256.136 647.78 li
249.906 647.99 242.156 648.661 237.346 650.19 cv
236.396 650.49 235.556 650.831 234.866 651.211 cv
233.576 651.9 232.816 652.73 232.816 653.711 cv
232.816 657.831 246.346 659.32 256.136 659.641 cv
257.636 659.69 259.046 659.711 260.316 659.711 cv
269.826 659.711 287.816 658.461 287.816 653.711 cv
287.816 652.73 287.056 651.9 285.766 651.211 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 653.746 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 653.746 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 650.19 mo
282.236 650.541 280.866 650.891 279.176 651.211 cv
274.866 652.051 268.516 652.711 260.316 652.711 cv
258.866 652.711 257.476 652.69 256.136 652.65 cv
249.926 652.471 244.996 651.9 241.456 651.211 cv
239.766 650.891 238.396 650.541 237.346 650.19 cv
235.746 649.661 234.886 649.131 234.816 648.711 cv
235.036 647.44 242.506 645.171 256.136 644.771 cv
256.136 642.78 li
246.346 643.101 232.816 644.591 232.816 648.711 cv
232.816 649.69 233.576 650.521 234.866 651.211 cv
235.556 651.591 236.396 651.931 237.346 652.23 cv
242.156 653.761 249.906 654.431 256.136 654.641 cv
257.636 654.69 259.046 654.711 260.316 654.711 cv
266.826 654.711 277.316 654.121 283.286 652.23 cv
284.236 651.931 285.076 651.591 285.766 651.211 cv
285.076 650.831 284.236 650.49 283.286 650.19 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 648.746 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 648.746 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 650.19 mo
282.236 650.541 280.866 650.891 279.176 651.211 cv
274.866 652.051 268.516 652.711 260.316 652.711 cv
258.866 652.711 257.476 652.69 256.136 652.65 cv
249.926 652.471 244.996 651.9 241.456 651.211 cv
239.766 650.891 238.396 650.541 237.346 650.19 cv
235.746 649.661 234.886 649.131 234.816 648.711 cv
235.036 647.44 242.506 645.171 256.136 644.771 cv
256.136 642.78 li
246.346 643.101 232.816 644.591 232.816 648.711 cv
232.816 649.69 233.576 650.521 234.866 651.211 cv
235.556 651.591 236.396 651.931 237.346 652.23 cv
242.156 653.761 249.906 654.431 256.136 654.641 cv
257.636 654.69 259.046 654.711 260.316 654.711 cv
266.826 654.711 277.316 654.121 283.286 652.23 cv
284.236 651.931 285.076 651.591 285.766 651.211 cv
285.076 650.831 284.236 650.49 283.286 650.19 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 648.746 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 648.746 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 651.211 mo
285.076 650.831 284.236 650.49 283.286 650.19 cv
282.236 650.541 280.866 650.891 279.176 651.211 cv
280.866 651.53 282.236 651.881 283.286 652.23 cv
284.886 652.761 285.746 653.291 285.816 653.711 cv
285.576 655.101 276.596 657.711 260.316 657.711 cv
258.866 657.711 257.476 657.69 256.136 657.65 cv
242.506 657.251 235.036 654.98 234.816 653.711 cv
234.886 653.291 235.746 652.761 237.346 652.23 cv
238.396 651.881 239.766 651.53 241.456 651.211 cv
244.996 650.521 249.926 649.951 256.136 649.771 cv
256.136 647.78 li
249.906 647.99 242.156 648.661 237.346 650.19 cv
236.396 650.49 235.556 650.831 234.866 651.211 cv
233.576 651.9 232.816 652.73 232.816 653.711 cv
232.816 657.831 246.346 659.32 256.136 659.641 cv
257.636 659.69 259.046 659.711 260.316 659.711 cv
269.826 659.711 287.816 658.461 287.816 653.711 cv
287.816 652.73 287.056 651.9 285.766 651.211 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 653.746 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 653.746 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 650.19 mo
282.236 650.541 280.866 650.891 279.176 651.211 cv
274.866 652.051 268.516 652.711 260.316 652.711 cv
258.866 652.711 257.476 652.69 256.136 652.65 cv
249.926 652.471 244.996 651.9 241.456 651.211 cv
239.766 650.891 238.396 650.541 237.346 650.19 cv
235.746 649.661 234.886 649.131 234.816 648.711 cv
235.036 647.44 242.506 645.171 256.136 644.771 cv
256.136 642.78 li
246.346 643.101 232.816 644.591 232.816 648.711 cv
232.816 649.69 233.576 650.521 234.866 651.211 cv
235.556 651.591 236.396 651.931 237.346 652.23 cv
242.156 653.761 249.906 654.431 256.136 654.641 cv
257.636 654.69 259.046 654.711 260.316 654.711 cv
266.826 654.711 277.316 654.121 283.286 652.23 cv
284.236 651.931 285.076 651.591 285.766 651.211 cv
285.076 650.831 284.236 650.49 283.286 650.19 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 648.746 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 648.746 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 341.897 mo
290.125 344.974 287.632 347.467 284.556 347.467 cv
281.076 347.467 li
278 347.467 275.506 344.974 275.506 341.897 cv
275.506 341.897 li
275.506 338.821 278 336.328 281.076 336.328 cv
284.556 336.328 li
287.632 336.328 290.125 338.821 290.125 341.897 cv
290.125 341.897 li
cp
0 0 0 rgb
f
281.076 337.373 mo
278.58 337.373 276.55 339.402 276.55 341.897 cv
276.55 344.393 278.58 346.422 281.076 346.422 cv
284.556 346.422 li
287.052 346.422 289.082 344.393 289.082 341.897 cv
289.082 339.402 287.052 337.373 284.556 337.373 cv
281.076 337.373 li
cp
284.556 348.511 mo
281.076 348.511 li
277.429 348.511 274.462 345.544 274.462 341.897 cv
274.462 338.251 277.429 335.284 281.076 335.284 cv
284.556 335.284 li
288.203 335.284 291.17 338.251 291.17 341.897 cv
291.17 345.544 288.203 348.511 284.556 348.511 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 341.897 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 341.897 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 339.397 mo
285.076 339.018 284.236 338.677 283.286 338.377 cv
282.236 338.728 280.866 339.078 279.176 339.397 cv
280.866 339.717 282.236 340.067 283.286 340.417 cv
284.886 340.947 285.746 341.478 285.816 341.897 cv
285.576 343.288 276.596 345.897 260.316 345.897 cv
258.866 345.897 257.476 345.877 256.136 345.837 cv
242.506 345.438 235.036 343.167 234.816 341.897 cv
234.886 341.478 235.746 340.947 237.346 340.417 cv
238.396 340.067 239.766 339.717 241.456 339.397 cv
244.996 338.708 249.926 338.138 256.136 337.958 cv
256.136 335.967 li
249.906 336.177 242.156 336.848 237.346 338.377 cv
236.396 338.677 235.556 339.018 234.866 339.397 cv
233.576 340.087 232.816 340.917 232.816 341.897 cv
232.816 346.018 246.346 347.507 256.136 347.828 cv
257.636 347.877 259.046 347.897 260.316 347.897 cv
269.826 347.897 287.816 346.647 287.816 341.897 cv
287.816 340.917 287.056 340.087 285.766 339.397 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 341.933 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 341.933 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 338.377 mo
282.236 338.728 280.866 339.078 279.176 339.397 cv
274.866 340.237 268.516 340.897 260.316 340.897 cv
258.866 340.897 257.476 340.877 256.136 340.837 cv
249.926 340.657 244.996 340.087 241.456 339.397 cv
239.766 339.078 238.396 338.728 237.346 338.377 cv
235.746 337.848 234.886 337.317 234.816 336.897 cv
235.036 335.627 242.506 333.357 256.136 332.958 cv
256.136 330.967 li
246.346 331.288 232.816 332.777 232.816 336.897 cv
232.816 337.877 233.576 338.708 234.866 339.397 cv
235.556 339.777 236.396 340.118 237.346 340.417 cv
242.156 341.947 249.906 342.618 256.136 342.828 cv
257.636 342.877 259.046 342.897 260.316 342.897 cv
266.826 342.897 277.316 342.308 283.286 340.417 cv
284.236 340.118 285.076 339.777 285.766 339.397 cv
285.076 339.018 284.236 338.677 283.286 338.377 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 336.933 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 336.933 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 338.377 mo
282.236 338.728 280.866 339.078 279.176 339.397 cv
274.866 340.237 268.516 340.897 260.316 340.897 cv
258.866 340.897 257.476 340.877 256.136 340.837 cv
249.926 340.657 244.996 340.087 241.456 339.397 cv
239.766 339.078 238.396 338.728 237.346 338.377 cv
235.746 337.848 234.886 337.317 234.816 336.897 cv
235.036 335.627 242.506 333.357 256.136 332.958 cv
256.136 330.967 li
246.346 331.288 232.816 332.777 232.816 336.897 cv
232.816 337.877 233.576 338.708 234.866 339.397 cv
235.556 339.777 236.396 340.118 237.346 340.417 cv
242.156 341.947 249.906 342.618 256.136 342.828 cv
257.636 342.877 259.046 342.897 260.316 342.897 cv
266.826 342.897 277.316 342.308 283.286 340.417 cv
284.236 340.118 285.076 339.777 285.766 339.397 cv
285.076 339.018 284.236 338.677 283.286 338.377 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 336.933 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 336.933 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 339.397 mo
285.076 339.018 284.236 338.677 283.286 338.377 cv
282.236 338.728 280.866 339.078 279.176 339.397 cv
280.866 339.717 282.236 340.067 283.286 340.417 cv
284.886 340.947 285.746 341.478 285.816 341.897 cv
285.576 343.288 276.596 345.897 260.316 345.897 cv
258.866 345.897 257.476 345.877 256.136 345.837 cv
242.506 345.438 235.036 343.167 234.816 341.897 cv
234.886 341.478 235.746 340.947 237.346 340.417 cv
238.396 340.067 239.766 339.717 241.456 339.397 cv
244.996 338.708 249.926 338.138 256.136 337.958 cv
256.136 335.967 li
249.906 336.177 242.156 336.848 237.346 338.377 cv
236.396 338.677 235.556 339.018 234.866 339.397 cv
233.576 340.087 232.816 340.917 232.816 341.897 cv
232.816 346.018 246.346 347.507 256.136 347.828 cv
257.636 347.877 259.046 347.897 260.316 347.897 cv
269.826 347.897 287.816 346.647 287.816 341.897 cv
287.816 340.917 287.056 340.087 285.766 339.397 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 341.933 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 341.933 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 338.377 mo
282.236 338.728 280.866 339.078 279.176 339.397 cv
274.866 340.237 268.516 340.897 260.316 340.897 cv
258.866 340.897 257.476 340.877 256.136 340.837 cv
249.926 340.657 244.996 340.087 241.456 339.397 cv
239.766 339.078 238.396 338.728 237.346 338.377 cv
235.746 337.848 234.886 337.317 234.816 336.897 cv
235.036 335.627 242.506 333.357 256.136 332.958 cv
256.136 330.967 li
246.346 331.288 232.816 332.777 232.816 336.897 cv
232.816 337.877 233.576 338.708 234.866 339.397 cv
235.556 339.777 236.396 340.118 237.346 340.417 cv
242.156 341.947 249.906 342.618 256.136 342.828 cv
257.636 342.877 259.046 342.897 260.316 342.897 cv
266.826 342.897 277.316 342.308 283.286 340.417 cv
284.236 340.118 285.076 339.777 285.766 339.397 cv
285.076 339.018 284.236 338.677 283.286 338.377 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 336.933 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 336.933 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 313.551 mo
290.125 316.627 287.632 319.12 284.556 319.12 cv
281.076 319.12 li
278 319.12 275.506 316.627 275.506 313.551 cv
275.506 313.551 li
275.506 310.475 278 307.981 281.076 307.981 cv
284.556 307.981 li
287.632 307.981 290.125 310.475 290.125 313.551 cv
290.125 313.551 li
cp
0 0 0 rgb
f
281.076 309.026 mo
278.58 309.026 276.55 311.056 276.55 313.551 cv
276.55 316.046 278.58 318.076 281.076 318.076 cv
284.556 318.076 li
287.052 318.076 289.082 316.046 289.082 313.551 cv
289.082 311.056 287.052 309.026 284.556 309.026 cv
281.076 309.026 li
cp
284.556 320.165 mo
281.076 320.165 li
277.429 320.165 274.462 317.197 274.462 313.551 cv
274.462 309.904 277.429 306.937 281.076 306.937 cv
284.556 306.937 li
288.203 306.937 291.17 309.904 291.17 313.551 cv
291.17 317.197 288.203 320.165 284.556 320.165 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 313.551 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 313.551 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 311.051 mo
285.076 310.671 284.236 310.331 283.286 310.031 cv
282.236 310.381 280.866 310.731 279.176 311.051 cv
280.866 311.371 282.236 311.721 283.286 312.071 cv
284.886 312.601 285.746 313.131 285.816 313.551 cv
285.576 314.941 276.596 317.551 260.316 317.551 cv
258.866 317.551 257.476 317.531 256.136 317.491 cv
242.506 317.091 235.036 314.821 234.816 313.551 cv
234.886 313.131 235.746 312.601 237.346 312.071 cv
238.396 311.721 239.766 311.371 241.456 311.051 cv
244.996 310.361 249.926 309.791 256.136 309.611 cv
256.136 307.621 li
249.906 307.831 242.156 308.501 237.346 310.031 cv
236.396 310.331 235.556 310.671 234.866 311.051 cv
233.576 311.741 232.816 312.571 232.816 313.551 cv
232.816 317.671 246.346 319.161 256.136 319.481 cv
257.636 319.531 259.046 319.551 260.316 319.551 cv
269.826 319.551 287.816 318.301 287.816 313.551 cv
287.816 312.571 287.056 311.741 285.766 311.051 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 313.586 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 313.586 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 310.031 mo
282.236 310.381 280.866 310.731 279.176 311.051 cv
274.866 311.891 268.516 312.551 260.316 312.551 cv
258.866 312.551 257.476 312.531 256.136 312.491 cv
249.926 312.311 244.996 311.741 241.456 311.051 cv
239.766 310.731 238.396 310.381 237.346 310.031 cv
235.746 309.501 234.886 308.971 234.816 308.551 cv
235.036 307.281 242.506 305.011 256.136 304.611 cv
256.136 302.621 li
246.346 302.941 232.816 304.431 232.816 308.551 cv
232.816 309.531 233.576 310.361 234.866 311.051 cv
235.556 311.431 236.396 311.771 237.346 312.071 cv
242.156 313.601 249.906 314.271 256.136 314.481 cv
257.636 314.531 259.046 314.551 260.316 314.551 cv
266.826 314.551 277.316 313.961 283.286 312.071 cv
284.236 311.771 285.076 311.431 285.766 311.051 cv
285.076 310.671 284.236 310.331 283.286 310.031 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 308.586 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 308.586 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 310.031 mo
282.236 310.381 280.866 310.731 279.176 311.051 cv
274.866 311.891 268.516 312.551 260.316 312.551 cv
258.866 312.551 257.476 312.531 256.136 312.491 cv
249.926 312.311 244.996 311.741 241.456 311.051 cv
239.766 310.731 238.396 310.381 237.346 310.031 cv
235.746 309.501 234.886 308.971 234.816 308.551 cv
235.036 307.281 242.506 305.011 256.136 304.611 cv
256.136 302.621 li
246.346 302.941 232.816 304.431 232.816 308.551 cv
232.816 309.531 233.576 310.361 234.866 311.051 cv
235.556 311.431 236.396 311.771 237.346 312.071 cv
242.156 313.601 249.906 314.271 256.136 314.481 cv
257.636 314.531 259.046 314.551 260.316 314.551 cv
266.826 314.551 277.316 313.961 283.286 312.071 cv
284.236 311.771 285.076 311.431 285.766 311.051 cv
285.076 310.671 284.236 310.331 283.286 310.031 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 308.586 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 308.586 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 311.051 mo
285.076 310.671 284.236 310.331 283.286 310.031 cv
282.236 310.381 280.866 310.731 279.176 311.051 cv
280.866 311.371 282.236 311.721 283.286 312.071 cv
284.886 312.601 285.746 313.131 285.816 313.551 cv
285.576 314.941 276.596 317.551 260.316 317.551 cv
258.866 317.551 257.476 317.531 256.136 317.491 cv
242.506 317.091 235.036 314.821 234.816 313.551 cv
234.886 313.131 235.746 312.601 237.346 312.071 cv
238.396 311.721 239.766 311.371 241.456 311.051 cv
244.996 310.361 249.926 309.791 256.136 309.611 cv
256.136 307.621 li
249.906 307.831 242.156 308.501 237.346 310.031 cv
236.396 310.331 235.556 310.671 234.866 311.051 cv
233.576 311.741 232.816 312.571 232.816 313.551 cv
232.816 317.671 246.346 319.161 256.136 319.481 cv
257.636 319.531 259.046 319.551 260.316 319.551 cv
269.826 319.551 287.816 318.301 287.816 313.551 cv
287.816 312.571 287.056 311.741 285.766 311.051 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 313.586 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 313.586 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 310.031 mo
282.236 310.381 280.866 310.731 279.176 311.051 cv
274.866 311.891 268.516 312.551 260.316 312.551 cv
258.866 312.551 257.476 312.531 256.136 312.491 cv
249.926 312.311 244.996 311.741 241.456 311.051 cv
239.766 310.731 238.396 310.381 237.346 310.031 cv
235.746 309.501 234.886 308.971 234.816 308.551 cv
235.036 307.281 242.506 305.011 256.136 304.611 cv
256.136 302.621 li
246.346 302.941 232.816 304.431 232.816 308.551 cv
232.816 309.531 233.576 310.361 234.866 311.051 cv
235.556 311.431 236.396 311.771 237.346 312.071 cv
242.156 313.601 249.906 314.271 256.136 314.481 cv
257.636 314.531 259.046 314.551 260.316 314.551 cv
266.826 314.551 277.316 313.961 283.286 312.071 cv
284.236 311.771 285.076 311.431 285.766 311.051 cv
285.076 310.671 284.236 310.331 283.286 310.031 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 308.586 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 308.586 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 285.204 mo
290.125 288.28 287.632 290.773 284.556 290.773 cv
281.076 290.773 li
278 290.773 275.506 288.28 275.506 285.204 cv
275.506 285.204 li
275.506 282.128 278 279.635 281.076 279.635 cv
284.556 279.635 li
287.632 279.635 290.125 282.128 290.125 285.204 cv
290.125 285.204 li
cp
0 0 0 rgb
f
281.076 280.679 mo
278.58 280.679 276.55 282.709 276.55 285.204 cv
276.55 287.699 278.58 289.729 281.076 289.729 cv
284.556 289.729 li
287.052 289.729 289.082 287.699 289.082 285.204 cv
289.082 282.709 287.052 280.679 284.556 280.679 cv
281.076 280.679 li
cp
284.556 291.818 mo
281.076 291.818 li
277.429 291.818 274.462 288.851 274.462 285.204 cv
274.462 281.558 277.429 278.59 281.076 278.59 cv
284.556 278.59 li
288.203 278.59 291.17 281.558 291.17 285.204 cv
291.17 288.851 288.203 291.818 284.556 291.818 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 285.204 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 285.204 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 282.704 mo
285.076 282.324 284.236 281.984 283.286 281.684 cv
282.236 282.034 280.866 282.384 279.176 282.704 cv
280.866 283.024 282.236 283.374 283.286 283.724 cv
284.886 284.254 285.746 284.784 285.816 285.204 cv
285.576 286.594 276.596 289.204 260.316 289.204 cv
258.866 289.204 257.476 289.184 256.136 289.144 cv
242.506 288.744 235.036 286.474 234.816 285.204 cv
234.886 284.784 235.746 284.254 237.346 283.724 cv
238.396 283.374 239.766 283.024 241.456 282.704 cv
244.996 282.014 249.926 281.444 256.136 281.264 cv
256.136 279.274 li
249.906 279.484 242.156 280.154 237.346 281.684 cv
236.396 281.984 235.556 282.324 234.866 282.704 cv
233.576 283.394 232.816 284.224 232.816 285.204 cv
232.816 289.324 246.346 290.814 256.136 291.134 cv
257.636 291.184 259.046 291.204 260.316 291.204 cv
269.826 291.204 287.816 289.954 287.816 285.204 cv
287.816 284.224 287.056 283.394 285.766 282.704 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 285.239 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 285.239 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 281.684 mo
282.236 282.034 280.866 282.384 279.176 282.704 cv
274.866 283.544 268.516 284.204 260.316 284.204 cv
258.866 284.204 257.476 284.184 256.136 284.144 cv
249.926 283.964 244.996 283.394 241.456 282.704 cv
239.766 282.384 238.396 282.034 237.346 281.684 cv
235.746 281.154 234.886 280.624 234.816 280.204 cv
235.036 278.934 242.506 276.664 256.136 276.264 cv
256.136 274.274 li
246.346 274.594 232.816 276.084 232.816 280.204 cv
232.816 281.184 233.576 282.014 234.866 282.704 cv
235.556 283.084 236.396 283.424 237.346 283.724 cv
242.156 285.254 249.906 285.924 256.136 286.134 cv
257.636 286.184 259.046 286.204 260.316 286.204 cv
266.826 286.204 277.316 285.614 283.286 283.724 cv
284.236 283.424 285.076 283.084 285.766 282.704 cv
285.076 282.324 284.236 281.984 283.286 281.684 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 280.239 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 280.239 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 281.684 mo
282.236 282.034 280.866 282.384 279.176 282.704 cv
274.866 283.544 268.516 284.204 260.316 284.204 cv
258.866 284.204 257.476 284.184 256.136 284.144 cv
249.926 283.964 244.996 283.394 241.456 282.704 cv
239.766 282.384 238.396 282.034 237.346 281.684 cv
235.746 281.154 234.886 280.624 234.816 280.204 cv
235.036 278.934 242.506 276.664 256.136 276.264 cv
256.136 274.274 li
246.346 274.594 232.816 276.084 232.816 280.204 cv
232.816 281.184 233.576 282.014 234.866 282.704 cv
235.556 283.084 236.396 283.424 237.346 283.724 cv
242.156 285.254 249.906 285.924 256.136 286.134 cv
257.636 286.184 259.046 286.204 260.316 286.204 cv
266.826 286.204 277.316 285.614 283.286 283.724 cv
284.236 283.424 285.076 283.084 285.766 282.704 cv
285.076 282.324 284.236 281.984 283.286 281.684 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 280.239 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 280.239 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 282.704 mo
285.076 282.324 284.236 281.984 283.286 281.684 cv
282.236 282.034 280.866 282.384 279.176 282.704 cv
280.866 283.024 282.236 283.374 283.286 283.724 cv
284.886 284.254 285.746 284.784 285.816 285.204 cv
285.576 286.594 276.596 289.204 260.316 289.204 cv
258.866 289.204 257.476 289.184 256.136 289.144 cv
242.506 288.744 235.036 286.474 234.816 285.204 cv
234.886 284.784 235.746 284.254 237.346 283.724 cv
238.396 283.374 239.766 283.024 241.456 282.704 cv
244.996 282.014 249.926 281.444 256.136 281.264 cv
256.136 279.274 li
249.906 279.484 242.156 280.154 237.346 281.684 cv
236.396 281.984 235.556 282.324 234.866 282.704 cv
233.576 283.394 232.816 284.224 232.816 285.204 cv
232.816 289.324 246.346 290.814 256.136 291.134 cv
257.636 291.184 259.046 291.204 260.316 291.204 cv
269.826 291.204 287.816 289.954 287.816 285.204 cv
287.816 284.224 287.056 283.394 285.766 282.704 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 285.239 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 285.239 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 281.684 mo
282.236 282.034 280.866 282.384 279.176 282.704 cv
274.866 283.544 268.516 284.204 260.316 284.204 cv
258.866 284.204 257.476 284.184 256.136 284.144 cv
249.926 283.964 244.996 283.394 241.456 282.704 cv
239.766 282.384 238.396 282.034 237.346 281.684 cv
235.746 281.154 234.886 280.624 234.816 280.204 cv
235.036 278.934 242.506 276.664 256.136 276.264 cv
256.136 274.274 li
246.346 274.594 232.816 276.084 232.816 280.204 cv
232.816 281.184 233.576 282.014 234.866 282.704 cv
235.556 283.084 236.396 283.424 237.346 283.724 cv
242.156 285.254 249.906 285.924 256.136 286.134 cv
257.636 286.184 259.046 286.204 260.316 286.204 cv
266.826 286.204 277.316 285.614 283.286 283.724 cv
284.236 283.424 285.076 283.084 285.766 282.704 cv
285.076 282.324 284.236 281.984 283.286 281.684 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 280.239 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 280.239 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 256.857 mo
290.125 259.934 287.632 262.427 284.556 262.427 cv
281.076 262.427 li
278 262.427 275.506 259.934 275.506 256.857 cv
275.506 256.857 li
275.506 253.781 278 251.288 281.076 251.288 cv
284.556 251.288 li
287.632 251.288 290.125 253.781 290.125 256.857 cv
290.125 256.857 li
cp
0 0 0 rgb
f
281.076 252.333 mo
278.58 252.333 276.55 254.362 276.55 256.857 cv
276.55 259.353 278.58 261.382 281.076 261.382 cv
284.556 261.382 li
287.052 261.382 289.082 259.353 289.082 256.857 cv
289.082 254.362 287.052 252.333 284.556 252.333 cv
281.076 252.333 li
cp
284.556 263.471 mo
281.076 263.471 li
277.429 263.471 274.462 260.504 274.462 256.857 cv
274.462 253.211 277.429 250.244 281.076 250.244 cv
284.556 250.244 li
288.203 250.244 291.17 253.211 291.17 256.857 cv
291.17 260.504 288.203 263.471 284.556 263.471 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 256.857 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 256.857 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 254.357 mo
285.076 253.978 284.236 253.637 283.286 253.337 cv
282.236 253.688 280.866 254.038 279.176 254.357 cv
280.866 254.677 282.236 255.027 283.286 255.377 cv
284.886 255.907 285.746 256.438 285.816 256.857 cv
285.576 258.248 276.596 260.857 260.316 260.857 cv
258.866 260.857 257.476 260.837 256.136 260.797 cv
242.506 260.397 235.036 258.127 234.816 256.857 cv
234.886 256.438 235.746 255.907 237.346 255.377 cv
238.396 255.027 239.766 254.677 241.456 254.357 cv
244.996 253.667 249.926 253.098 256.136 252.917 cv
256.136 250.927 li
249.906 251.137 242.156 251.808 237.346 253.337 cv
236.396 253.637 235.556 253.978 234.866 254.357 cv
233.576 255.047 232.816 255.877 232.816 256.857 cv
232.816 260.978 246.346 262.467 256.136 262.788 cv
257.636 262.837 259.046 262.857 260.316 262.857 cv
269.826 262.857 287.816 261.607 287.816 256.857 cv
287.816 255.877 287.056 255.047 285.766 254.357 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 256.893 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 256.893 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 253.337 mo
282.236 253.688 280.866 254.038 279.176 254.357 cv
274.866 255.197 268.516 255.857 260.316 255.857 cv
258.866 255.857 257.476 255.837 256.136 255.797 cv
249.926 255.617 244.996 255.047 241.456 254.357 cv
239.766 254.038 238.396 253.688 237.346 253.337 cv
235.746 252.808 234.886 252.277 234.816 251.857 cv
235.036 250.587 242.506 248.317 256.136 247.917 cv
256.136 245.927 li
246.346 246.248 232.816 247.737 232.816 251.857 cv
232.816 252.837 233.576 253.667 234.866 254.357 cv
235.556 254.737 236.396 255.078 237.346 255.377 cv
242.156 256.907 249.906 257.578 256.136 257.788 cv
257.636 257.837 259.046 257.857 260.316 257.857 cv
266.826 257.857 277.316 257.268 283.286 255.377 cv
284.236 255.078 285.076 254.737 285.766 254.357 cv
285.076 253.978 284.236 253.637 283.286 253.337 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 251.893 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 251.893 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 253.337 mo
282.236 253.688 280.866 254.038 279.176 254.357 cv
274.866 255.197 268.516 255.857 260.316 255.857 cv
258.866 255.857 257.476 255.837 256.136 255.797 cv
249.926 255.617 244.996 255.047 241.456 254.357 cv
239.766 254.038 238.396 253.688 237.346 253.337 cv
235.746 252.808 234.886 252.277 234.816 251.857 cv
235.036 250.587 242.506 248.317 256.136 247.917 cv
256.136 245.927 li
246.346 246.248 232.816 247.737 232.816 251.857 cv
232.816 252.837 233.576 253.667 234.866 254.357 cv
235.556 254.737 236.396 255.078 237.346 255.377 cv
242.156 256.907 249.906 257.578 256.136 257.788 cv
257.636 257.837 259.046 257.857 260.316 257.857 cv
266.826 257.857 277.316 257.268 283.286 255.377 cv
284.236 255.078 285.076 254.737 285.766 254.357 cv
285.076 253.978 284.236 253.637 283.286 253.337 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 251.893 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 251.893 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 254.357 mo
285.076 253.978 284.236 253.637 283.286 253.337 cv
282.236 253.688 280.866 254.038 279.176 254.357 cv
280.866 254.677 282.236 255.027 283.286 255.377 cv
284.886 255.907 285.746 256.438 285.816 256.857 cv
285.576 258.248 276.596 260.857 260.316 260.857 cv
258.866 260.857 257.476 260.837 256.136 260.797 cv
242.506 260.397 235.036 258.127 234.816 256.857 cv
234.886 256.438 235.746 255.907 237.346 255.377 cv
238.396 255.027 239.766 254.677 241.456 254.357 cv
244.996 253.667 249.926 253.098 256.136 252.917 cv
256.136 250.927 li
249.906 251.137 242.156 251.808 237.346 253.337 cv
236.396 253.637 235.556 253.978 234.866 254.357 cv
233.576 255.047 232.816 255.877 232.816 256.857 cv
232.816 260.978 246.346 262.467 256.136 262.788 cv
257.636 262.837 259.046 262.857 260.316 262.857 cv
269.826 262.857 287.816 261.607 287.816 256.857 cv
287.816 255.877 287.056 255.047 285.766 254.357 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 256.893 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 256.893 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 253.337 mo
282.236 253.688 280.866 254.038 279.176 254.357 cv
274.866 255.197 268.516 255.857 260.316 255.857 cv
258.866 255.857 257.476 255.837 256.136 255.797 cv
249.926 255.617 244.996 255.047 241.456 254.357 cv
239.766 254.038 238.396 253.688 237.346 253.337 cv
235.746 252.808 234.886 252.277 234.816 251.857 cv
235.036 250.587 242.506 248.317 256.136 247.917 cv
256.136 245.927 li
246.346 246.248 232.816 247.737 232.816 251.857 cv
232.816 252.837 233.576 253.667 234.866 254.357 cv
235.556 254.737 236.396 255.078 237.346 255.377 cv
242.156 256.907 249.906 257.578 256.136 257.788 cv
257.636 257.837 259.046 257.857 260.316 257.857 cv
266.826 257.857 277.316 257.268 283.286 255.377 cv
284.236 255.078 285.076 254.737 285.766 254.357 cv
285.076 253.978 284.236 253.637 283.286 253.337 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 251.893 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 251.893 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 228.511 mo
290.125 231.587 287.632 234.08 284.556 234.08 cv
281.076 234.08 li
278 234.08 275.506 231.587 275.506 228.511 cv
275.506 228.511 li
275.506 225.435 278 222.941 281.076 222.941 cv
284.556 222.941 li
287.632 222.941 290.125 225.435 290.125 228.511 cv
290.125 228.511 li
cp
0 0 0 rgb
f
281.076 223.986 mo
278.58 223.986 276.55 226.016 276.55 228.511 cv
276.55 231.006 278.58 233.036 281.076 233.036 cv
284.556 233.036 li
287.052 233.036 289.082 231.006 289.082 228.511 cv
289.082 226.016 287.052 223.986 284.556 223.986 cv
281.076 223.986 li
cp
284.556 235.125 mo
281.076 235.125 li
277.429 235.125 274.462 232.157 274.462 228.511 cv
274.462 224.864 277.429 221.897 281.076 221.897 cv
284.556 221.897 li
288.203 221.897 291.17 224.864 291.17 228.511 cv
291.17 232.157 288.203 235.125 284.556 235.125 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 228.511 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 228.511 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 226.011 mo
285.076 225.631 284.236 225.291 283.286 224.991 cv
282.236 225.341 280.866 225.691 279.176 226.011 cv
280.866 226.331 282.236 226.681 283.286 227.031 cv
284.886 227.561 285.746 228.091 285.816 228.511 cv
285.576 229.901 276.596 232.511 260.316 232.511 cv
258.866 232.511 257.476 232.491 256.136 232.451 cv
242.506 232.051 235.036 229.781 234.816 228.511 cv
234.886 228.091 235.746 227.561 237.346 227.031 cv
238.396 226.681 239.766 226.331 241.456 226.011 cv
244.996 225.321 249.926 224.751 256.136 224.571 cv
256.136 222.581 li
249.906 222.791 242.156 223.461 237.346 224.991 cv
236.396 225.291 235.556 225.631 234.866 226.011 cv
233.576 226.701 232.816 227.531 232.816 228.511 cv
232.816 232.631 246.346 234.121 256.136 234.441 cv
257.636 234.491 259.046 234.511 260.316 234.511 cv
269.826 234.511 287.816 233.261 287.816 228.511 cv
287.816 227.531 287.056 226.701 285.766 226.011 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 228.546 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 228.546 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 224.991 mo
282.236 225.341 280.866 225.691 279.176 226.011 cv
274.866 226.851 268.516 227.511 260.316 227.511 cv
258.866 227.511 257.476 227.491 256.136 227.451 cv
249.926 227.271 244.996 226.701 241.456 226.011 cv
239.766 225.691 238.396 225.341 237.346 224.991 cv
235.746 224.461 234.886 223.931 234.816 223.511 cv
235.036 222.241 242.506 219.971 256.136 219.571 cv
256.136 217.581 li
246.346 217.901 232.816 219.391 232.816 223.511 cv
232.816 224.491 233.576 225.321 234.866 226.011 cv
235.556 226.391 236.396 226.731 237.346 227.031 cv
242.156 228.561 249.906 229.231 256.136 229.441 cv
257.636 229.491 259.046 229.511 260.316 229.511 cv
266.826 229.511 277.316 228.921 283.286 227.031 cv
284.236 226.731 285.076 226.391 285.766 226.011 cv
285.076 225.631 284.236 225.291 283.286 224.991 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 223.546 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 223.546 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 224.991 mo
282.236 225.341 280.866 225.691 279.176 226.011 cv
274.866 226.851 268.516 227.511 260.316 227.511 cv
258.866 227.511 257.476 227.491 256.136 227.451 cv
249.926 227.271 244.996 226.701 241.456 226.011 cv
239.766 225.691 238.396 225.341 237.346 224.991 cv
235.746 224.461 234.886 223.931 234.816 223.511 cv
235.036 222.241 242.506 219.971 256.136 219.571 cv
256.136 217.581 li
246.346 217.901 232.816 219.391 232.816 223.511 cv
232.816 224.491 233.576 225.321 234.866 226.011 cv
235.556 226.391 236.396 226.731 237.346 227.031 cv
242.156 228.561 249.906 229.231 256.136 229.441 cv
257.636 229.491 259.046 229.511 260.316 229.511 cv
266.826 229.511 277.316 228.921 283.286 227.031 cv
284.236 226.731 285.076 226.391 285.766 226.011 cv
285.076 225.631 284.236 225.291 283.286 224.991 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 223.546 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 223.546 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 226.011 mo
285.076 225.631 284.236 225.291 283.286 224.991 cv
282.236 225.341 280.866 225.691 279.176 226.011 cv
280.866 226.331 282.236 226.681 283.286 227.031 cv
284.886 227.561 285.746 228.091 285.816 228.511 cv
285.576 229.901 276.596 232.511 260.316 232.511 cv
258.866 232.511 257.476 232.491 256.136 232.451 cv
242.506 232.051 235.036 229.781 234.816 228.511 cv
234.886 228.091 235.746 227.561 237.346 227.031 cv
238.396 226.681 239.766 226.331 241.456 226.011 cv
244.996 225.321 249.926 224.751 256.136 224.571 cv
256.136 222.581 li
249.906 222.791 242.156 223.461 237.346 224.991 cv
236.396 225.291 235.556 225.631 234.866 226.011 cv
233.576 226.701 232.816 227.531 232.816 228.511 cv
232.816 232.631 246.346 234.121 256.136 234.441 cv
257.636 234.491 259.046 234.511 260.316 234.511 cv
269.826 234.511 287.816 233.261 287.816 228.511 cv
287.816 227.531 287.056 226.701 285.766 226.011 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 228.546 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 228.546 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 224.991 mo
282.236 225.341 280.866 225.691 279.176 226.011 cv
274.866 226.851 268.516 227.511 260.316 227.511 cv
258.866 227.511 257.476 227.491 256.136 227.451 cv
249.926 227.271 244.996 226.701 241.456 226.011 cv
239.766 225.691 238.396 225.341 237.346 224.991 cv
235.746 224.461 234.886 223.931 234.816 223.511 cv
235.036 222.241 242.506 219.971 256.136 219.571 cv
256.136 217.581 li
246.346 217.901 232.816 219.391 232.816 223.511 cv
232.816 224.491 233.576 225.321 234.866 226.011 cv
235.556 226.391 236.396 226.731 237.346 227.031 cv
242.156 228.561 249.906 229.231 256.136 229.441 cv
257.636 229.491 259.046 229.511 260.316 229.511 cv
266.826 229.511 277.316 228.921 283.286 227.031 cv
284.236 226.731 285.076 226.391 285.766 226.011 cv
285.076 225.631 284.236 225.291 283.286 224.991 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 223.546 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 223.546 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 200.164 mo
290.125 203.24 287.632 205.733 284.556 205.733 cv
281.076 205.733 li
278 205.733 275.506 203.24 275.506 200.164 cv
275.506 200.164 li
275.506 197.088 278 194.595 281.076 194.595 cv
284.556 194.595 li
287.632 194.595 290.125 197.088 290.125 200.164 cv
290.125 200.164 li
cp
0 0 0 rgb
f
281.076 195.639 mo
278.58 195.639 276.55 197.669 276.55 200.164 cv
276.55 202.659 278.58 204.689 281.076 204.689 cv
284.556 204.689 li
287.052 204.689 289.082 202.659 289.082 200.164 cv
289.082 197.669 287.052 195.639 284.556 195.639 cv
281.076 195.639 li
cp
284.556 206.778 mo
281.076 206.778 li
277.429 206.778 274.462 203.811 274.462 200.164 cv
274.462 196.518 277.429 193.55 281.076 193.55 cv
284.556 193.55 li
288.203 193.55 291.17 196.518 291.17 200.164 cv
291.17 203.811 288.203 206.778 284.556 206.778 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 200.164 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 200.164 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 197.664 mo
285.076 197.284 284.236 196.944 283.286 196.644 cv
282.236 196.994 280.866 197.344 279.176 197.664 cv
280.866 197.984 282.236 198.334 283.286 198.684 cv
284.886 199.214 285.746 199.744 285.816 200.164 cv
285.576 201.554 276.596 204.164 260.316 204.164 cv
258.866 204.164 257.476 204.144 256.136 204.104 cv
242.506 203.704 235.036 201.434 234.816 200.164 cv
234.886 199.744 235.746 199.214 237.346 198.684 cv
238.396 198.334 239.766 197.984 241.456 197.664 cv
244.996 196.974 249.926 196.404 256.136 196.224 cv
256.136 194.234 li
249.906 194.444 242.156 195.114 237.346 196.644 cv
236.396 196.944 235.556 197.284 234.866 197.664 cv
233.576 198.354 232.816 199.184 232.816 200.164 cv
232.816 204.284 246.346 205.774 256.136 206.094 cv
257.636 206.144 259.046 206.164 260.316 206.164 cv
269.826 206.164 287.816 204.914 287.816 200.164 cv
287.816 199.184 287.056 198.354 285.766 197.664 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 200.199 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 200.199 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 196.644 mo
282.236 196.994 280.866 197.344 279.176 197.664 cv
274.866 198.504 268.516 199.164 260.316 199.164 cv
258.866 199.164 257.476 199.144 256.136 199.104 cv
249.926 198.924 244.996 198.354 241.456 197.664 cv
239.766 197.344 238.396 196.994 237.346 196.644 cv
235.746 196.114 234.886 195.584 234.816 195.164 cv
235.036 193.894 242.506 191.624 256.136 191.224 cv
256.136 189.234 li
246.346 189.554 232.816 191.044 232.816 195.164 cv
232.816 196.144 233.576 196.974 234.866 197.664 cv
235.556 198.044 236.396 198.384 237.346 198.684 cv
242.156 200.214 249.906 200.884 256.136 201.094 cv
257.636 201.144 259.046 201.164 260.316 201.164 cv
266.826 201.164 277.316 200.574 283.286 198.684 cv
284.236 198.384 285.076 198.044 285.766 197.664 cv
285.076 197.284 284.236 196.944 283.286 196.644 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 195.199 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 195.199 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 196.644 mo
282.236 196.994 280.866 197.344 279.176 197.664 cv
274.866 198.504 268.516 199.164 260.316 199.164 cv
258.866 199.164 257.476 199.144 256.136 199.104 cv
249.926 198.924 244.996 198.354 241.456 197.664 cv
239.766 197.344 238.396 196.994 237.346 196.644 cv
235.746 196.114 234.886 195.584 234.816 195.164 cv
235.036 193.894 242.506 191.624 256.136 191.224 cv
256.136 189.234 li
246.346 189.554 232.816 191.044 232.816 195.164 cv
232.816 196.144 233.576 196.974 234.866 197.664 cv
235.556 198.044 236.396 198.384 237.346 198.684 cv
242.156 200.214 249.906 200.884 256.136 201.094 cv
257.636 201.144 259.046 201.164 260.316 201.164 cv
266.826 201.164 277.316 200.574 283.286 198.684 cv
284.236 198.384 285.076 198.044 285.766 197.664 cv
285.076 197.284 284.236 196.944 283.286 196.644 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 195.199 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 195.199 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 197.664 mo
285.076 197.284 284.236 196.944 283.286 196.644 cv
282.236 196.994 280.866 197.344 279.176 197.664 cv
280.866 197.984 282.236 198.334 283.286 198.684 cv
284.886 199.214 285.746 199.744 285.816 200.164 cv
285.576 201.554 276.596 204.164 260.316 204.164 cv
258.866 204.164 257.476 204.144 256.136 204.104 cv
242.506 203.704 235.036 201.434 234.816 200.164 cv
234.886 199.744 235.746 199.214 237.346 198.684 cv
238.396 198.334 239.766 197.984 241.456 197.664 cv
244.996 196.974 249.926 196.404 256.136 196.224 cv
256.136 194.234 li
249.906 194.444 242.156 195.114 237.346 196.644 cv
236.396 196.944 235.556 197.284 234.866 197.664 cv
233.576 198.354 232.816 199.184 232.816 200.164 cv
232.816 204.284 246.346 205.774 256.136 206.094 cv
257.636 206.144 259.046 206.164 260.316 206.164 cv
269.826 206.164 287.816 204.914 287.816 200.164 cv
287.816 199.184 287.056 198.354 285.766 197.664 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 200.199 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 200.199 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 196.644 mo
282.236 196.994 280.866 197.344 279.176 197.664 cv
274.866 198.504 268.516 199.164 260.316 199.164 cv
258.866 199.164 257.476 199.144 256.136 199.104 cv
249.926 198.924 244.996 198.354 241.456 197.664 cv
239.766 197.344 238.396 196.994 237.346 196.644 cv
235.746 196.114 234.886 195.584 234.816 195.164 cv
235.036 193.894 242.506 191.624 256.136 191.224 cv
256.136 189.234 li
246.346 189.554 232.816 191.044 232.816 195.164 cv
232.816 196.144 233.576 196.974 234.866 197.664 cv
235.556 198.044 236.396 198.384 237.346 198.684 cv
242.156 200.214 249.906 200.884 256.136 201.094 cv
257.636 201.144 259.046 201.164 260.316 201.164 cv
266.826 201.164 277.316 200.574 283.286 198.684 cv
284.236 198.384 285.076 198.044 285.766 197.664 cv
285.076 197.284 284.236 196.944 283.286 196.644 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 195.199 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 195.199 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 171.817 mo
290.125 174.894 287.632 177.387 284.556 177.387 cv
281.076 177.387 li
278 177.387 275.506 174.894 275.506 171.817 cv
275.506 171.817 li
275.506 168.741 278 166.248 281.076 166.248 cv
284.556 166.248 li
287.632 166.248 290.125 168.741 290.125 171.817 cv
290.125 171.817 li
cp
0 0 0 rgb
f
281.076 167.292 mo
278.58 167.292 276.55 169.322 276.55 171.817 cv
276.55 174.313 278.58 176.342 281.076 176.342 cv
284.556 176.342 li
287.052 176.342 289.082 174.313 289.082 171.817 cv
289.082 169.322 287.052 167.292 284.556 167.292 cv
281.076 167.292 li
cp
284.556 178.431 mo
281.076 178.431 li
277.429 178.431 274.462 175.464 274.462 171.817 cv
274.462 168.171 277.429 165.204 281.076 165.204 cv
284.556 165.204 li
288.203 165.204 291.17 168.171 291.17 171.817 cv
291.17 175.464 288.203 178.431 284.556 178.431 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 171.817 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 171.817 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 169.317 mo
285.076 168.938 284.236 168.597 283.286 168.297 cv
282.236 168.647 280.866 168.998 279.176 169.317 cv
280.866 169.637 282.236 169.987 283.286 170.337 cv
284.886 170.867 285.746 171.397 285.816 171.817 cv
285.576 173.208 276.596 175.817 260.316 175.817 cv
258.866 175.817 257.476 175.797 256.136 175.757 cv
242.506 175.357 235.036 173.087 234.816 171.817 cv
234.886 171.397 235.746 170.867 237.346 170.337 cv
238.396 169.987 239.766 169.637 241.456 169.317 cv
244.996 168.627 249.926 168.058 256.136 167.877 cv
256.136 165.887 li
249.906 166.097 242.156 166.768 237.346 168.297 cv
236.396 168.597 235.556 168.938 234.866 169.317 cv
233.576 170.007 232.816 170.837 232.816 171.817 cv
232.816 175.938 246.346 177.427 256.136 177.748 cv
257.636 177.797 259.046 177.817 260.316 177.817 cv
269.826 177.817 287.816 176.567 287.816 171.817 cv
287.816 170.837 287.056 170.007 285.766 169.317 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 171.853 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 171.853 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 168.297 mo
282.236 168.647 280.866 168.998 279.176 169.317 cv
274.866 170.157 268.516 170.817 260.316 170.817 cv
258.866 170.817 257.476 170.797 256.136 170.757 cv
249.926 170.577 244.996 170.007 241.456 169.317 cv
239.766 168.998 238.396 168.647 237.346 168.297 cv
235.746 167.768 234.886 167.237 234.816 166.817 cv
235.036 165.547 242.506 163.277 256.136 162.877 cv
256.136 160.887 li
246.346 161.208 232.816 162.697 232.816 166.817 cv
232.816 167.797 233.576 168.627 234.866 169.317 cv
235.556 169.697 236.396 170.038 237.346 170.337 cv
242.156 171.867 249.906 172.538 256.136 172.748 cv
257.636 172.797 259.046 172.817 260.316 172.817 cv
266.826 172.817 277.316 172.228 283.286 170.337 cv
284.236 170.038 285.076 169.697 285.766 169.317 cv
285.076 168.938 284.236 168.597 283.286 168.297 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 166.853 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 166.853 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 168.297 mo
282.236 168.647 280.866 168.998 279.176 169.317 cv
274.866 170.157 268.516 170.817 260.316 170.817 cv
258.866 170.817 257.476 170.797 256.136 170.757 cv
249.926 170.577 244.996 170.007 241.456 169.317 cv
239.766 168.998 238.396 168.647 237.346 168.297 cv
235.746 167.768 234.886 167.237 234.816 166.817 cv
235.036 165.547 242.506 163.277 256.136 162.877 cv
256.136 160.887 li
246.346 161.208 232.816 162.697 232.816 166.817 cv
232.816 167.797 233.576 168.627 234.866 169.317 cv
235.556 169.697 236.396 170.038 237.346 170.337 cv
242.156 171.867 249.906 172.538 256.136 172.748 cv
257.636 172.797 259.046 172.817 260.316 172.817 cv
266.826 172.817 277.316 172.228 283.286 170.337 cv
284.236 170.038 285.076 169.697 285.766 169.317 cv
285.076 168.938 284.236 168.597 283.286 168.297 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 166.853 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 166.853 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 169.317 mo
285.076 168.938 284.236 168.597 283.286 168.297 cv
282.236 168.647 280.866 168.998 279.176 169.317 cv
280.866 169.637 282.236 169.987 283.286 170.337 cv
284.886 170.867 285.746 171.397 285.816 171.817 cv
285.576 173.208 276.596 175.817 260.316 175.817 cv
258.866 175.817 257.476 175.797 256.136 175.757 cv
242.506 175.357 235.036 173.087 234.816 171.817 cv
234.886 171.397 235.746 170.867 237.346 170.337 cv
238.396 169.987 239.766 169.637 241.456 169.317 cv
244.996 168.627 249.926 168.058 256.136 167.877 cv
256.136 165.887 li
249.906 166.097 242.156 166.768 237.346 168.297 cv
236.396 168.597 235.556 168.938 234.866 169.317 cv
233.576 170.007 232.816 170.837 232.816 171.817 cv
232.816 175.938 246.346 177.427 256.136 177.748 cv
257.636 177.797 259.046 177.817 260.316 177.817 cv
269.826 177.817 287.816 176.567 287.816 171.817 cv
287.816 170.837 287.056 170.007 285.766 169.317 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 171.853 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 171.853 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 168.297 mo
282.236 168.647 280.866 168.998 279.176 169.317 cv
274.866 170.157 268.516 170.817 260.316 170.817 cv
258.866 170.817 257.476 170.797 256.136 170.757 cv
249.926 170.577 244.996 170.007 241.456 169.317 cv
239.766 168.998 238.396 168.647 237.346 168.297 cv
235.746 167.768 234.886 167.237 234.816 166.817 cv
235.036 165.547 242.506 163.277 256.136 162.877 cv
256.136 160.887 li
246.346 161.208 232.816 162.697 232.816 166.817 cv
232.816 167.797 233.576 168.627 234.866 169.317 cv
235.556 169.697 236.396 170.038 237.346 170.337 cv
242.156 171.867 249.906 172.538 256.136 172.748 cv
257.636 172.797 259.046 172.817 260.316 172.817 cv
266.826 172.817 277.316 172.228 283.286 170.337 cv
284.236 170.038 285.076 169.697 285.766 169.317 cv
285.076 168.938 284.236 168.597 283.286 168.297 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 166.853 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 166.853 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
290.125 143.471 mo
290.125 146.547 287.632 149.04 284.556 149.04 cv
281.076 149.04 li
278 149.04 275.506 146.547 275.506 143.471 cv
275.506 143.471 li
275.506 140.395 278 137.901 281.076 137.901 cv
284.556 137.901 li
287.632 137.901 290.125 140.395 290.125 143.471 cv
290.125 143.471 li
cp
0 0 0 rgb
f
281.076 138.946 mo
278.58 138.946 276.55 140.976 276.55 143.471 cv
276.55 145.966 278.58 147.996 281.076 147.996 cv
284.556 147.996 li
287.052 147.996 289.082 145.966 289.082 143.471 cv
289.082 140.976 287.052 138.946 284.556 138.946 cv
281.076 138.946 li
cp
284.556 150.084 mo
281.076 150.084 li
277.429 150.084 274.462 147.117 274.462 143.471 cv
274.462 139.824 277.429 136.857 281.076 136.857 cv
284.556 136.857 li
288.203 136.857 291.17 139.824 291.17 143.471 cv
291.17 147.117 288.203 150.084 284.556 150.084 cv
cp
level3{
gsave
clp
[16.708 0 0 16.708 274.462 143.471 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[16.708 0 0 16.708 274.462 143.471 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 140.971 mo
285.076 140.591 284.236 140.25 283.286 139.951 cv
282.236 140.301 280.866 140.651 279.176 140.971 cv
280.866 141.291 282.236 141.641 283.286 141.991 cv
284.886 142.521 285.746 143.051 285.816 143.471 cv
285.576 144.861 276.596 147.471 260.316 147.471 cv
258.866 147.471 257.476 147.451 256.136 147.411 cv
242.506 147.011 235.036 144.741 234.816 143.471 cv
234.886 143.051 235.746 142.521 237.346 141.991 cv
238.396 141.641 239.766 141.291 241.456 140.971 cv
244.996 140.281 249.926 139.711 256.136 139.531 cv
256.136 137.541 li
249.906 137.75 242.156 138.421 237.346 139.951 cv
236.396 140.25 235.556 140.591 234.866 140.971 cv
233.576 141.661 232.816 142.491 232.816 143.471 cv
232.816 147.591 246.346 149.081 256.136 149.401 cv
257.636 149.451 259.046 149.471 260.316 149.471 cv
269.826 149.471 287.816 148.221 287.816 143.471 cv
287.816 142.491 287.056 141.661 285.766 140.971 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 143.506 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 143.506 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 139.951 mo
282.236 140.301 280.866 140.651 279.176 140.971 cv
274.866 141.811 268.516 142.471 260.316 142.471 cv
258.866 142.471 257.476 142.451 256.136 142.411 cv
249.926 142.23 244.996 141.661 241.456 140.971 cv
239.766 140.651 238.396 140.301 237.346 139.951 cv
235.746 139.421 234.886 138.891 234.816 138.471 cv
235.036 137.201 242.506 134.931 256.136 134.531 cv
256.136 132.541 li
246.346 132.861 232.816 134.351 232.816 138.471 cv
232.816 139.451 233.576 140.281 234.866 140.971 cv
235.556 141.351 236.396 141.691 237.346 141.991 cv
242.156 143.521 249.906 144.191 256.136 144.401 cv
257.636 144.451 259.046 144.471 260.316 144.471 cv
266.826 144.471 277.316 143.881 283.286 141.991 cv
284.236 141.691 285.076 141.351 285.766 140.971 cv
285.076 140.591 284.236 140.25 283.286 139.951 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 138.506 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 138.506 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
283.286 139.951 mo
282.236 140.301 280.866 140.651 279.176 140.971 cv
274.866 141.811 268.516 142.471 260.316 142.471 cv
258.866 142.471 257.476 142.451 256.136 142.411 cv
249.926 142.23 244.996 141.661 241.456 140.971 cv
239.766 140.651 238.396 140.301 237.346 139.951 cv
235.746 139.421 234.886 138.891 234.816 138.471 cv
235.036 137.201 242.506 134.931 256.136 134.531 cv
256.136 132.541 li
246.346 132.861 232.816 134.351 232.816 138.471 cv
232.816 139.451 233.576 140.281 234.866 140.971 cv
235.556 141.351 236.396 141.691 237.346 141.991 cv
242.156 143.521 249.906 144.191 256.136 144.401 cv
257.636 144.451 259.046 144.471 260.316 144.471 cv
266.826 144.471 277.316 143.881 283.286 141.991 cv
284.236 141.691 285.076 141.351 285.766 140.971 cv
285.076 140.591 284.236 140.25 283.286 139.951 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 138.506 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 138.506 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
285.766 140.971 mo
285.076 140.591 284.236 140.25 283.286 139.951 cv
282.236 140.301 280.866 140.651 279.176 140.971 cv
280.866 141.291 282.236 141.641 283.286 141.991 cv
284.886 142.521 285.746 143.051 285.816 143.471 cv
285.576 144.861 276.596 147.471 260.316 147.471 cv
258.866 147.471 257.476 147.451 256.136 147.411 cv
242.506 147.011 235.036 144.741 234.816 143.471 cv
234.886 143.051 235.746 142.521 237.346 141.991 cv
238.396 141.641 239.766 141.291 241.456 140.971 cv
244.996 140.281 249.926 139.711 256.136 139.531 cv
256.136 137.541 li
249.906 137.75 242.156 138.421 237.346 139.951 cv
236.396 140.25 235.556 140.591 234.866 140.971 cv
233.576 141.661 232.816 142.491 232.816 143.471 cv
232.816 147.591 246.346 149.081 256.136 149.401 cv
257.636 149.451 259.046 149.471 260.316 149.471 cv
269.826 149.471 287.816 148.221 287.816 143.471 cv
287.816 142.491 287.056 141.661 285.766 140.971 cv
cp
level3{
gsave
clp
[55 0 0 55 232.816 143.506 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[55 0 0 55 232.816 143.506 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
283.286 139.951 mo
282.236 140.301 280.866 140.651 279.176 140.971 cv
274.866 141.811 268.516 142.471 260.316 142.471 cv
258.866 142.471 257.476 142.451 256.136 142.411 cv
249.926 142.23 244.996 141.661 241.456 140.971 cv
239.766 140.651 238.396 140.301 237.346 139.951 cv
235.746 139.421 234.886 138.891 234.816 138.471 cv
235.036 137.201 242.506 134.931 256.136 134.531 cv
256.136 132.541 li
246.346 132.861 232.816 134.351 232.816 138.471 cv
232.816 139.451 233.576 140.281 234.866 140.971 cv
235.556 141.351 236.396 141.691 237.346 141.991 cv
242.156 143.521 249.906 144.191 256.136 144.401 cv
257.636 144.451 259.046 144.471 260.316 144.471 cv
266.826 144.471 277.316 143.881 283.286 141.991 cv
284.236 141.691 285.076 141.351 285.766 140.971 cv
285.076 140.591 284.236 140.25 283.286 139.951 cv
cp
level3{
gsave
clp
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 138.506 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-52.9502 -2.37728e-9 -2.37728e-9 52.9502 285.766 138.506 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
42.5947 15.6606 mo
42.4365 15.9326 li
41.9536 16.7671 41.5425 17.5654 41.2007 18.3271 cv
40.377 20.105 39.9126 21.0967 39.8066 21.3022 cv
39.7183 21.4292 li
39.2949 21.248 li
39.3652 21.0845 li
39.7065 20.2861 40.2007 19.2461 40.8477 17.9644 cv
42.0483 15.5698 li
42.1362 15.4248 li
42.5947 15.6606 li
cp
37.4419 19.2705 mo
36.1475 17.8555 34.7588 17.1484 33.2764 17.1484 cv
32.3823 17.1484 31.6411 17.4141 31.0527 17.9463 cv
30.4644 18.4785 30.1699 19.1558 30.1699 19.9785 cv
30.1699 20.873 30.7642 21.792 31.9526 22.7354 cv
32.0938 22.8257 li
32.0054 22.9712 li
30.4526 22.2578 29.6758 21.2236 29.6758 19.8696 cv
29.6758 18.9258 30.0054 18.1582 30.6646 17.5654 cv
31.3232 16.9727 32.1821 16.6768 33.2412 16.6768 cv
34.2529 16.6768 35.1382 16.8975 35.8975 17.3384 cv
36.6563 17.7803 37.2124 18.3999 37.5654 19.1982 cv
37.4419 19.2705 li
cp
28.9351 31.6963 mo
29.3701 33.873 30.5347 35.4155 32.4292 36.3223 cv
32.4292 36.4673 li
30.2407 35.8145 28.9175 34.2544 28.4585 31.7871 cv
28.9351 31.6963 li
cp
26.7285 25.8193 mo
27.3286 26.1641 li
27.7168 26.8774 28.8521 27.4697 30.7349 27.9414 cv
33.5762 28.6675 li
35.5059 29.1631 36.7915 29.5894 37.4326 29.9463 cv
38.0742 30.3027 38.5303 30.8442 38.8003 31.5693 cv
38.6768 31.6421 li
38.1475 31.0132 37.5737 30.5537 36.9561 30.2637 cv
36.3389 29.9731 35.1528 29.6167 33.4004 29.1934 cv
30.8584 28.5884 29.1523 28.0654 28.2817 27.624 cv
27.4111 27.1826 26.8931 26.5811 26.7285 25.8193 cv
cp
41.501 26.4722 mo
43.1011 27.7178 43.9014 29.4233 43.9014 31.5874 cv
43.9014 33.8975 43.0308 35.8535 41.2891 37.4561 cv
39.5474 39.0581 37.4297 39.8599 34.9355 39.8599 cv
33.6646 39.8599 32.5176 39.7266 31.4937 39.4604 cv
28.6699 38.7529 li
28.0107 38.584 27.3052 38.499 26.5522 38.499 cv
25.8813 38.499 25.2637 38.6382 24.6987 38.916 cv
24.4868 38.3906 li
25.0991 38.1001 25.7227 37.9551 26.3579 37.9551 cv
27.064 37.9551 27.8696 38.064 28.7759 38.2817 cv
31.4937 38.9526 li
32.5767 39.2183 33.7173 39.3516 34.918 39.3516 cv
37.2705 39.3516 39.2739 38.5806 40.9272 37.0391 cv
42.5801 35.4966 43.4067 33.6313 43.4067 31.4429 cv
43.4067 29.5923 42.7715 27.9717 41.501 26.5811 cv
41.501 26.4722 li
cp
41.501 14.8989 mo
40.8892 15.7456 40.4009 16.6284 40.0361 17.5474 cv
39.3184 19.3613 38.8418 20.4736 38.6064 20.8848 cv
38.5181 20.9937 li
38.4712 20.8608 38.436 20.7578 38.4121 20.6855 cv
38.0825 19.5972 37.8125 18.8413 37.6006 18.418 cv
37.3887 17.9946 37.0708 17.5894 36.6475 17.2026 cv
35.5767 16.2231 34.3589 15.7329 32.9941 15.7329 cv
31.7354 15.7329 30.6875 16.0928 29.8525 16.8125 cv
29.0171 17.5317 28.5996 18.436 28.5996 19.5249 cv
28.5996 21.5562 30.0879 22.9409 33.0649 23.6787 cv
36.0469 24.4224 li
40.2949 25.4746 42.4185 27.7783 42.4185 31.334 cv
42.4185 33.3169 41.6919 34.9829 40.2388 36.3315 cv
38.7856 37.6797 36.9888 38.354 34.8472 38.354 cv
33.5054 38.354 32.0054 38.1421 30.3467 37.7192 cv
28.2817 37.1929 li
27.4468 36.9873 26.7583 36.8848 26.2168 36.8848 cv
25.499 36.8848 24.7578 37.1206 23.9932 37.5923 cv
23.8521 37.3384 li
25.3105 35.0767 26.3345 32.9238 26.9224 30.8804 cv
27.2402 30.9712 li
27.4873 32.8696 28.229 34.3447 29.4639 35.3975 cv
30.6997 36.4492 32.3174 36.9751 34.3174 36.9751 cv
35.894 36.9751 37.1475 36.6006 38.0767 35.8511 cv
39.0063 35.1006 39.4712 34.0908 39.4712 32.8213 cv
39.4712 31.3579 38.8242 30.1484 37.5298 29.1934 cv
36.6006 28.5161 34.6943 27.8872 31.8115 27.3066 cv
29.5874 26.8589 27.9756 26.1157 26.9756 25.0752 cv
25.9756 24.0352 25.4756 22.5898 25.4756 20.7397 cv
25.4756 18.8291 26.1431 17.2783 27.479 16.0869 cv
28.814 14.896 30.5522 14.3003 32.6938 14.3003 cv
34.0703 14.3003 35.6768 14.5542 37.5122 15.062 cv
38.3711 15.3037 39.0063 15.4248 39.4185 15.4248 cv
39.9946 15.4248 40.6245 15.2192 41.3066 14.8081 cv
41.501 14.8989 li
cp
.203922 .321569 .356863 rgb
f
51.7197 16.5679 mo
51.7197 25.6558 li
51.9492 25.6558 li
52.4077 25.6738 li
52.4551 25.6738 52.5317 25.668 52.6372 25.6558 cv
52.6372 17.5654 li
54.5786 17.5654 li
56.085 17.5654 57.1465 17.7017 57.7642 17.9736 cv
58.3823 18.2456 58.9087 18.811 59.3442 19.6699 cv
58.9087 19.0527 58.3647 18.6206 57.7114 18.3726 cv
57.0581 18.1245 56.1377 18.0005 54.9497 18.0005 cv
53.1318 18.0005 li
53.1318 25.6558 li
55.4614 25.6558 57.1704 25.3057 58.2588 24.604 cv
59.3472 23.9023 59.8911 22.8022 59.8911 21.3022 cv
59.8911 19.6211 59.4058 18.3999 58.4351 17.6382 cv
57.4644 16.876 55.9023 16.4951 53.749 16.4951 cv
53.1963 16.4951 52.52 16.5195 51.7197 16.5679 cv
cp
62.8911 16.6401 mo
63.6089 17.0029 64.1855 17.6406 64.6216 18.5542 cv
65.0566 19.4673 65.2739 20.5039 65.2739 21.665 cv
65.2739 24.2896 64.2861 26.1758 62.3091 27.3247 cv
60.8149 28.1953 58.2617 28.6309 54.6494 28.6309 cv
54.0493 28.6309 53.5435 28.6187 53.1318 28.5947 cv
53.1318 36.0869 li
55.9023 39.4604 li
47.0601 39.4604 li
46.584 38.9707 li
54.8965 38.9707 li
52.6372 36.2856 li
52.6372 28.105 li
53.6606 28.1655 54.749 28.1953 55.9023 28.1953 cv
58.938 28.1953 61.1909 27.6455 62.6616 26.5449 cv
64.1328 25.4443 64.8682 23.7573 64.8682 21.4839 cv
64.8682 20.54 64.7271 19.7212 64.4448 19.0254 cv
64.1626 18.3301 63.6445 17.5352 62.8911 16.6401 cv
cp
45.9663 14.6992 mo
53.8901 14.6992 li
57.2554 14.6992 59.6499 15.1768 61.0737 16.1323 cv
62.8857 17.3296 63.7915 18.9922 63.7915 21.1211 cv
63.7915 22.415 63.4448 23.5396 62.75 24.4951 cv
62.0562 25.4502 61.085 26.1396 59.8384 26.563 cv
58.5913 26.9863 56.6084 27.1978 53.8901 27.1978 cv
51.7197 27.1978 li
51.7197 35.978 li
53.8726 37.9731 li
45.666 37.9731 li
48.1191 35.8511 li
48.1191 28.5767 li
47.978 28.564 47.8784 28.5586 47.8193 28.5586 cv
46.9717 28.5586 46.1602 28.7456 45.3838 29.1211 cv
45.2246 28.7944 li
46.0132 28.3345 46.7192 28.105 47.3428 28.105 cv
47.978 28.105 li
48.1191 28.0869 li
48.1191 27.1978 li
47.8486 27.1611 47.6665 27.1431 47.5723 27.1431 cv
46.313 27.1431 45.3076 27.458 44.5542 28.0869 cv
44.3779 27.8145 li
45.0957 26.46 46.2485 25.7827 47.8369 25.7827 cv
48.1191 25.7827 li
48.1191 16.8945 li
45.9663 14.6992 li
cp
f
75.5107 15.7329 mo
73.7104 17.5654 li
73.7104 36.0503 li
76.6753 39.4604 li
67.4976 39.4604 li
67.0571 38.9707 li
75.6343 38.9707 li
73.2163 36.2314 li
73.2163 17.4023 li
75.2104 15.3706 li
75.5107 15.7329 li
cp
66.3511 14.6992 mo
74.7163 14.6992 li
72.3516 17.1665 li
72.3516 36.0503 li
74.5752 37.9731 li
66.3511 37.9731 li
68.8042 35.8872 li
68.8042 16.9668 li
66.3511 14.6992 li
cp
f
92.083 27.2881 mo
92.8242 29.7798 94.1362 32.2168 96.019 34.5991 cv
97.1953 36.0869 98.6836 37.4229 100.484 38.6079 cv
97.7896 39.3452 95.2598 40.4702 92.895 41.9819 cv
92.7363 42.0908 li
92.3828 41.8008 li
94.6304 40.2891 97.0249 39.1763 99.5664 38.4624 cv
96.1777 36.1406 93.5127 32.4282 91.5713 27.3247 cv
91.4658 27.0161 li
95.0659 25.6133 96.8657 23.4727 96.8657 20.5947 cv
96.8657 19.4097 96.4014 18.1157 95.4717 16.7129 cv
96.6602 17.8252 97.2544 19.2407 97.2544 20.9575 cv
97.2544 23.7393 95.5303 25.8491 92.083 27.2881 cv
cp
83.5586 16.4043 mo
83.5586 26.1821 li
83.8999 26.1821 84.2231 26.1519 84.5293 26.0913 cv
84.5293 17.1665 li
85.1768 16.9849 85.9526 16.8945 86.8594 16.8945 cv
89.1533 16.8945 90.7124 17.6685 91.5361 19.2163 cv
90.665 18.4902 89.9004 17.9917 89.2417 17.7197 cv
88.5825 17.4473 87.7944 17.3115 86.877 17.3115 cv
86.1592 17.3115 85.5298 17.3843 84.9883 17.5293 cv
84.9883 26.0913 li
85.1821 26.0552 li
87.5 25.6196 89.2212 24.9331 90.3447 23.9961 cv
91.4683 23.0586 92.0298 21.8403 92.0298 20.3408 cv
92.0298 18.9985 91.5239 17.8892 90.5122 17.0117 cv
89.5005 16.1353 88.2241 15.6968 86.6826 15.6968 cv
85.4468 15.6968 84.4058 15.9326 83.5586 16.4043 cv
cp
78.229 16.876 mo
81.0171 15.2192 84.0176 14.3911 87.23 14.3911 cv
89.7241 14.3911 91.7803 14.9473 93.3979 16.0596 cv
95.0156 17.1724 95.8247 18.5874 95.8247 20.3042 cv
95.8247 21.707 95.2954 22.9497 94.2363 24.0322 cv
93.1772 25.1147 91.73 25.8979 89.8945 26.3818 cv
90.7065 28.6792 91.8096 30.9165 93.2036 33.0933 cv
94.5981 35.27 95.9951 36.939 97.3955 38.1001 cv
97.1309 38.1909 li
95.3774 38.8071 93.6597 39.6782 91.9771 40.8027 cv
91.7129 40.9839 li
91.6245 40.4038 li
90.8716 35.7236 89.8184 31.7568 88.4648 28.5039 cv
88.3945 28.3228 li
87.5825 28.7095 86.4946 29.0176 85.1289 29.2476 cv
84.9883 29.2656 li
84.9883 36.0503 li
88.0942 39.4604 li
78.9697 39.4604 li
78.6875 38.9707 li
87.0889 38.9707 li
84.5293 36.1768 li
84.5293 28.8667 li
84.9004 28.8125 li
86.2412 28.6675 87.3652 28.395 88.271 27.9961 cv
88.2002 27.8506 88.1587 27.7603 88.1475 27.7236 cv
87.9707 27.1978 li
87.959 27.1611 87.9297 27.0889 87.8823 26.98 cv
87.1533 27.1978 85.7764 27.4336 83.7529 27.6875 cv
83.5586 27.7236 li
83.5586 35.8145 li
85.5703 37.9731 li
77.77 37.9731 li
80.0645 35.8145 li
80.0645 29.7192 li
79.9229 29.7373 li
79.2407 29.895 78.6226 30.0703 78.0698 30.2637 cv
77.9287 30.3179 li
77.77 29.9551 li
78.2871 29.7495 78.6934 29.6104 78.9873 29.5376 cv
79.9229 29.3018 li
80.0645 29.2656 li
80.0645 28.3228 li
79.3696 28.3228 78.5054 28.4795 77.4697 28.7944 cv
77.2754 28.8667 li
77.2993 28.6973 77.417 28.3042 77.6284 27.6875 cv
77.6519 27.6392 77.7344 27.3672 77.876 26.8716 cv
77.8872 26.8354 77.9048 26.7808 77.9287 26.708 cv
78.458 26.7446 78.8701 26.7627 79.1641 26.7627 cv
79.4814 26.7627 79.7759 26.7446 80.0464 26.708 cv
80.0464 17.7827 li
79.5054 17.4443 78.9468 17.1602 78.3696 16.9307 cv
78.229 16.876 li
cp
f
121.928 23.624 mo
122.187 24.7124 122.833 26.2061 123.869 28.105 cv
123.61 28.0684 123.463 28.0503 123.428 28.0503 cv
121.999 27.9233 li
121.351 27.8628 120.88 27.8325 120.586 27.8325 cv
120.539 27.8325 120.421 27.8389 120.233 27.8506 cv
123.181 35.8872 li
127.117 39.4604 li
116.897 39.4604 li
116.562 38.9707 li
125.934 38.9707 li
122.757 36.0869 li
119.616 27.5425 li
120.016 27.4336 120.475 27.3789 120.992 27.3789 cv
121.627 27.3789 122.333 27.4336 123.11 27.5425 cv
122.898 27.1431 li
122.146 25.7163 121.639 24.4282 121.38 23.2793 cv
121.928 23.624 li
cp
112.344 20.522 mo
110.403 25.7827 li
110.509 25.9038 110.568 25.9761 110.579 26.0005 cv
111.303 26.8354 li
111.691 27.27 112.185 27.9478 112.786 28.8667 cv
112.962 29.1392 li
113.468 28.4858 114.068 27.8389 114.762 27.1978 cv
112.344 20.522 li
cp
111.55 18.418 mo
108.744 26.0371 li
109.638 26.98 110.409 27.9116 111.056 28.8306 cv
111.868 29.9912 li
111.879 30.0034 111.938 30.082 112.044 30.2271 cv
112.15 30.1182 112.209 30.0518 112.221 30.0273 cv
112.468 29.7192 li
112.503 29.6709 112.568 29.5923 112.662 29.4834 cv
111.838 28.1772 110.879 26.998 109.785 25.9463 cv
112.044 19.8149 li
111.55 18.418 li
cp
116.704 14.6992 mo
114.868 16.8398 li
117.763 24.7485 li
118.469 24.3501 li
115.856 17.2026 li
117.727 14.9897 li
118.186 15.1895 li
116.404 17.3115 li
118.874 24.0776 li
119.016 23.9688 119.098 23.9023 119.122 23.8784 cv
119.704 23.3701 li
120.057 23.0801 120.28 22.8745 120.375 22.7534 cv
120.68 24.1323 121.151 25.3657 121.787 26.4541 cv
121.445 26.4297 121.198 26.418 121.045 26.418 cv
119.927 26.418 119.11 26.5996 118.592 26.9619 cv
121.787 35.8691 li
124.434 37.9731 li
115.521 37.9731 li
117.957 35.8691 li
115.998 30.5718 li
114.704 31.9141 113.709 33.1899 113.015 34.3994 cv
112.609 34.2905 li
113.303 33.1055 114.338 31.7813 115.715 30.3179 cv
115.856 30.1362 li
115.521 29.3379 li
114.121 30.5356 112.962 31.9268 112.044 33.5107 cv
111.727 32.9844 li
111.115 31.981 110.332 30.8379 109.379 29.5557 cv
109.203 29.3379 li
108.296 31.4067 107.844 33.0874 107.844 34.3813 cv
107.844 35.1431 107.97 35.7871 108.223 36.3135 cv
108.476 36.8394 109.085 37.7192 110.05 38.9526 cv
110.132 39.0615 110.262 39.231 110.438 39.4604 cv
100.907 39.4604 li
100.555 38.9707 li
109.538 38.9707 li
109.238 38.5894 li
108.461 37.6221 107.953 36.8696 107.711 36.3315 cv
107.47 35.7935 107.35 35.1611 107.35 34.4355 cv
107.35 33.2021 107.838 31.3643 108.814 28.9214 cv
108.038 28.0869 li
107.885 28.4736 107.691 29.042 107.455 29.7915 cv
106.873 31.6421 li
106.555 32.6338 106.396 33.4565 106.396 34.1089 cv
106.396 34.7866 106.508 35.3491 106.732 35.7964 cv
106.956 36.2437 107.426 36.8545 108.144 37.6284 cv
108.214 37.7012 108.32 37.8154 108.461 37.9731 cv
99.6367 37.9731 li
101.319 37.0781 102.652 35.8745 103.635 34.3628 cv
104.617 32.8516 105.59 30.5176 106.555 27.3608 cv
106.626 27.1069 li
106.002 26.563 105.103 26.2305 103.926 26.1094 cv
104.573 25.1177 105.073 24.0835 105.426 23.0073 cv
105.59 23.1646 105.69 23.2612 105.726 23.2979 cv
106.52 24.0596 li
106.791 24.3257 107.114 24.5977 107.491 24.8755 cv
107.808 24.0776 li
107.596 23.8965 li
107.008 23.3638 106.514 22.9346 106.114 22.6084 cv
105.955 22.481 li
106.238 22.0825 li
106.861 22.5054 107.461 22.9956 108.038 23.5518 cv
110.438 16.7671 li
108.567 14.6992 li
116.704 14.6992 li
cp
f
147.872 37.8281 mo
147.078 39.4604 li
128.652 39.4604 li
128.21 38.9707 li
146.883 38.9707 li
147.396 37.8281 li
146.101 36.1953 145.066 34.3755 144.289 32.3677 cv
144.218 32.168 li
144.783 32.3857 li
144.907 32.6943 li
145.695 34.4844 146.636 36.1348 147.731 37.6465 cv
147.872 37.8281 li
cp
127.716 14.6992 mo
136.153 14.6992 li
133.665 17.1846 li
133.665 36.5762 li
133.806 36.5762 li
134.44 36.6304 li
134.6 36.6304 li
134.6 17.3662 li
136.506 15.3887 li
136.753 15.7876 li
135.041 17.584 li
135.041 36.6304 li
135.57 36.6792 136.076 36.7031 136.559 36.7031 cv
138.43 36.7031 139.845 36.2769 140.803 35.4243 cv
141.762 34.5718 142.407 33.166 142.736 31.207 cv
143.842 34.5083 144.978 36.7637 146.142 37.9731 cv
127.716 37.9731 li
130.152 35.9233 li
130.152 17.0029 li
127.716 14.6992 li
cp
f
162.521 26.563 mo
162.521 36.5581 li
163.403 36.5581 li
163.403 27.6514 li
164.238 27.5913 164.839 27.5605 165.204 27.5605 cv
167.156 27.5605 168.571 27.748 169.448 28.123 cv
170.324 28.4976 171.021 29.2114 171.539 30.2637 cv
171.328 30.2637 li
170.751 29.4287 170.027 28.8516 169.157 28.5308 cv
168.286 28.2104 167.01 28.0503 165.327 28.0503 cv
163.879 28.0869 li
163.879 36.5581 li
164.444 36.5581 li
167.003 36.4673 li
170.321 36.2256 171.98 34.5688 171.98 31.4971 cv
171.98 29.5742 171.434 28.2588 170.339 27.5518 cv
169.245 26.8442 167.198 26.4907 164.197 26.4907 cv
163.903 26.4907 163.344 26.5142 162.521 26.563 cv
cp
162.521 16.8945 mo
162.521 25.0752 li
162.65 25.0635 162.738 25.0571 162.786 25.0571 cv
163.103 25.0752 li
163.15 25.0752 163.25 25.0752 163.403 25.0752 cv
163.403 17.6563 li
164.415 17.1724 165.403 16.9307 166.368 16.9307 cv
167.474 16.9307 168.348 17.1357 168.989 17.5474 cv
169.63 17.9585 170.174 18.6602 170.622 19.6519 cv
170.127 19.3613 li
169.245 17.9946 167.986 17.3115 166.35 17.3115 cv
165.433 17.3115 164.609 17.5776 163.879 18.1094 cv
163.879 25.0752 li
164.621 25.0752 li
166.868 25.0752 168.542 24.6914 169.642 23.9233 cv
170.742 23.1558 171.292 21.9795 171.292 20.395 cv
171.292 19.0049 170.836 17.8828 169.924 17.0303 cv
169.012 16.1777 167.815 15.751 166.333 15.751 cv
165.027 15.751 163.756 16.1323 162.521 16.8945 cv
cp
175.74 27.8325 mo
176.999 28.8364 177.628 30.3604 177.628 32.4038 cv
177.628 34.46 176.928 36.1587 175.528 37.5015 cv
174.163 38.8071 172.157 39.4604 169.51 39.4604 cv
157.508 39.4604 li
157.208 38.9707 li
168.345 38.9707 li
170.769 38.9707 172.516 38.7168 173.586 38.209 cv
175.963 37.0723 177.151 35.0952 177.151 32.2769 cv
177.151 30.7051 176.61 29.2778 175.528 27.9961 cv
175.74 27.8325 li
cp
156.996 17.1665 mo
159.796 15.2676 162.938 14.3184 166.421 14.3184 cv
168.951 14.3184 171.016 14.9019 172.616 16.0688 cv
174.216 17.2358 175.016 18.7446 175.016 20.5947 cv
175.016 23.0615 173.628 24.7124 170.851 25.5469 cv
170.851 25.7466 li
171.133 25.8193 171.475 25.916 171.875 26.0371 cv
173.181 25.7222 174.208 25.0815 174.955 24.1143 cv
175.701 23.1465 176.075 21.9795 176.075 20.6128 cv
176.075 18.896 175.387 17.3716 174.01 16.0415 cv
174.01 15.9326 li
174.205 16.0957 li
175.746 17.3174 176.517 18.8833 176.517 20.7944 cv
176.517 23.4307 175.187 25.269 172.527 26.3091 cv
173.681 26.8535 174.578 27.6274 175.219 28.6309 cv
175.86 29.6348 176.181 30.7651 176.181 32.0229 cv
176.181 33.8247 175.545 35.2671 174.275 36.3496 cv
173.004 37.4321 171.31 37.9731 169.192 37.9731 cv
156.555 37.9731 li
158.991 35.8325 li
158.991 27.978 li
158.296 27.978 157.485 28.0503 156.555 28.1953 cv
156.414 27.6694 li
157.461 27.5605 158.32 27.5059 158.991 27.5059 cv
158.991 26.5449 li
158.55 26.5449 li
157.891 26.5449 157.062 26.5933 156.061 26.6899 cv
156.837 24.9482 li
157.12 24.9663 li
157.579 25.0024 157.926 25.021 158.161 25.021 cv
158.514 25.021 158.791 25.0391 158.991 25.0752 cv
158.991 18.2544 li
156.996 17.1665 li
cp
f
193.583 18.7446 mo
193.283 18.563 li
192.153 17.9224 191.118 17.6021 190.177 17.6021 cv
187.082 17.6021 185.535 20.728 185.535 26.98 cv
185.535 31.5513 186.494 34.5806 188.412 36.0684 cv
188.253 36.2495 li
187.077 35.3911 186.238 34.2637 185.738 32.8662 cv
185.238 31.4697 184.988 29.5801 184.988 27.1978 cv
184.988 20.4858 186.706 17.1304 190.142 17.1304 cv
191.706 17.1304 192.854 17.6685 193.583 18.7446 cv
cp
195.436 15.3887 mo
197.119 16.2231 198.448 17.6499 199.424 19.6699 cv
200.401 21.689 200.89 24.0234 200.89 26.6719 cv
200.89 30.5659 199.928 33.7104 198.004 36.105 cv
196.08 38.499 193.554 39.6963 190.423 39.6963 cv
188.424 39.6963 186.553 39.001 184.812 37.6104 cv
184.812 37.5195 li
186.271 38.6201 188.1 39.1704 190.3 39.1704 cv
193.253 39.1704 195.677 38.0278 197.571 35.7422 cv
199.466 33.4565 200.413 30.5356 200.413 26.98 cv
200.413 24.332 199.981 22.0156 199.116 20.0322 cv
198.251 18.0493 197.025 16.5679 195.436 15.5879 cv
195.436 15.3887 li
cp
189.806 16.0234 mo
185.829 16.0234 183.84 19.6152 183.84 26.7988 cv
183.84 33.438 185.8 36.7573 189.718 36.7573 cv
191.542 36.7573 192.93 35.8779 193.883 34.1182 cv
194.836 32.3589 195.313 29.7861 195.313 26.3999 cv
195.313 22.5664 194.854 19.8931 193.936 18.3818 cv
192.971 16.8096 191.595 16.0234 189.806 16.0234 cv
cp
189.806 14.4634 mo
192.665 14.4634 194.951 15.5762 196.663 17.8008 cv
198.375 20.0264 199.231 23.0015 199.231 26.7266 cv
199.231 30.2451 198.387 33.0508 196.698 35.1431 cv
195.01 37.2354 192.742 38.2817 189.895 38.2817 cv
187.647 38.2817 185.646 37.5439 183.894 36.0684 cv
181.317 33.8911 180.028 30.6689 180.028 26.3999 cv
180.028 22.7476 180.911 19.8452 182.676 17.6924 cv
184.44 15.5396 186.817 14.4634 189.806 14.4634 cv
cp
f
211.409 15.6787 mo
209.679 17.4751 li
209.679 30.9531 li
209.661 32.2046 li
210.208 34.5083 li
210.479 34.9678 210.991 35.5244 211.744 36.1768 cv
211.779 36.3403 li
210.791 35.9292 210.108 35.3311 209.732 34.5444 cv
209.355 33.7588 209.167 32.543 209.167 30.8984 cv
209.167 17.2935 li
211.161 15.2983 li
211.409 15.6787 li
cp
223.322 15.9326 mo
220.921 17.9824 li
220.921 29.2476 li
220.921 32.9365 220.639 35.3428 220.074 36.4673 cv
218.921 38.7407 216.668 39.8779 213.314 39.8779 cv
210.42 39.8779 208.244 39.1338 206.784 37.6465 cv
206.926 37.7192 li
207.543 38.082 li
208.991 38.9526 210.85 39.3877 213.12 39.3877 cv
216.368 39.3877 218.521 38.3359 219.58 36.2314 cv
220.145 35.0952 220.427 32.8096 220.427 29.3745 cv
220.427 17.7646 li
223.057 15.5518 li
223.322 15.9326 li
cp
222.722 14.6992 mo
219.562 17.2935 li
219.562 29.0122 li
219.562 31.1646 219.495 32.7124 219.359 33.6558 cv
219.224 34.5991 218.957 35.373 218.557 35.978 cv
217.544 37.5259 215.58 38.2998 212.662 38.2998 cv
209.579 38.2998 207.426 37.5259 206.202 35.978 cv
205.226 34.7559 204.737 32.416 204.737 28.9575 cv
204.737 16.9126 li
202.337 14.6992 li
210.667 14.6992 li
208.267 17.1118 li
208.267 28.9756 li
208.303 31.769 li
208.303 33.5708 208.667 34.8496 209.396 35.6055 cv
210.126 36.3613 211.355 36.7393 213.085 36.7393 cv
214.992 36.7393 216.303 36.165 217.021 35.0161 cv
217.598 34.085 217.886 32.0898 217.886 29.0303 cv
217.956 17.2935 li
215.203 14.6992 li
222.722 14.6992 li
cp
f
245.171 16.0415 mo
244.854 16.5859 li
243.948 16.8037 243.333 17.2061 243.009 17.792 cv
242.686 18.3784 242.524 19.3672 242.524 20.7578 cv
242.524 39.4604 li
238.729 39.4604 li
238.5 38.9707 li
242.047 38.9707 li
242.047 20.9395 li
242.047 19.2344 242.262 18.0464 242.692 17.375 cv
243.121 16.7036 243.948 16.2593 245.171 16.0415 cv
cp
244.553 14.6992 mo
243.212 15.4126 242.347 16.0659 241.959 16.6582 cv
241.371 17.5776 241.077 18.9624 241.077 20.8125 cv
241.077 21.9917 li
241.077 37.9731 li
238.094 37.9731 li
229.764 21.3569 li
229.764 31.207 li
229.746 32.0229 li
229.958 34.6353 li
230.193 35.8447 230.729 36.7393 231.563 37.3198 cv
231.705 37.4473 li
230.082 36.8906 229.27 35.1069 229.27 32.0957 cv
229.287 30.3906 li
229.287 20.4678 li
228.334 18.563 li
228.334 29.0122 li
228.334 32.3252 228.545 34.4961 228.969 35.5244 cv
229.393 36.5522 230.387 37.3018 231.952 37.7734 cv
233.487 39.4604 li
223.922 39.4604 li
223.64 38.9707 li
232.481 38.9707 li
231.563 37.9731 li
223.339 37.9731 li
224.775 37.4409 225.728 36.7275 226.199 35.8325 cv
226.669 34.9375 226.904 33.4019 226.904 31.2251 cv
226.904 16.7129 li
224.557 14.6992 li
233.487 14.6992 li
230.981 16.4224 li
239.524 33.5469 li
239.524 31.3701 li
232.199 16.7129 li
234.67 14.9897 li
235.005 15.3345 li
232.817 16.8579 li
239.524 30.3906 li
239.524 21.9194 li
239.524 20.9575 li
239.524 18.8535 239.356 17.4473 239.021 16.7397 cv
238.685 16.0327 237.859 15.3525 236.541 14.6992 cv
244.553 14.6992 li
cp
f
252.001 16.2231 mo
252.001 36.5762 li
252.972 36.5762 li
252.972 17.4204 li
253.584 17.3237 254.143 17.2754 254.649 17.2754 cv
255.614 17.2754 256.375 17.375 256.934 17.5742 cv
257.493 17.7739 258.055 18.1401 258.62 18.6719 cv
257.373 18.0674 256.038 17.7646 254.614 17.7646 cv
254.308 17.7646 253.907 17.7891 253.413 17.8374 cv
253.413 36.5762 li
254.731 36.5762 255.731 36.4648 256.414 36.2407 cv
257.096 36.0166 257.743 35.5845 258.355 34.9438 cv
260.061 33.166 260.914 30.1792 260.914 25.9824 cv
260.914 21.8828 259.991 19.083 258.143 17.584 cv
257.025 16.6768 255.254 16.2231 252.831 16.2231 cv
252.001 16.2231 li
cp
247.218 39.4604 mo
246.954 38.9707 li
253.413 38.9707 li
256.59 38.9707 259.002 38.5171 260.649 37.6104 cv
264.191 35.6753 265.962 31.9321 265.962 26.3818 cv
265.962 22.6689 265.167 19.9116 263.579 18.1094 cv
262.873 17.3115 li
262.85 17.2871 262.779 17.2026 262.661 17.0576 cv
265.156 18.6655 266.403 21.7437 266.403 26.291 cv
266.403 31.0674 265.167 34.5869 262.697 36.8481 cv
260.802 38.5894 257.708 39.4604 253.413 39.4604 cv
247.218 39.4604 li
cp
246.653 14.6992 mo
253.607 14.6992 li
257.008 14.6992 259.526 15.3706 261.161 16.7129 cv
263.597 18.6963 264.814 21.8042 264.814 26.0371 cv
264.814 30.4268 263.75 33.6016 261.62 35.5605 cv
260.655 36.4434 259.576 37.0659 258.382 37.4287 cv
257.188 37.792 255.602 37.9731 253.625 37.9731 cv
246.125 37.9731 li
248.542 36.0684 li
248.542 16.7856 li
246.653 14.6992 li
cp
f
297.748 16.0415 mo
297.43 16.5859 li
296.524 16.8037 295.91 17.2061 295.586 17.792 cv
295.263 18.3784 295.101 19.3672 295.101 20.7578 cv
295.101 39.4604 li
291.306 39.4604 li
291.077 38.9707 li
294.624 38.9707 li
294.624 20.9395 li
294.624 19.2344 294.839 18.0464 295.268 17.375 cv
295.698 16.7036 296.524 16.2593 297.748 16.0415 cv
cp
297.13 14.6992 mo
295.789 15.4126 294.924 16.0659 294.536 16.6582 cv
293.948 17.5776 293.653 18.9624 293.653 20.8125 cv
293.653 21.9917 li
293.653 37.9731 li
290.67 37.9731 li
282.34 21.3569 li
282.34 31.207 li
282.322 32.0229 li
282.534 34.6353 li
282.77 35.8447 283.305 36.7393 284.141 37.3198 cv
284.282 37.4473 li
282.658 36.8906 281.846 35.1069 281.846 32.0957 cv
281.864 30.3906 li
281.864 20.4678 li
280.911 18.563 li
280.911 29.0122 li
280.911 32.3252 281.123 34.4961 281.546 35.5244 cv
281.97 36.5522 282.964 37.3018 284.529 37.7734 cv
286.064 39.4604 li
276.498 39.4604 li
276.216 38.9707 li
285.058 38.9707 li
284.141 37.9731 li
275.916 37.9731 li
277.351 37.4409 278.304 36.7275 278.775 35.8325 cv
279.246 34.9375 279.481 33.4019 279.481 31.2251 cv
279.481 16.7129 li
277.134 14.6992 li
286.064 14.6992 li
283.558 16.4224 li
292.1 33.5469 li
292.1 31.3701 li
284.775 16.7129 li
287.247 14.9897 li
287.582 15.3345 li
285.394 16.8579 li
292.1 30.3906 li
292.1 21.9194 li
292.1 20.9575 li
292.1 18.8535 291.933 17.4473 291.597 16.7397 cv
291.262 16.0327 290.435 15.3525 289.117 14.6992 cv
297.13 14.6992 li
cp
f
312.379 18.7446 mo
312.079 18.563 li
310.95 17.9224 309.914 17.6021 308.973 17.6021 cv
305.878 17.6021 304.331 20.728 304.331 26.98 cv
304.331 31.5513 305.29 34.5806 307.208 36.0684 cv
307.049 36.2495 li
305.873 35.3911 305.034 34.2637 304.534 32.8662 cv
304.034 31.4697 303.784 29.5801 303.784 27.1978 cv
303.784 20.4858 305.502 17.1304 308.938 17.1304 cv
310.502 17.1304 311.649 17.6685 312.379 18.7446 cv
cp
314.232 15.3887 mo
315.915 16.2231 317.244 17.6499 318.221 19.6699 cv
319.197 21.689 319.686 24.0234 319.686 26.6719 cv
319.686 30.5659 318.724 33.7104 316.8 36.105 cv
314.876 38.499 312.35 39.6963 309.219 39.6963 cv
307.22 39.6963 305.349 39.001 303.607 37.6104 cv
303.607 37.5195 li
305.066 38.6201 306.896 39.1704 309.096 39.1704 cv
312.049 39.1704 314.473 38.0278 316.368 35.7422 cv
318.262 33.4565 319.209 30.5356 319.209 26.98 cv
319.209 24.332 318.777 22.0156 317.912 20.0322 cv
317.047 18.0493 315.821 16.5679 314.232 15.5879 cv
314.232 15.3887 li
cp
308.602 16.0234 mo
304.625 16.0234 302.636 19.6152 302.636 26.7988 cv
302.636 33.438 304.596 36.7573 308.514 36.7573 cv
310.338 36.7573 311.726 35.8779 312.679 34.1182 cv
313.632 32.3589 314.108 29.7861 314.108 26.3999 cv
314.108 22.5664 313.65 19.8931 312.732 18.3818 cv
311.767 16.8096 310.391 16.0234 308.602 16.0234 cv
cp
308.602 14.4634 mo
311.461 14.4634 313.747 15.5762 315.458 17.8008 cv
317.17 20.0264 318.027 23.0015 318.027 26.7266 cv
318.027 30.2451 317.183 33.0508 315.494 35.1431 cv
313.806 37.2354 311.538 38.2817 308.69 38.2817 cv
306.443 38.2817 304.442 37.5439 302.689 36.0684 cv
300.113 33.8911 298.824 30.6689 298.824 26.3999 cv
298.824 22.7476 299.707 19.8452 301.472 17.6924 cv
303.237 15.5396 305.613 14.4634 308.602 14.4634 cv
cp
f
342.047 15.8418 mo
341.235 16.9063 340.382 18.6719 339.488 21.1392 cv
339.417 21.3203 li
339.029 20.9756 li
339.082 20.8125 li
339.953 18.3091 340.793 16.5679 341.606 15.5879 cv
341.694 15.479 li
342.047 15.8418 li
cp
337.334 18.6719 mo
336.429 18.0674 335.37 17.7646 334.158 17.7646 cv
333.887 17.7646 333.605 17.7827 333.311 17.8193 cv
333.381 36.0503 li
336.188 39.4604 li
327.168 39.4604 li
326.763 38.9707 li
335.217 38.9707 li
332.852 36.1953 li
332.852 17.2935 li
333.805 17.2754 li
334.946 17.2754 335.755 17.3687 336.231 17.5562 cv
336.708 17.7441 337.076 18.1157 337.334 18.6719 cv
cp
340.935 14.6992 mo
340.829 14.9048 340.758 15.0439 340.723 15.1167 cv
339.523 17.2935 li
339.112 18.0674 338.729 19.0347 338.376 20.1953 cv
338.341 20.2861 li
338.165 20.1592 li
338.111 19.9238 li
337.77 18.5449 337.285 17.5894 336.655 17.0576 cv
336.026 16.5254 335.064 16.2593 333.77 16.2593 cv
333.24 16.2593 332.71 16.2837 332.181 16.332 cv
331.969 16.332 li
331.969 35.9961 li
334.052 37.9731 li
325.986 37.9731 li
328.457 35.8511 li
328.457 17.8008 li
327.204 17.7827 li
325.992 17.7827 325.13 18.0278 324.619 18.5181 cv
324.106 19.0073 323.804 19.8696 323.709 21.1025 cv
323.25 21.1025 li
323.38 19.688 323.736 18.7021 324.318 18.1455 cv
324.901 17.5894 325.863 17.3115 327.204 17.3115 cv
328.263 17.3296 li
328.457 17.3296 li
328.457 16.4404 li
327.857 16.3682 327.287 16.332 326.746 16.332 cv
325.227 16.332 324.133 16.6489 323.462 17.2842 cv
322.792 17.9189 322.421 18.9922 322.351 20.5039 cv
322.139 20.5039 li
321.633 18.8232 320.85 16.9487 319.792 14.8809 cv
319.686 14.6992 li
340.935 14.6992 li
cp
f
362.149 15.9688 mo
362.026 16.1323 li
360.59 18.1157 359.631 19.7788 359.149 21.1211 cv
358.849 20.7397 li
359.637 18.8652 360.655 17.1484 361.902 15.5879 cv
362.149 15.9688 li
cp
356.96 22.0098 mo
356.96 30.0273 li
356.519 29.7915 li
356.519 21.7739 li
356.96 22.0098 li
cp
364.267 37.8281 mo
363.349 39.4604 li
344.077 39.4604 li
343.794 38.9707 li
363.12 38.9707 li
363.72 37.8281 li
362.026 36.2192 360.832 34.5024 360.137 32.6763 cv
360.702 32.894 li
361.35 34.4419 362.443 35.9897 363.985 37.5376 cv
364.267 37.8281 li
cp
361.302 14.6992 mo
361.02 15.0439 li
359.82 16.5557 358.866 18.291 358.161 20.25 cv
358.043 19.9722 357.955 19.7661 357.896 19.6338 cv
357.249 18.1821 356.554 17.2446 355.813 16.8218 cv
355.072 16.3979 353.743 16.1865 351.824 16.1865 cv
350.942 16.1865 349.883 16.2168 348.648 16.2773 cv
348.648 24.6216 li
349.777 24.6216 li
349.777 17.2393 li
350.671 17.1538 351.525 17.1118 352.336 17.1118 cv
353.831 17.1118 354.931 17.2754 355.637 17.6021 cv
356.342 17.9277 356.973 18.563 357.525 19.5063 cv
357.36 19.3853 357.243 19.2944 357.172 19.2344 cv
356.219 18.4604 355.531 18.0005 355.107 17.8555 cv
354.684 17.7104 353.848 17.6382 352.601 17.6382 cv
352.225 17.6382 351.554 17.6621 350.589 17.7104 cv
350.218 17.7285 li
350.218 24.6216 li
353.466 24.6216 li
355.743 21.4111 li
355.743 29.229 li
353.466 26.2002 li
348.648 26.2002 li
348.648 36.3765 li
349.777 36.3765 li
349.777 27.0522 li
353.607 27.0522 li
354.066 27.5244 li
350.218 27.5244 li
350.218 36.3765 li
352.619 36.3765 354.325 36.2012 355.337 35.8511 cv
356.349 35.5 357.143 34.8105 357.719 33.7827 cv
358.655 32.1318 li
358.69 32.0591 358.76 31.9268 358.866 31.7324 cv
359.172 33.0635 359.552 34.127 360.005 34.9253 cv
360.458 35.7236 361.208 36.6548 362.255 37.7192 cv
342.471 37.7192 li
345.153 35.6147 li
345.153 27.5244 li
344.165 27.6455 343.271 27.9595 342.471 28.4678 cv
342.224 28.0869 li
342.941 27.5547 343.918 27.21 345.153 27.0522 cv
345.153 26.2002 li
344.953 26.1758 344.812 26.1641 344.73 26.1641 cv
343.529 26.1641 342.436 26.6177 341.447 27.5244 cv
341.988 25.5894 343.224 24.6216 345.153 24.6216 cv
345.153 16.876 li
342.471 14.6992 li
361.302 14.6992 li
cp
f
371.38 16.5679 mo
371.38 25.6558 li
371.609 25.6558 li
372.068 25.6738 li
372.115 25.6738 372.192 25.668 372.297 25.6558 cv
372.297 17.5654 li
374.24 17.5654 li
375.745 17.5654 376.807 17.7017 377.425 17.9736 cv
378.042 18.2456 378.569 18.811 379.004 19.6699 cv
378.569 19.0527 378.024 18.6206 377.372 18.3726 cv
376.719 18.1245 375.797 18.0005 374.609 18.0005 cv
372.791 18.0005 li
372.791 25.6558 li
375.121 25.6558 376.83 25.3057 377.918 24.604 cv
379.007 23.9023 379.552 22.8022 379.552 21.3022 cv
379.552 19.6211 379.065 18.3999 378.095 17.6382 cv
377.125 16.876 375.563 16.4951 373.41 16.4951 cv
372.855 16.4951 372.18 16.5195 371.38 16.5679 cv
cp
382.551 16.6401 mo
383.27 17.0029 383.846 17.6406 384.281 18.5542 cv
384.716 19.4673 384.934 20.5039 384.934 21.665 cv
384.934 24.2896 383.946 26.1758 381.968 27.3247 cv
380.475 28.1953 377.921 28.6309 374.309 28.6309 cv
373.709 28.6309 373.204 28.6187 372.791 28.5947 cv
372.791 36.0869 li
375.563 39.4604 li
366.721 39.4604 li
366.244 38.9707 li
374.557 38.9707 li
372.297 36.2856 li
372.297 28.105 li
373.322 28.1655 374.409 28.1953 375.563 28.1953 cv
378.599 28.1953 380.851 27.6455 382.322 26.5449 cv
383.792 25.4443 384.529 23.7573 384.529 21.4839 cv
384.529 20.54 384.387 19.7212 384.105 19.0254 cv
383.823 18.3301 383.304 17.5352 382.551 16.6401 cv
cp
365.626 14.6992 mo
373.551 14.6992 li
376.916 14.6992 379.31 15.1768 380.734 16.1323 cv
382.545 17.3296 383.452 18.9922 383.452 21.1211 cv
383.452 22.415 383.105 23.5396 382.411 24.4951 cv
381.716 25.4502 380.746 26.1396 379.498 26.563 cv
378.25 26.9863 376.269 27.1978 373.551 27.1978 cv
371.38 27.1978 li
371.38 35.978 li
373.534 37.9731 li
365.326 37.9731 li
367.779 35.8511 li
367.779 28.5767 li
367.638 28.564 367.538 28.5586 367.479 28.5586 cv
366.632 28.5586 365.82 28.7456 365.044 29.1211 cv
364.885 28.7944 li
365.673 28.3345 366.379 28.105 367.003 28.105 cv
367.638 28.105 li
367.779 28.0869 li
367.779 27.1978 li
367.509 27.1611 367.326 27.1431 367.232 27.1431 cv
365.974 27.1431 364.967 27.458 364.214 28.0869 cv
364.038 27.8145 li
364.755 26.46 365.909 25.7827 367.497 25.7827 cv
367.779 25.7827 li
367.779 16.8945 li
365.626 14.6992 li
cp
f
407.579 23.624 mo
407.837 24.7124 408.485 26.2061 409.52 28.105 cv
409.261 28.0684 409.114 28.0503 409.078 28.0503 cv
407.649 27.9233 li
407.001 27.8628 406.531 27.8325 406.237 27.8325 cv
406.19 27.8325 406.072 27.8389 405.884 27.8506 cv
408.832 35.8872 li
412.767 39.4604 li
402.548 39.4604 li
402.212 38.9707 li
411.584 38.9707 li
408.408 36.0869 li
405.267 27.5425 li
405.667 27.4336 406.125 27.3789 406.643 27.3789 cv
407.278 27.3789 407.984 27.4336 408.761 27.5425 cv
408.549 27.1431 li
407.795 25.7163 407.291 24.4282 407.031 23.2793 cv
407.579 23.624 li
cp
397.995 20.522 mo
396.053 25.7827 li
396.16 25.9038 396.218 25.9761 396.23 26.0005 cv
396.953 26.8354 li
397.342 27.27 397.836 27.9478 398.435 28.8667 cv
398.613 29.1392 li
399.119 28.4858 399.718 27.8389 400.413 27.1978 cv
397.995 20.522 li
cp
397.201 18.418 mo
394.394 26.0371 li
395.289 26.98 396.059 27.9116 396.707 28.8306 cv
397.517 29.9912 li
397.53 30.0034 397.588 30.082 397.695 30.2271 cv
397.8 30.1182 397.86 30.0518 397.871 30.0273 cv
398.119 29.7192 li
398.153 29.6709 398.217 29.5923 398.312 29.4834 cv
397.49 28.1772 396.53 26.998 395.435 25.9463 cv
397.695 19.8149 li
397.201 18.418 li
cp
402.353 14.6992 mo
400.518 16.8398 li
403.413 24.7485 li
404.119 24.3501 li
401.506 17.2026 li
403.378 14.9897 li
403.836 15.1895 li
402.054 17.3115 li
404.524 24.0776 li
404.666 23.9688 404.749 23.9023 404.772 23.8784 cv
405.354 23.3701 li
405.707 23.0801 405.93 22.8745 406.025 22.7534 cv
406.331 24.1323 406.802 25.3657 407.437 26.4541 cv
407.095 26.4297 406.848 26.418 406.695 26.418 cv
405.578 26.418 404.76 26.5996 404.242 26.9619 cv
407.437 35.8691 li
410.084 37.9731 li
401.171 37.9731 li
403.606 35.8691 li
401.647 30.5718 li
400.354 31.9141 399.36 33.1899 398.666 34.3994 cv
398.26 34.2905 li
398.954 33.1055 399.989 31.7813 401.365 30.3179 cv
401.506 30.1362 li
401.171 29.3379 li
399.771 30.5356 398.613 31.9268 397.695 33.5107 cv
397.376 32.9844 li
396.765 31.981 395.982 30.8379 395.03 29.5557 cv
394.852 29.3379 li
393.947 31.4067 393.495 33.0874 393.495 34.3813 cv
393.495 35.1431 393.621 35.7871 393.874 36.3135 cv
394.126 36.8394 394.736 37.7192 395.7 38.9526 cv
395.783 39.0615 395.912 39.231 396.089 39.4604 cv
386.558 39.4604 li
386.206 38.9707 li
395.188 38.9707 li
394.889 38.5894 li
394.112 37.6221 393.604 36.8696 393.362 36.3315 cv
393.121 35.7935 393 35.1611 393 34.4355 cv
393 33.2021 393.489 31.3643 394.465 28.9214 cv
393.688 28.0869 li
393.535 28.4736 393.341 29.042 393.105 29.7915 cv
392.523 31.6421 li
392.206 32.6338 392.047 33.4565 392.047 34.1089 cv
392.047 34.7866 392.159 35.3491 392.382 35.7964 cv
392.606 36.2437 393.077 36.8545 393.794 37.6284 cv
393.865 37.7012 393.971 37.8154 394.112 37.9731 cv
385.288 37.9731 li
386.97 37.0781 388.301 35.8745 389.284 34.3628 cv
390.267 32.8516 391.241 30.5176 392.206 27.3608 cv
392.276 27.1069 li
391.653 26.563 390.752 26.2305 389.577 26.1094 cv
390.223 25.1177 390.722 24.0835 391.076 23.0073 cv
391.241 23.1646 391.341 23.2612 391.376 23.2979 cv
392.171 24.0596 li
392.442 24.3257 392.764 24.5977 393.141 24.8755 cv
393.458 24.0776 li
393.247 23.8965 li
392.66 23.3638 392.166 22.9346 391.764 22.6084 cv
391.606 22.481 li
391.889 22.0825 li
392.512 22.5054 393.111 22.9956 393.688 23.5518 cv
396.089 16.7671 li
394.218 14.6992 li
402.353 14.6992 li
cp
f
419.244 16.2231 mo
419.244 36.5762 li
420.214 36.5762 li
420.214 17.4204 li
420.827 17.3237 421.385 17.2754 421.891 17.2754 cv
422.856 17.2754 423.618 17.375 424.176 17.5742 cv
424.736 17.7739 425.298 18.1401 425.862 18.6719 cv
424.616 18.0674 423.28 17.7646 421.857 17.7646 cv
421.55 17.7646 421.15 17.7891 420.656 17.8374 cv
420.656 36.5762 li
421.973 36.5762 422.974 36.4648 423.656 36.2407 cv
424.338 36.0166 424.986 35.5845 425.598 34.9438 cv
427.304 33.166 428.157 30.1792 428.157 25.9824 cv
428.157 21.8828 427.233 19.083 425.386 17.584 cv
424.267 16.6768 422.499 16.2231 420.073 16.2231 cv
419.244 16.2231 li
cp
414.461 39.4604 mo
414.196 38.9707 li
420.656 38.9707 li
423.833 38.9707 426.245 38.5171 427.893 37.6104 cv
431.433 35.6753 433.205 31.9321 433.205 26.3818 cv
433.205 22.6689 432.41 19.9116 430.822 18.1094 cv
430.116 17.3115 li
430.092 17.2871 430.021 17.2026 429.904 17.0576 cv
432.398 18.6655 433.646 21.7437 433.646 26.291 cv
433.646 31.0674 432.41 34.5869 429.94 36.8481 cv
428.045 38.5894 424.952 39.4604 420.656 39.4604 cv
414.461 39.4604 li
cp
413.896 14.6992 mo
420.85 14.6992 li
424.251 14.6992 426.769 15.3706 428.403 16.7129 cv
430.839 18.6963 432.057 21.8042 432.057 26.0371 cv
432.057 30.4268 430.992 33.6016 428.863 35.5605 cv
427.898 36.4434 426.819 37.0659 425.625 37.4287 cv
424.43 37.792 422.845 37.9731 420.868 37.9731 cv
413.367 37.9731 li
415.785 36.0684 li
415.785 16.7856 li
413.896 14.6992 li
cp
f
49.4429 54.6543 mo
49.6016 55.0718 li
47.3545 56.874 45.0366 60.9854 42.6479 67.4067 cv
37.6714 80.7402 li
40.4238 84.0415 li
31.3169 84.0415 li
30.9292 83.5513 li
39.3828 83.5513 li
37.1592 80.8672 li
42.2246 67.2798 li
43.1772 64.7041 li
44.0249 62.479 45.0249 60.4438 46.1777 58.6001 cv
47.3311 56.7554 48.4194 55.4404 49.4429 54.6543 cv
cp
48.4897 53.5479 mo
48.6841 53.7471 li
47.1426 55.2715 45.8838 56.9038 44.9067 58.645 cv
43.9307 60.3867 42.7598 63.1074 41.395 66.8086 cv
36.2412 80.6675 li
38.3413 82.5542 li
30.2056 82.5542 li
32.5352 80.5767 li
26.0757 61.6748 li
23.3574 59.2803 li
32.1113 59.2803 li
29.623 61.8379 li
35.4473 78.8711 li
36.1353 77.1846 li
30.9292 62.0923 li
32.7295 60.2593 li
33.0469 60.604 li
31.4761 62.2007 li
36.3647 76.5493 li
40.1069 66.2822 li
41.2246 63.2349 41.7832 61.1006 41.7832 59.8789 cv
41.7832 58.645 41.3418 57.5869 40.4595 56.7041 cv
40.7949 56.6318 li
44.2188 55.9546 46.7837 54.9268 48.4897 53.5479 cv
cp
f
67.3037 60.5498 mo
67.1802 60.7129 li
65.7446 62.6963 64.7856 64.3594 64.3037 65.7017 cv
64.0034 65.3208 li
64.792 63.4463 65.8096 61.729 67.0571 60.1689 cv
67.3037 60.5498 li
cp
62.1152 66.5908 mo
62.1152 74.6084 li
61.6738 74.3726 li
61.6738 66.355 li
62.1152 66.5908 li
cp
69.4214 82.4087 mo
68.5039 84.0415 li
49.231 84.0415 li
48.9487 83.5513 li
68.2744 83.5513 li
68.8745 82.4087 li
67.1802 80.8003 65.9863 79.0835 65.2915 77.2568 cv
65.8564 77.4746 li
66.5039 79.0225 67.5981 80.5708 69.1396 82.1187 cv
69.4214 82.4087 li
cp
66.4565 59.2803 mo
66.1743 59.625 li
64.9741 61.1367 64.021 62.8716 63.3149 64.8306 cv
63.1973 64.5527 63.1094 64.3472 63.0503 64.2144 cv
62.4033 62.7627 61.709 61.8257 60.9678 61.4023 cv
60.2266 60.979 58.897 60.7676 56.979 60.7676 cv
56.0962 60.7676 55.0376 60.7983 53.8022 60.8584 cv
53.8022 69.2031 li
54.9316 69.2031 li
54.9316 61.8198 li
55.8262 61.7349 56.6792 61.6929 57.4912 61.6929 cv
58.9849 61.6929 60.0854 61.856 60.791 62.1826 cv
61.4971 62.5088 62.127 63.144 62.6797 64.0874 cv
62.5151 63.9668 62.3975 63.876 62.3271 63.8154 cv
61.3735 63.041 60.6851 62.5815 60.2622 62.437 cv
59.8384 62.2915 59.0024 62.2192 57.7559 62.2192 cv
57.3789 62.2192 56.708 62.2427 55.7437 62.2915 cv
55.373 62.3096 li
55.373 69.2031 li
58.6201 69.2031 li
60.897 65.9922 li
60.897 73.8105 li
58.6201 70.7813 li
53.8022 70.7813 li
53.8022 80.9575 li
54.9316 80.9575 li
54.9316 71.6338 li
58.7617 71.6338 li
59.2207 72.105 li
55.373 72.105 li
55.373 80.9575 li
57.7734 80.9575 59.4795 80.7822 60.4912 80.4316 cv
61.5034 80.0806 62.2974 79.3911 62.8735 78.3638 cv
63.8091 76.7129 li
63.8447 76.6401 63.915 76.5073 64.021 76.3135 cv
64.3267 77.644 64.7065 78.708 65.1597 79.5063 cv
65.6123 80.3047 66.3623 81.2358 67.4097 82.3003 cv
47.625 82.3003 li
50.3076 80.1958 li
50.3076 72.105 li
49.3193 72.2266 48.4253 72.5405 47.625 73.0483 cv
47.3779 72.6675 li
48.0957 72.1357 49.0728 71.791 50.3076 71.6338 cv
50.3076 70.7813 li
50.1074 70.7568 49.9663 70.7446 49.8843 70.7446 cv
48.6841 70.7446 47.5898 71.1982 46.6016 72.105 cv
47.1426 70.1704 48.3779 69.2031 50.3076 69.2031 cv
50.3076 61.457 li
47.625 59.2803 li
66.4565 59.2803 li
cp
f
89.6299 60.7129 mo
89.436 61.0576 li
88.1533 63.3071 87.1294 65.3569 86.3647 67.207 cv
85.8882 66.9717 li
86.0825 66.5181 li
86.6704 65.248 87.1885 64.1963 87.6353 63.3618 cv
89.0479 60.7856 li
89.2241 60.459 li
89.6299 60.7129 li
cp
83.2231 62.9805 mo
82.1523 62.0977 81.1406 61.6567 80.188 61.6567 cv
77.1406 61.6567 75.6167 64.6436 75.6167 70.6177 cv
75.6167 73.3389 75.9697 75.6035 76.6753 77.4116 cv
77.3813 79.2192 78.3755 80.3892 79.6582 80.9209 cv
79.6582 81.1025 li
78.2695 80.8125 77.1606 79.7153 76.3315 77.8101 cv
75.5015 75.9053 75.0869 73.4961 75.0869 70.5815 cv
75.0869 64.3291 76.7583 61.2031 80.0996 61.2031 cv
81.229 61.2031 82.2705 61.7168 83.2231 62.7446 cv
83.2231 62.9805 li
cp
88.9771 75.4429 mo
88.7886 78.4419 87.9736 80.7246 86.5322 82.2905 cv
85.0913 83.8569 83.0762 84.6401 80.4878 84.6401 cv
78.5229 84.6401 76.6929 84.0171 74.999 82.772 cv
74.999 82.6265 li
76.5049 83.6421 78.3228 84.1504 80.4526 84.1504 cv
82.7822 84.1504 84.6821 83.3823 86.1528 81.8467 cv
86.8706 81.0967 87.4004 80.2559 87.7412 79.3247 cv
88.0825 78.394 88.312 77.1602 88.4297 75.6245 cv
88.4648 75.207 li
88.9771 75.4429 li
cp
88.3413 59.8428 mo
88.1475 60.187 li
87.0889 62.0859 86.1709 63.9844 85.394 65.8833 cv
85.2349 66.3003 li
85.0054 66.1733 li
84.7354 64.335 84.106 62.8779 83.1172 61.8018 cv
82.1289 60.7256 80.9346 60.187 79.5347 60.187 cv
78.04 60.187 76.7935 60.8584 75.793 62.2007 cv
74.5337 63.8696 73.9043 66.6997 73.9043 70.6904 cv
73.9043 74.125 74.4839 76.8159 75.6431 78.7627 cv
76.8018 80.7095 78.4111 81.6831 80.4702 81.6831 cv
82.1172 81.6831 83.4321 81.1182 84.4146 79.9868 cv
85.397 78.8564 85.9824 77.2388 86.1709 75.1348 cv
86.2178 74.6265 86.418 74.3726 86.771 74.3726 cv
87.23 74.3726 87.459 74.7656 87.459 75.5518 cv
87.459 76.7251 87.2002 77.9404 86.6826 79.1978 cv
85.5879 81.8584 83.3291 83.1885 79.9053 83.1885 cv
76.8457 83.1885 74.4165 82.0854 72.6162 79.8779 cv
70.8159 77.6714 69.9155 74.6875 69.9155 70.9263 cv
69.9155 67.4556 70.8516 64.5469 72.7222 62.2007 cv
74.5928 59.8545 76.9165 58.6816 79.6934 58.6816 cv
81.0112 58.6816 82.5112 59.0142 84.1938 59.6792 cv
85.0762 60.0298 85.8062 60.2051 86.3823 60.2051 cv
87.0059 60.2051 87.5649 60.0298 88.0591 59.6792 cv
88.3413 59.8428 li
cp
f
111.621 60.4229 mo
110.809 61.4873 109.956 63.2529 109.062 65.7197 cv
108.991 65.9014 li
108.603 65.5566 li
108.656 65.3931 li
109.526 62.8896 110.368 61.1484 111.18 60.1689 cv
111.268 60.0605 li
111.621 60.4229 li
cp
106.909 63.2529 mo
106.002 62.6484 104.943 62.3462 103.731 62.3462 cv
103.461 62.3462 103.179 62.3643 102.885 62.4004 cv
102.955 80.6313 li
105.761 84.0415 li
96.7422 84.0415 li
96.3364 83.5513 li
104.791 83.5513 li
102.426 80.7764 li
102.426 61.8745 li
103.378 61.856 li
104.52 61.856 105.329 61.9502 105.805 62.1372 cv
106.282 62.3247 106.65 62.6963 106.909 63.2529 cv
cp
110.509 59.2803 mo
110.403 59.4854 110.332 59.625 110.297 59.6978 cv
109.097 61.8745 li
108.685 62.6484 108.303 63.6157 107.95 64.7764 cv
107.914 64.8672 li
107.738 64.7407 li
107.685 64.5049 li
107.344 63.126 106.858 62.1704 106.229 61.6387 cv
105.599 61.106 104.637 60.8403 103.343 60.8403 cv
102.814 60.8403 102.284 60.8643 101.755 60.9126 cv
101.543 60.9126 li
101.543 80.5767 li
103.625 82.5542 li
95.5601 82.5542 li
98.0308 80.4316 li
98.0308 62.3823 li
96.7778 62.3643 li
95.5654 62.3643 94.7041 62.6089 94.1924 63.0986 cv
93.6802 63.5889 93.377 64.4502 93.2832 65.6836 cv
92.8242 65.6836 li
92.9541 64.269 93.3096 63.2827 93.8921 62.7266 cv
94.4746 62.1704 95.4365 61.8926 96.7778 61.8926 cv
97.8369 61.9106 li
98.0308 61.9106 li
98.0308 61.0215 li
97.4307 60.9492 96.8604 60.9126 96.3188 60.9126 cv
94.8008 60.9126 93.707 61.2305 93.0361 61.8652 cv
92.3652 62.5 91.9946 63.5732 91.9238 65.085 cv
91.7129 65.085 li
91.2065 63.4043 90.4238 61.5298 89.3652 59.4614 cv
89.2593 59.2803 li
110.509 59.2803 li
cp
f
125.422 63.3252 mo
125.123 63.144 li
123.993 62.5029 122.957 62.1826 122.016 62.1826 cv
118.921 62.1826 117.374 65.3086 117.374 71.561 cv
117.374 76.1328 118.333 79.1616 120.251 80.6494 cv
120.092 80.8311 li
118.916 79.9717 118.077 78.8442 117.577 77.4473 cv
117.077 76.0508 116.827 74.1611 116.827 71.7783 cv
116.827 65.0669 118.545 61.7109 121.98 61.7109 cv
123.546 61.7109 124.693 62.249 125.422 63.3252 cv
cp
127.275 59.9697 mo
128.958 60.8037 130.288 62.231 131.264 64.2505 cv
132.241 66.2705 132.729 68.6045 132.729 71.2529 cv
132.729 75.1465 131.767 78.291 129.843 80.6855 cv
127.919 83.0801 125.393 84.2773 122.263 84.2773 cv
120.263 84.2773 118.392 83.582 116.65 82.1914 cv
116.65 82.1006 li
118.109 83.2012 119.939 83.751 122.14 83.751 cv
125.093 83.751 127.517 82.6084 129.411 80.3228 cv
131.306 78.0371 132.252 75.1167 132.252 71.561 cv
132.252 68.9126 131.82 66.5967 130.956 64.6138 cv
130.09 62.6304 128.864 61.1484 127.275 60.1689 cv
127.275 59.9697 li
cp
121.645 60.604 mo
117.668 60.604 115.68 64.1963 115.68 71.3799 cv
115.68 78.019 117.639 81.3384 121.557 81.3384 cv
123.381 81.3384 124.77 80.4585 125.722 78.6992 cv
126.675 76.9399 127.152 74.3667 127.152 70.9805 cv
127.152 67.147 126.693 64.4741 125.775 62.9624 cv
124.81 61.3906 123.434 60.604 121.645 60.604 cv
cp
121.645 59.0444 mo
124.504 59.0444 126.79 60.1567 128.502 62.3823 cv
130.214 64.6074 131.07 67.5825 131.07 71.3071 cv
131.07 74.8262 130.226 77.6318 128.538 79.7241 cv
126.849 81.8164 124.581 82.8623 121.733 82.8623 cv
119.486 82.8623 117.486 82.125 115.733 80.6494 cv
113.156 78.4727 111.868 75.2495 111.868 70.9805 cv
111.868 67.3286 112.75 64.4258 114.515 62.2734 cv
116.28 60.1206 118.657 59.0444 121.645 59.0444 cv
cp
f
148.984 71.8691 mo
149.725 74.3608 151.037 76.7979 152.919 79.1797 cv
154.096 80.6675 155.584 82.0034 157.385 83.1885 cv
154.69 83.9268 152.161 85.0513 149.796 86.563 cv
149.637 86.6719 li
149.284 86.3813 li
151.531 84.8696 153.926 83.7573 156.467 83.0439 cv
153.078 80.7222 150.413 77.0093 148.472 71.9053 cv
148.366 71.5977 li
151.967 70.1943 153.767 68.0537 153.767 65.1758 cv
153.767 63.9902 153.302 62.6963 152.372 61.2939 cv
153.561 62.4063 154.155 63.8213 154.155 65.5386 cv
154.155 68.3203 152.431 70.4302 148.984 71.8691 cv
cp
140.459 60.9854 mo
140.459 70.7627 li
140.8 70.7627 141.124 70.7329 141.43 70.6724 cv
141.43 61.7471 li
142.077 61.5659 142.854 61.4751 143.759 61.4751 cv
146.054 61.4751 147.613 62.249 148.437 63.7969 cv
147.566 63.0713 146.801 62.5728 146.142 62.3003 cv
145.483 62.0283 144.695 61.8926 143.777 61.8926 cv
143.06 61.8926 142.43 61.9648 141.889 62.1104 cv
141.889 70.6724 li
142.083 70.6357 li
144.401 70.2007 146.122 69.5142 147.245 68.5767 cv
148.369 67.6396 148.931 66.4214 148.931 64.9214 cv
148.931 63.5796 148.425 62.4702 147.413 61.5928 cv
146.401 60.7163 145.125 60.2778 143.583 60.2778 cv
142.348 60.2778 141.306 60.5137 140.459 60.9854 cv
cp
135.129 61.457 mo
137.918 59.8003 140.918 58.9717 144.13 58.9717 cv
146.625 58.9717 148.681 59.5278 150.299 60.6406 cv
151.917 61.7529 152.725 63.1685 152.725 64.8853 cv
152.725 66.2881 152.196 67.5308 151.137 68.6133 cv
150.078 69.6953 148.631 70.479 146.795 70.9624 cv
147.607 73.2603 148.71 75.4976 150.104 77.6743 cv
151.499 79.8511 152.896 81.52 154.296 82.6812 cv
154.032 82.772 li
152.278 83.3882 150.561 84.2593 148.878 85.3843 cv
148.613 85.5649 li
148.525 84.9849 li
147.772 80.3047 146.719 76.3379 145.366 73.085 cv
145.295 72.9033 li
144.483 73.29 143.395 73.5986 142.03 73.8286 cv
141.889 73.8467 li
141.889 80.6313 li
144.995 84.0415 li
135.871 84.0415 li
135.588 83.5513 li
143.989 83.5513 li
141.43 80.7583 li
141.43 73.4478 li
141.8 73.3936 li
143.142 73.248 144.265 72.9761 145.172 72.5767 cv
145.101 72.4316 145.06 72.3408 145.048 72.3047 cv
144.872 71.7783 li
144.859 71.7422 144.83 71.6694 144.783 71.561 cv
144.054 71.7783 142.677 72.0142 140.653 72.2686 cv
140.459 72.3047 li
140.459 80.3955 li
142.471 82.5542 li
134.67 82.5542 li
136.964 80.3955 li
136.964 74.2998 li
136.823 74.3184 li
136.141 74.4756 135.523 74.6509 134.97 74.8442 cv
134.829 74.8989 li
134.67 74.5356 li
135.188 74.3306 135.594 74.1909 135.888 74.1187 cv
136.823 73.8833 li
136.964 73.8467 li
136.964 72.9033 li
136.271 72.9033 135.406 73.0605 134.37 73.375 cv
134.176 73.4478 li
134.2 73.2783 134.317 72.8853 134.529 72.2686 cv
134.553 72.2202 134.635 71.9482 134.776 71.4526 cv
134.788 71.416 134.806 71.3618 134.829 71.2891 cv
135.358 71.3252 135.771 71.3438 136.065 71.3438 cv
136.382 71.3438 136.677 71.3252 136.947 71.2891 cv
136.947 62.3643 li
136.406 62.0254 135.847 61.7412 135.271 61.5112 cv
135.129 61.457 li
cp
f
187.088 60.4229 mo
186.276 61.4873 185.423 63.2529 184.529 65.7197 cv
184.458 65.9014 li
184.07 65.5566 li
184.123 65.3931 li
184.994 62.8896 185.835 61.1484 186.647 60.1689 cv
186.735 60.0605 li
187.088 60.4229 li
cp
182.376 63.2529 mo
181.47 62.6484 180.411 62.3462 179.199 62.3462 cv
178.928 62.3462 178.646 62.3643 178.352 62.4004 cv
178.422 80.6313 li
181.229 84.0415 li
172.21 84.0415 li
171.804 83.5513 li
180.258 83.5513 li
177.893 80.7764 li
177.893 61.8745 li
178.846 61.856 li
179.987 61.856 180.796 61.9502 181.272 62.1372 cv
181.75 62.3247 182.117 62.6963 182.376 63.2529 cv
cp
185.976 59.2803 mo
185.871 59.4854 185.8 59.625 185.765 59.6978 cv
184.564 61.8745 li
184.153 62.6484 183.77 63.6157 183.417 64.7764 cv
183.382 64.8672 li
183.206 64.7407 li
183.152 64.5049 li
182.811 63.126 182.326 62.1704 181.696 61.6387 cv
181.067 61.106 180.105 60.8403 178.811 60.8403 cv
178.281 60.8403 177.751 60.8643 177.222 60.9126 cv
177.01 60.9126 li
177.01 80.5767 li
179.093 82.5542 li
171.027 82.5542 li
173.498 80.4316 li
173.498 62.3823 li
172.246 62.3643 li
171.033 62.3643 170.171 62.6089 169.66 63.0986 cv
169.147 63.5889 168.845 64.4502 168.75 65.6836 cv
168.292 65.6836 li
168.421 64.269 168.777 63.2827 169.359 62.7266 cv
169.942 62.1704 170.904 61.8926 172.246 61.8926 cv
173.304 61.9106 li
173.498 61.9106 li
173.498 61.0215 li
172.898 60.9492 172.328 60.9126 171.787 60.9126 cv
170.268 60.9126 169.174 61.2305 168.503 61.8652 cv
167.833 62.5 167.462 63.5732 167.392 65.085 cv
167.18 65.085 li
166.674 63.4043 165.891 61.5298 164.833 59.4614 cv
164.727 59.2803 li
185.976 59.2803 li
cp
f
207.19 60.5498 mo
207.067 60.7129 li
205.631 62.6963 204.672 64.3594 204.19 65.7017 cv
203.89 65.3208 li
204.678 63.4463 205.696 61.729 206.943 60.1689 cv
207.19 60.5498 li
cp
202.001 66.5908 mo
202.001 74.6084 li
201.561 74.3726 li
201.561 66.355 li
202.001 66.5908 li
cp
209.308 82.4087 mo
208.39 84.0415 li
189.118 84.0415 li
188.835 83.5513 li
208.161 83.5513 li
208.761 82.4087 li
207.067 80.8003 205.873 79.0835 205.178 77.2568 cv
205.743 77.4746 li
206.391 79.0225 207.484 80.5708 209.026 82.1187 cv
209.308 82.4087 li
cp
206.343 59.2803 mo
206.061 59.625 li
204.861 61.1367 203.907 62.8716 203.202 64.8306 cv
203.084 64.5527 202.996 64.3472 202.937 64.2144 cv
202.29 62.7627 201.595 61.8257 200.854 61.4023 cv
200.113 60.979 198.784 60.7676 196.866 60.7676 cv
195.983 60.7676 194.924 60.7983 193.689 60.8584 cv
193.689 69.2031 li
194.819 69.2031 li
194.819 61.8198 li
195.712 61.7349 196.566 61.6929 197.377 61.6929 cv
198.872 61.6929 199.972 61.856 200.678 62.1826 cv
201.384 62.5088 202.014 63.144 202.566 64.0874 cv
202.401 63.9668 202.284 63.876 202.213 63.8154 cv
201.26 63.041 200.572 62.5815 200.148 62.437 cv
199.725 62.2915 198.89 62.2192 197.642 62.2192 cv
197.266 62.2192 196.595 62.2427 195.63 62.2915 cv
195.259 62.3096 li
195.259 69.2031 li
198.507 69.2031 li
200.784 65.9922 li
200.784 73.8105 li
198.507 70.7813 li
193.689 70.7813 li
193.689 80.9575 li
194.819 80.9575 li
194.819 71.6338 li
198.648 71.6338 li
199.107 72.105 li
195.259 72.105 li
195.259 80.9575 li
197.66 80.9575 199.366 80.7822 200.378 80.4316 cv
201.39 80.0806 202.184 79.3911 202.76 78.3638 cv
203.696 76.7129 li
203.731 76.6401 203.802 76.5073 203.907 76.3135 cv
204.213 77.644 204.593 78.708 205.046 79.5063 cv
205.499 80.3047 206.249 81.2358 207.296 82.3003 cv
187.512 82.3003 li
190.194 80.1958 li
190.194 72.105 li
189.206 72.2266 188.312 72.5405 187.512 73.0483 cv
187.265 72.6675 li
187.982 72.1357 188.959 71.791 190.194 71.6338 cv
190.194 70.7813 li
189.994 70.7568 189.853 70.7446 189.771 70.7446 cv
188.57 70.7446 187.477 71.1982 186.488 72.105 cv
187.029 70.1704 188.265 69.2031 190.194 69.2031 cv
190.194 61.457 li
187.512 59.2803 li
206.343 59.2803 li
cp
f
234.44 60.6948 mo
232.446 62.1646 li
232.446 80.4497 li
235.517 84.0415 li
226.146 84.0415 li
225.898 83.5513 li
234.44 83.5513 li
231.987 80.7041 li
231.987 61.856 li
234.07 60.3867 li
234.44 60.6948 li
cp
213.473 63.5796 mo
213.473 76.604 li
213.473 78.5991 213.659 79.9717 214.029 80.7222 cv
214.4 81.4717 215.167 82.0161 216.333 82.3545 cv
216.174 82.0825 li
215.021 81.2603 214.444 80.0752 214.444 78.5269 cv
214.444 77.1846 li
214.444 66.4639 li
213.473 63.5796 li
cp
233.452 59.2803 mo
231.034 61.8018 li
231.034 80.4316 li
233.205 82.5542 li
225.086 82.5542 li
227.54 80.4316 li
227.54 68.2231 li
221.945 84.0415 li
220.25 84.0415 li
220.109 83.5513 li
221.645 83.5513 li
227.54 66.6816 li
227.54 63.9058 li
220.975 82.5361 li
219.739 82.5361 li
214.903 67.8965 li
214.903 77.4927 li
214.903 78.7749 214.985 79.6816 215.15 80.2139 cv
215.315 80.7461 215.703 81.3325 216.315 81.9736 cv
217.903 84.0415 li
208.673 84.0415 li
208.355 83.5513 li
217.021 83.5513 li
216.368 82.5542 li
208.496 82.5542 li
208.867 82.3545 li
210.173 81.6167 211.035 80.8696 211.453 80.1138 cv
211.871 79.3579 212.079 78.1641 212.079 76.5313 cv
212.079 61.5298 li
209.75 59.2803 li
218.874 59.2803 li
216.315 61.6567 li
221.31 76.8398 li
221.945 75.2617 li
217.427 61.8018 li
219.739 60.0425 li
220.109 60.3501 li
217.903 61.9468 li
222.104 74.5903 li
226.657 61.6567 li
224.504 59.2803 li
233.452 59.2803 li
cp
f
242.859 61.1484 mo
242.859 70.2368 li
243.088 70.2368 li
243.547 70.2549 li
243.595 70.2549 243.671 70.2485 243.777 70.2368 cv
243.777 62.1465 li
245.718 62.1465 li
247.225 62.1465 248.286 62.2822 248.904 62.5547 cv
249.522 62.8267 250.048 63.3916 250.484 64.2505 cv
250.048 63.6338 249.504 63.2017 248.851 62.9536 cv
248.198 62.7061 247.277 62.5815 246.089 62.5815 cv
244.271 62.5815 li
244.271 70.2368 li
246.601 70.2368 248.31 69.8862 249.398 69.1851 cv
250.487 68.4834 251.03 67.3828 251.03 65.8833 cv
251.03 64.2021 250.545 62.9805 249.575 62.2192 cv
248.604 61.457 247.042 61.0762 244.889 61.0762 cv
244.336 61.0762 243.659 61.1006 242.859 61.1484 cv
cp
254.031 61.2212 mo
254.749 61.584 255.325 62.2217 255.76 63.1353 cv
256.196 64.0479 256.414 65.085 256.414 66.2461 cv
256.414 68.8701 255.425 70.7568 253.448 71.9053 cv
251.955 72.7764 249.401 73.2119 245.789 73.2119 cv
245.189 73.2119 244.683 73.1992 244.271 73.1758 cv
244.271 80.6675 li
247.042 84.0415 li
238.2 84.0415 li
237.723 83.5513 li
246.036 83.5513 li
243.777 80.8672 li
243.777 72.6855 li
244.8 72.7466 245.889 72.7764 247.042 72.7764 cv
250.078 72.7764 252.331 72.2266 253.801 71.126 cv
255.272 70.0254 256.008 68.3384 256.008 66.0645 cv
256.008 65.1211 255.866 64.3022 255.584 63.6064 cv
255.302 62.9111 254.784 62.1157 254.031 61.2212 cv
cp
237.106 59.2803 mo
245.03 59.2803 li
248.395 59.2803 250.79 59.7578 252.213 60.7129 cv
254.025 61.9106 254.931 63.5732 254.931 65.7017 cv
254.931 66.9956 254.584 68.1206 253.89 69.0762 cv
253.196 70.0313 252.225 70.7202 250.978 71.144 cv
249.73 71.5669 247.748 71.7783 245.03 71.7783 cv
242.859 71.7783 li
242.859 80.5586 li
245.012 82.5542 li
236.806 82.5542 li
239.259 80.4316 li
239.259 73.1572 li
239.118 73.1455 239.017 73.1392 238.959 73.1392 cv
238.111 73.1392 237.3 73.3267 236.523 73.7017 cv
236.364 73.375 li
237.153 72.9155 237.859 72.6855 238.482 72.6855 cv
239.118 72.6855 li
239.259 72.6675 li
239.259 71.7783 li
238.988 71.7422 238.806 71.7241 238.712 71.7241 cv
237.453 71.7241 236.447 72.0386 235.693 72.6675 cv
235.517 72.3955 li
236.235 71.041 237.388 70.3638 238.977 70.3638 cv
239.259 70.3638 li
239.259 61.4751 li
237.106 59.2803 li
cp
f
277.646 82.4087 mo
276.852 84.0415 li
258.426 84.0415 li
257.984 83.5513 li
276.657 83.5513 li
277.169 82.4087 li
275.875 80.7764 274.839 78.9565 274.063 76.9487 cv
273.992 76.749 li
274.557 76.9668 li
274.681 77.2749 li
275.469 79.0654 276.41 80.7158 277.504 82.2275 cv
277.646 82.4087 li
cp
257.491 59.2803 mo
265.927 59.2803 li
263.438 61.7656 li
263.438 81.1567 li
263.579 81.1567 li
264.215 81.2114 li
264.374 81.2114 li
264.374 61.9468 li
266.28 59.9697 li
266.527 60.3682 li
264.814 62.1646 li
264.814 81.2114 li
265.344 81.2603 265.85 81.2842 266.333 81.2842 cv
268.204 81.2842 269.618 80.8579 270.577 80.0049 cv
271.536 79.1528 272.18 77.7471 272.51 75.7876 cv
273.616 79.0889 274.751 81.3447 275.916 82.5542 cv
257.491 82.5542 li
259.926 80.5044 li
259.926 61.584 li
257.491 59.2803 li
cp
f
298.842 68.2051 mo
299.101 69.2939 299.748 70.7871 300.783 72.6855 cv
300.524 72.6494 300.377 72.6313 300.342 72.6313 cv
298.913 72.5044 li
298.266 72.4434 297.795 72.4136 297.501 72.4136 cv
297.454 72.4136 297.336 72.4199 297.148 72.4316 cv
300.095 80.4678 li
304.031 84.0415 li
293.812 84.0415 li
293.477 83.5513 li
302.848 83.5513 li
299.672 80.6675 li
296.53 72.123 li
296.93 72.0142 297.389 71.96 297.907 71.96 cv
298.542 71.96 299.248 72.0142 300.025 72.123 cv
299.813 71.7241 li
299.06 70.2974 298.554 69.0093 298.295 67.8604 cv
298.842 68.2051 li
cp
289.258 65.103 mo
287.317 70.3638 li
287.423 70.4844 287.482 70.5571 287.494 70.5815 cv
288.217 71.416 li
288.606 71.8511 289.1 72.5288 289.7 73.4478 cv
289.876 73.7197 li
290.382 73.0669 290.982 72.4199 291.676 71.7783 cv
289.258 65.103 li
cp
288.464 62.9985 mo
285.658 70.6177 li
286.552 71.561 287.323 72.4922 287.97 73.4116 cv
288.782 74.5723 li
288.794 74.5845 288.853 74.6631 288.959 74.8081 cv
289.064 74.6992 289.123 74.6328 289.135 74.6084 cv
289.382 74.2998 li
289.417 74.252 289.482 74.1729 289.576 74.064 cv
288.752 72.7583 287.793 71.5796 286.7 70.5269 cv
288.959 64.396 li
288.464 62.9985 li
cp
293.618 59.2803 mo
291.782 61.4209 li
294.677 69.3301 li
295.383 68.9307 li
292.771 61.7837 li
294.642 59.5703 li
295.101 59.77 li
293.318 61.8926 li
295.789 68.6587 li
295.93 68.5498 296.013 68.4834 296.036 68.459 cv
296.618 67.9512 li
296.971 67.6606 297.195 67.4556 297.289 67.334 cv
297.595 68.7134 298.065 69.9463 298.701 71.0352 cv
298.36 71.0107 298.113 70.999 297.96 70.999 cv
296.842 70.999 296.024 71.1802 295.506 71.543 cv
298.701 80.4497 li
301.348 82.5542 li
292.436 82.5542 li
294.871 80.4497 li
292.912 75.1528 li
291.618 76.4951 290.623 77.7715 289.929 78.98 cv
289.523 78.8711 li
290.218 77.686 291.253 76.3623 292.629 74.8989 cv
292.771 74.7173 li
292.436 73.9194 li
291.035 75.1167 289.876 76.5073 288.959 78.0918 cv
288.641 77.5654 li
288.029 76.562 287.247 75.4189 286.293 74.1367 cv
286.117 73.9194 li
285.211 75.9873 284.758 77.668 284.758 78.9619 cv
284.758 79.7241 284.884 80.3682 285.138 80.894 cv
285.39 81.4204 286 82.3003 286.964 83.5332 cv
287.047 83.6421 287.176 83.8115 287.353 84.0415 cv
277.822 84.0415 li
277.469 83.5513 li
286.453 83.5513 li
286.152 83.1709 li
285.376 82.2031 284.867 81.4502 284.626 80.9121 cv
284.385 80.374 284.264 79.7422 284.264 79.0166 cv
284.264 77.7832 284.752 75.9448 285.729 73.502 cv
284.952 72.6675 li
284.799 73.0547 284.605 73.623 284.37 74.3726 cv
283.788 76.2231 li
283.47 77.2144 283.311 78.0371 283.311 78.6899 cv
283.311 79.3672 283.423 79.9297 283.646 80.3774 cv
283.87 80.8247 284.34 81.4355 285.058 82.2095 cv
285.128 82.2817 285.234 82.397 285.376 82.5542 cv
276.551 82.5542 li
278.234 81.6587 279.566 80.4556 280.549 78.9438 cv
281.531 77.4321 282.505 75.0981 283.47 71.9419 cv
283.541 71.688 li
282.917 71.144 282.017 70.811 280.84 70.6904 cv
281.487 69.6987 281.987 68.6646 282.34 67.5884 cv
282.505 67.7456 282.604 67.8423 282.64 67.8784 cv
283.435 68.6406 li
283.705 68.9067 284.029 69.1787 284.405 69.4565 cv
284.723 68.6587 li
284.511 68.4771 li
283.923 67.9448 283.428 67.5156 283.028 67.189 cv
282.87 67.062 li
283.152 66.6636 li
283.776 67.0864 284.375 67.5762 284.952 68.1323 cv
287.353 61.3481 li
285.481 59.2803 li
293.618 59.2803 li
cp
f
325.421 60.4229 mo
324.61 61.4873 323.756 63.2529 322.862 65.7197 cv
322.792 65.9014 li
322.404 65.5566 li
322.457 65.3931 li
323.327 62.8896 324.168 61.1484 324.98 60.1689 cv
325.068 60.0605 li
325.421 60.4229 li
cp
320.709 63.2529 mo
319.803 62.6484 318.745 62.3462 317.533 62.3462 cv
317.262 62.3462 316.979 62.3643 316.685 62.4004 cv
316.756 80.6313 li
319.562 84.0415 li
310.543 84.0415 li
310.137 83.5513 li
318.591 83.5513 li
316.226 80.7764 li
316.226 61.8745 li
317.18 61.856 li
318.321 61.856 319.13 61.9502 319.606 62.1372 cv
320.083 62.3247 320.45 62.6963 320.709 63.2529 cv
cp
324.31 59.2803 mo
324.204 59.4854 324.133 59.625 324.098 59.6978 cv
322.897 61.8745 li
322.486 62.6484 322.104 63.6157 321.75 64.7764 cv
321.715 64.8672 li
321.539 64.7407 li
321.486 64.5049 li
321.145 63.126 320.659 62.1704 320.03 61.6387 cv
319.4 61.106 318.438 60.8403 317.144 60.8403 cv
316.615 60.8403 316.085 60.8643 315.556 60.9126 cv
315.344 60.9126 li
315.344 80.5767 li
317.427 82.5542 li
309.361 82.5542 li
311.832 80.4316 li
311.832 62.3823 li
310.579 62.3643 li
309.367 62.3643 308.505 62.6089 307.993 63.0986 cv
307.481 63.5889 307.178 64.4502 307.084 65.6836 cv
306.625 65.6836 li
306.754 64.269 307.111 63.2827 307.693 62.7266 cv
308.275 62.1704 309.237 61.8926 310.579 61.8926 cv
311.637 61.9106 li
311.832 61.9106 li
311.832 61.0215 li
311.232 60.9492 310.661 60.9126 310.12 60.9126 cv
308.602 60.9126 307.508 61.2305 306.837 61.8652 cv
306.167 62.5 305.796 63.5732 305.725 65.085 cv
305.513 65.085 li
305.007 63.4043 304.225 61.5298 303.166 59.4614 cv
303.06 59.2803 li
324.31 59.2803 li
cp
f
345.524 60.5498 mo
345.4 60.7129 li
343.965 62.6963 343.006 64.3594 342.524 65.7017 cv
342.224 65.3208 li
343.012 63.4463 344.03 61.729 345.276 60.1689 cv
345.524 60.5498 li
cp
340.335 66.5908 mo
340.335 74.6084 li
339.894 74.3726 li
339.894 66.355 li
340.335 66.5908 li
cp
347.642 82.4087 mo
346.724 84.0415 li
327.451 84.0415 li
327.168 83.5513 li
346.495 83.5513 li
347.095 82.4087 li
345.4 80.8003 344.207 79.0835 343.512 77.2568 cv
344.077 77.4746 li
344.724 79.0225 345.818 80.5708 347.359 82.1187 cv
347.642 82.4087 li
cp
344.677 59.2803 mo
344.395 59.625 li
343.194 61.1367 342.241 62.8716 341.535 64.8306 cv
341.417 64.5527 341.33 64.3472 341.271 64.2144 cv
340.623 62.7627 339.929 61.8257 339.188 61.4023 cv
338.446 60.979 337.117 60.7676 335.199 60.7676 cv
334.316 60.7676 333.258 60.7983 332.022 60.8584 cv
332.022 69.2031 li
333.152 69.2031 li
333.152 61.8198 li
334.046 61.7349 334.899 61.6929 335.711 61.6929 cv
337.205 61.6929 338.306 61.856 339.011 62.1826 cv
339.717 62.5088 340.347 63.144 340.899 64.0874 cv
340.735 63.9668 340.617 63.876 340.547 63.8154 cv
339.594 63.041 338.905 62.5815 338.481 62.437 cv
338.059 62.2915 337.223 62.2192 335.976 62.2192 cv
335.599 62.2192 334.928 62.2427 333.963 62.2915 cv
333.593 62.3096 li
333.593 69.2031 li
336.84 69.2031 li
339.117 65.9922 li
339.117 73.8105 li
336.84 70.7813 li
332.022 70.7813 li
332.022 80.9575 li
333.152 80.9575 li
333.152 71.6338 li
336.981 71.6338 li
337.44 72.105 li
333.593 72.105 li
333.593 80.9575 li
335.994 80.9575 337.699 80.7822 338.711 80.4316 cv
339.724 80.0806 340.517 79.3911 341.094 78.3638 cv
342.029 76.7129 li
342.065 76.6401 342.135 76.5073 342.241 76.3135 cv
342.547 77.644 342.927 78.708 343.379 79.5063 cv
343.833 80.3047 344.583 81.2358 345.629 82.3003 cv
325.845 82.3003 li
328.528 80.1958 li
328.528 72.105 li
327.539 72.2266 326.645 72.5405 325.845 73.0483 cv
325.598 72.6675 li
326.316 72.1357 327.292 71.791 328.528 71.6338 cv
328.528 70.7813 li
328.328 70.7568 328.187 70.7446 328.104 70.7446 cv
326.904 70.7446 325.81 71.1982 324.822 72.105 cv
325.363 70.1704 326.598 69.2031 328.528 69.2031 cv
328.528 61.457 li
325.845 59.2803 li
344.677 59.2803 li
cp
f
44.9067 105.131 mo
44.7832 105.294 li
43.3481 107.277 42.3892 108.94 41.9067 110.283 cv
41.6069 109.901 li
42.395 108.027 43.4131 106.31 44.6597 104.75 cv
44.9067 105.131 li
cp
39.7183 111.172 mo
39.7183 119.189 li
39.2773 118.954 li
39.2773 110.936 li
39.7183 111.172 li
cp
47.0249 126.99 mo
46.1074 128.622 li
26.8345 128.622 li
26.5522 128.132 li
45.8779 128.132 li
46.478 126.99 li
44.7832 125.381 43.5894 123.664 42.895 121.838 cv
43.46 122.056 li
44.1069 123.604 45.2017 125.151 46.7427 126.7 cv
47.0249 126.99 li
cp
44.0601 103.861 mo
43.7778 104.206 li
42.5771 105.717 41.6245 107.453 40.9185 109.412 cv
40.8008 109.134 40.7124 108.928 40.6533 108.795 cv
40.0063 107.344 39.3125 106.407 38.5708 105.983 cv
37.8301 105.561 36.5 105.349 34.5825 105.349 cv
33.6997 105.349 32.6411 105.379 31.4053 105.439 cv
31.4053 113.784 li
32.5352 113.784 li
32.5352 106.401 li
33.4292 106.316 34.2822 106.274 35.0942 106.274 cv
36.5884 106.274 37.689 106.437 38.3945 106.764 cv
39.1006 107.09 39.73 107.725 40.2827 108.668 cv
40.1187 108.547 40.001 108.457 39.9302 108.396 cv
38.9771 107.622 38.2886 107.163 37.8652 107.018 cv
37.4419 106.873 36.606 106.8 35.3594 106.8 cv
34.9824 106.8 34.3115 106.824 33.3472 106.873 cv
32.9766 106.891 li
32.9766 113.784 li
36.2236 113.784 li
38.5005 110.573 li
38.5005 118.392 li
36.2236 115.362 li
31.4053 115.362 li
31.4053 125.539 li
32.5352 125.539 li
32.5352 116.215 li
36.3647 116.215 li
36.8237 116.686 li
32.9766 116.686 li
32.9766 125.539 li
35.377 125.539 37.0825 125.363 38.0942 125.013 cv
39.1064 124.662 39.9004 123.973 40.4771 122.945 cv
41.4126 121.293 li
41.4478 121.221 41.5186 121.088 41.6245 120.895 cv
41.9302 122.225 42.3101 123.29 42.7627 124.087 cv
43.2158 124.886 43.9658 125.816 45.0127 126.881 cv
25.2285 126.881 li
27.9111 124.777 li
27.9111 116.686 li
26.9224 116.807 26.0283 117.122 25.2285 117.629 cv
24.981 117.249 li
25.6987 116.716 26.6758 116.372 27.9111 116.215 cv
27.9111 115.362 li
27.7109 115.337 27.5698 115.326 27.4873 115.326 cv
26.2876 115.326 25.1929 115.779 24.2051 116.686 cv
24.7461 114.751 25.9814 113.784 27.9111 113.784 cv
27.9111 106.038 li
25.2285 103.861 li
44.0601 103.861 li
cp
f
54.1372 105.729 mo
54.1372 114.817 li
54.3667 114.817 li
54.8257 114.836 li
54.873 114.836 54.9497 114.83 55.0552 114.817 cv
55.0552 106.728 li
56.9966 106.728 li
58.5029 106.728 59.5645 106.863 60.1821 107.135 cv
60.8003 107.408 61.3267 107.973 61.7622 108.832 cv
61.3267 108.215 60.7827 107.782 60.1294 107.535 cv
59.4761 107.287 58.5557 107.163 57.3677 107.163 cv
55.5498 107.163 li
55.5498 114.817 li
57.8794 114.817 59.5884 114.467 60.6768 113.766 cv
61.7651 113.064 62.3091 111.964 62.3091 110.464 cv
62.3091 108.783 61.8237 107.562 60.853 106.8 cv
59.8823 106.038 58.3203 105.657 56.167 105.657 cv
55.6143 105.657 54.938 105.681 54.1372 105.729 cv
cp
65.3091 105.802 mo
66.0269 106.165 66.6035 106.803 67.0396 107.716 cv
67.4746 108.629 67.6919 109.666 67.6919 110.827 cv
67.6919 113.451 66.7041 115.337 64.7271 116.486 cv
63.2329 117.357 60.6797 117.793 57.0674 117.793 cv
56.4673 117.793 55.9614 117.781 55.5498 117.756 cv
55.5498 125.249 li
58.3203 128.622 li
49.478 128.622 li
49.002 128.132 li
57.3145 128.132 li
55.0552 125.448 li
55.0552 117.267 li
56.0786 117.327 57.167 117.357 58.3203 117.357 cv
61.356 117.357 63.6089 116.807 65.0796 115.707 cv
66.5508 114.606 67.2861 112.919 67.2861 110.646 cv
67.2861 109.702 67.1445 108.883 66.8628 108.188 cv
66.5806 107.492 66.0625 106.697 65.3091 105.802 cv
cp
48.3843 103.861 mo
56.3081 103.861 li
59.6733 103.861 62.0679 104.338 63.4917 105.294 cv
65.3037 106.492 66.2095 108.154 66.2095 110.283 cv
66.2095 111.577 65.8628 112.702 65.168 113.657 cv
64.4741 114.612 63.5029 115.301 62.2563 115.725 cv
61.0088 116.148 59.0264 116.36 56.3081 116.36 cv
54.1372 116.36 li
54.1372 125.14 li
56.2905 127.135 li
48.084 127.135 li
50.5371 125.013 li
50.5371 117.738 li
50.396 117.727 50.2964 117.72 50.2373 117.72 cv
49.3896 117.72 48.5781 117.908 47.8018 118.283 cv
47.6426 117.956 li
48.4312 117.496 49.1372 117.267 49.7607 117.267 cv
50.396 117.267 li
50.5371 117.249 li
50.5371 116.36 li
50.2666 116.324 50.0845 116.306 49.9902 116.306 cv
48.731 116.306 47.7251 116.62 46.9717 117.249 cv
46.7959 116.976 li
47.5137 115.622 48.6665 114.945 50.2549 114.945 cv
50.5371 114.945 li
50.5371 106.056 li
48.3843 103.861 li
cp
f
86.4355 104.823 mo
86.2764 105.094 li
85.7944 105.929 85.3823 106.728 85.041 107.489 cv
84.2178 109.267 83.7529 110.258 83.647 110.464 cv
83.5586 110.591 li
83.1348 110.41 li
83.2056 110.246 li
83.5469 109.448 84.041 108.408 84.6885 107.126 cv
85.8882 104.732 li
85.9766 104.587 li
86.4355 104.823 li
cp
81.2817 108.433 mo
79.9878 107.018 78.5991 106.31 77.1167 106.31 cv
76.2227 106.31 75.481 106.576 74.8931 107.108 cv
74.3047 107.64 74.0103 108.317 74.0103 109.14 cv
74.0103 110.035 74.6045 110.954 75.793 111.897 cv
75.9346 111.988 li
75.8462 112.133 li
74.2925 111.419 73.5166 110.385 73.5166 109.031 cv
73.5166 108.088 73.8457 107.32 74.5044 106.728 cv
75.1636 106.135 76.0225 105.838 77.0815 105.838 cv
78.0933 105.838 78.979 106.059 79.7373 106.5 cv
80.4966 106.942 81.0522 107.562 81.4053 108.36 cv
81.2817 108.433 li
cp
72.7749 120.858 mo
73.2104 123.035 74.3755 124.577 76.2695 125.484 cv
76.2695 125.629 li
74.0811 124.976 72.7573 123.416 72.2983 120.949 cv
72.7749 120.858 li
cp
70.5688 114.981 mo
71.1689 115.326 li
71.5571 116.039 72.6929 116.631 74.5752 117.103 cv
77.417 117.829 li
79.3467 118.325 80.6318 118.751 81.2734 119.108 cv
81.9141 119.465 82.3701 120.006 82.6411 120.731 cv
82.5176 120.804 li
81.9878 120.175 81.4146 119.715 80.7964 119.425 cv
80.1787 119.135 78.9937 118.778 77.2402 118.355 cv
74.6987 117.75 72.9932 117.227 72.1221 116.786 cv
71.2515 116.344 70.7339 115.743 70.5688 114.981 cv
cp
85.3408 115.634 mo
86.9414 116.88 87.7412 118.585 87.7412 120.75 cv
87.7412 123.059 86.8706 125.016 85.1289 126.618 cv
83.3882 128.221 81.27 129.021 78.7754 129.021 cv
77.5049 129.021 76.3574 128.888 75.334 128.622 cv
72.5103 127.915 li
71.8516 127.746 71.1455 127.661 70.3926 127.661 cv
69.7217 127.661 69.104 127.8 68.5396 128.078 cv
68.3276 127.552 li
68.9395 127.262 69.5625 127.117 70.1982 127.117 cv
70.9043 127.117 71.7104 127.226 72.6162 127.443 cv
75.334 128.114 li
76.4165 128.381 77.5581 128.513 78.7578 128.513 cv
81.1113 128.513 83.1147 127.743 84.7676 126.201 cv
86.4209 124.659 87.2471 122.793 87.2471 120.604 cv
87.2471 118.754 86.6118 117.134 85.3408 115.743 cv
85.3408 115.634 li
cp
85.3408 104.061 mo
84.729 104.907 84.2407 105.79 83.8765 106.709 cv
83.1587 108.523 82.6821 109.636 82.4468 110.047 cv
82.3584 110.156 li
82.311 110.023 82.2759 109.92 82.2529 109.847 cv
81.9233 108.759 81.6523 108.003 81.4404 107.58 cv
81.229 107.157 80.9111 106.751 80.4878 106.364 cv
79.417 105.385 78.1992 104.895 76.8345 104.895 cv
75.5752 104.895 74.5283 105.255 73.6929 105.975 cv
72.8574 106.694 72.4395 107.598 72.4395 108.687 cv
72.4395 110.718 73.9282 112.103 76.9048 112.84 cv
79.8877 113.584 li
84.1353 114.636 86.2588 116.94 86.2588 120.496 cv
86.2588 122.479 85.5322 124.145 84.0791 125.493 cv
82.626 126.841 80.8291 127.516 78.6875 127.516 cv
77.3462 127.516 75.8462 127.304 74.187 126.881 cv
72.1221 126.355 li
71.2866 126.149 70.5981 126.046 70.0571 126.046 cv
69.3394 126.046 68.5981 126.282 67.833 126.754 cv
67.6919 126.5 li
69.1509 124.239 70.1743 122.085 70.7632 120.042 cv
71.0811 120.133 li
71.3281 122.031 72.0688 123.507 73.3047 124.559 cv
74.54 125.611 76.1577 126.137 78.1582 126.137 cv
79.7349 126.137 80.9878 125.762 81.9175 125.013 cv
82.8467 124.263 83.3115 123.253 83.3115 121.983 cv
83.3115 120.52 82.6641 119.311 81.3701 118.355 cv
80.4404 117.678 78.5347 117.049 75.6519 116.468 cv
73.4282 116.021 71.8164 115.277 70.8159 114.237 cv
69.8159 113.197 69.3154 111.752 69.3154 109.901 cv
69.3154 107.991 69.9834 106.44 71.3188 105.249 cv
72.6543 104.058 74.3931 103.462 76.5342 103.462 cv
77.9111 103.462 79.5171 103.716 81.3525 104.224 cv
82.2114 104.465 82.8467 104.587 83.2583 104.587 cv
83.835 104.587 84.4644 104.381 85.147 103.97 cv
85.3408 104.061 li
cp
f
101.102 104.551 mo
101.578 104.787 li
101.578 125.249 li
104.42 128.622 li
95.3838 128.622 li
94.9951 128.132 li
103.396 128.132 li
101.102 125.394 li
101.102 104.551 li
cp
100.219 104.224 mo
100.219 125.249 li
102.373 127.135 li
94.7656 127.135 li
97.0073 125.249 li
97.0073 109.285 li
96.3247 109.647 95.6362 109.829 94.9424 109.829 cv
93.8599 109.829 93.0244 109.376 92.436 108.469 cv
92.5771 108.469 li
93.2949 109.073 94.0718 109.376 94.9067 109.376 cv
95.6953 109.376 96.3955 109.164 97.0073 108.741 cv
97.0073 107.616 li
96.207 108.221 95.2715 108.523 94.2007 108.523 cv
93.6128 108.523 93.1216 108.384 92.7275 108.106 cv
92.333 107.828 92.1357 107.483 92.1357 107.072 cv
92.1357 106.467 92.4126 106.153 92.9658 106.128 cv
93.46 106.104 93.707 106.334 93.707 106.818 cv
93.707 106.902 93.6948 106.987 93.6719 107.072 cv
93.6597 107.132 93.6538 107.175 93.6538 107.199 cv
93.6655 107.393 93.8247 107.489 94.1304 107.489 cv
94.9067 107.489 95.6714 107.181 96.4248 106.564 cv
97.1777 105.947 97.7427 105.167 98.1191 104.224 cv
100.219 104.224 li
cp
f
123.393 108.324 mo
122.498 107.126 121.339 106.528 119.916 106.528 cv
118.469 106.528 117.418 107.269 116.766 108.75 cv
116.112 110.231 115.786 112.617 115.786 115.906 cv
115.786 118.785 116.074 120.991 116.65 122.527 cv
117.227 124.063 118.145 125.061 119.404 125.521 cv
119.404 125.702 li
118.533 125.557 117.716 125.013 116.951 124.069 cv
115.868 122.703 115.327 119.879 115.327 115.598 cv
115.327 112.224 115.695 109.784 116.43 108.278 cv
117.166 106.772 118.357 106.02 120.004 106.02 cv
121.545 106.02 122.763 106.733 123.657 108.16 cv
123.393 108.324 li
cp
124.381 104.224 mo
126.169 105.034 127.561 106.452 128.555 108.478 cv
129.549 110.503 130.046 112.931 130.046 115.761 cv
130.046 120.501 128.97 123.997 126.816 126.246 cv
125.075 128.072 122.898 128.985 120.287 128.985 cv
119.086 128.985 118.042 128.801 117.154 128.432 cv
116.265 128.063 115.303 127.413 114.268 126.482 cv
114.427 126.355 li
116.145 127.806 118.021 128.532 120.057 128.532 cv
123.034 128.532 125.357 127.425 127.028 125.212 cv
128.699 122.999 129.535 119.921 129.535 115.979 cv
129.535 113.088 129.114 110.7 128.272 108.813 cv
127.432 106.927 126.134 105.452 124.381 104.387 cv
124.381 104.224 li
cp
119.492 105.185 mo
117.633 105.185 116.286 106.011 115.451 107.662 cv
114.615 109.312 114.197 111.964 114.197 115.616 cv
114.197 122.558 116.104 126.028 119.916 126.028 cv
123.328 126.028 125.034 122.576 125.034 115.67 cv
125.034 111.885 124.61 109.191 123.763 107.589 cv
122.916 105.986 121.492 105.185 119.492 105.185 cv
cp
119.563 103.498 mo
121.798 103.498 123.74 104.375 125.387 106.128 cv
127.505 108.354 128.563 111.631 128.563 115.961 cv
128.563 119.528 127.781 122.346 126.216 124.414 cv
124.651 126.482 122.522 127.516 119.828 127.516 cv
117.086 127.516 114.883 126.397 113.218 124.16 cv
111.553 121.922 110.721 118.959 110.721 115.271 cv
110.721 111.716 111.526 108.865 113.139 106.718 cv
114.75 104.571 116.892 103.498 119.563 103.498 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Ilona) ()
%%Title: (Spiral bound notepad.eps)
%%CreationDate: 9/2/2014 5:19 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj]?3p\=cnT9&H7/gq"T9_JH9>nI*'5]Oik#,lXMbOt^[n9aR&F3\<aUhLb^luI/o_(n$=3SU&U1R!NHI&l/+es[ENf"Z!g
%<@1q<<F+$/pqnrQm[]&cQaK2Y)[/%(-IW6$b:4:F)r*)?[Bd*<1;($IWq76*ZZjc1<Lds9d&OQ9h6fr8QefmPfb\VHc?sTrp"%G_
%^2@#Ti1A`4G$;'!ST:d[Y^76N.oE'^8iONP_HkLhI]%ALFLqQJ7o$5mfKnDJo&3VU*"lG]Q>.ierG,T&ar?^ZAeoT^WCqK^1:4%[
%cf3n>-HVZ-qOP[a!Kb/46\-nF$"";"0QbiQF:XSn*a+Zq*m4u[0dP"#iJXF'E#X2P1tbe&4Ykl(d4ir<g!F:)dG`,r+6g+?(dUB`
%XCsT%XB753)nuqBe;j\0kR@=8XPaR*L#L+-`%8DHAPKs.jqPs!;J90OMp-d"1_2G>L$g\c*r);Hhn_IG*X&lE8I\50Hf+t\UEEX>
%J<@GCK.n3QO2(;]3ria6cr"a/o$B_>BtC9bMD`<oq#L2jJJ`f5UL3L3T[okUILGn[B_u-ni36h?4XT-+1;]"SpS\j@#P-N3'LYYb
%ME,Deh'*ddNIVpK;rAFNmc>j"`)9?bVYS"?mnLq[NX>?=bf*d_1K>\d(T@&#(eOl"@_RlEUrs*#<s`Our>u)<8Te%O6;k]dT),HJ
%r+?;n19%CK43._R#ZG8*MdqVt=^Qr7&<JX&_FR*qdcu??Xq&?$.^;D$YU!BUq',X-QDXi406i7=e!1U\IL#U$PS7f(7lXlVD>YH?
%'F6EkoF\P81K1qTR$s<L9&O_l"dC8b#=\CK^a*Cig*adshSRBrKE4'\Hj#jT,]HcS7kdmCR^3X&NJ9#ACLimMZE-N-NIR#Y"napd
%Kd8%HZ>^2D1mTM*/'q0oVHXbG,uB['eE)7s/QEtBodI;ZOT5Oc+int_IM.FQ7/Db8VCifk0KTkIdthu.T*=4dSeRo+n/d_sc">o=
%cgXTa+NtsCi!,OYE._Q:(sO>s2b6,iK9LmGd%k&[O3E-^ZMt"\)Kr-CaorPRk)=rLYqM*h6IQWe+LH.Z(]i?r.ou[W+'_;_l=q/@
%n[K20!]Lr#ggK'q(EAn'C4c_S7m\qE^+V?X2QNWoWc3`+6?O*@^lqs?(1$*pe@U>sMk<0P1?3g`7K9C)^DclJ`rFRGmV>hi$f.0(
%ep52RjL"<7h5drP&7_emR_VI50iN2>m=)ah6]k%B"^cUL)*[\A)dBmq(XPW11D_5'0D*MOcRQj4"0fU[pg)/n)3p8(E)=J-A.G8*
%)-)=4Z?lZm(][bU#tYQ,Nh&YODYG+Xm:=2[l6``V<JD>$[,6aTnns+7NQ6[?PuYW[XQgAo8NMg5.2l;!1BX3Vr/uP"&.^i%e=<.H
%R?rq>FZOEmQg=:(CB&qUc;7L4)Hm?`PgpMnDugIGFf4i>=mI5(WQjEhg1s]Z]%9ClQ0U=sK)u;A[gR1lG:oC,`3l^n+(_gF0dZ;B
%l[E?qroJ6T62'&.o=4IR:^/OS.S`U%0cBJu,R^ZgIi5,N9#^j#J5C5Bn-9@qIirQG#j`(Ko>X&t(ChRJh=&iGC<a.d#ebeiRcMJu
%>FeqT#]U;6A+EtpP2O?rmWh#Lk.laYcY7^$0_r)[-NqUjG4,^W/iB\`<Wbe>`BWr(?i^j]]li:?%K<#9cpb_:&jm,+Y?Ps5Xbe(U
%^%7\"1J\PHICQf;C%^68c1BNB4,^XalcdJ`F"4k(#D?C-m%8]]5F+'_T+tN.$piod7>2hSnK1KbD(orER(-N3nTops:_!.#$Z8r6
%D[kDX%Kj]tZfmI:[;50+0usCA3_kE:KmW&[q"Gd.9l`Ic#"W'P%R)D+bje!3$n8t$F9m>p/eRTVY/#8V1"6X#X47'fWOLS@^@sKp
%2li>[]@0N,b<as%g78XXpd8$K_p,u06ZIf)#Rd^p(C'ki2j&',C#+Q,GAI3Y2E#5>,.(c^ZpA;G'>aGhN!0bF,oXqo>se8L1ooFs
%B+QloNPl\3=7b?u*q5kd@!;1CERq/A\dcN7\[[I.-PY&qhf[VC4Hba]mg?eW<65F;KQ5N**Xsd,9JGS,=.)DuOfI058Uub\=@3#\
%S5+.?aViq!G:tbmX]GDHR4Tq?"X%]m$KuJ\Zk>5mP6/01,RNrO*23B:"[;F8@aA<&CWNX_arE_40ZDnf^0oRY[>U($^8t=PQ2k'l
%\":iE":qND\9g,jH1lJ.EC94iA?[O?;kd5H:W!@Z7=Q8H@e;(=@aEu2T"T/Iiqe,A1JT^g!h,j7+m020fCWTGeJc@Z6X8S@R%p9s
%YB$&aXdsV$:<a[:GYkBcCJBW,1IqCIcf&:M$aW:pS@crWmQFN8"'mK8'VBd>\1D_ATV7oCGU\B.X/gI55gn6u_oo0B?*-D7\s?KH
%gMGRQL`8#&V@41_A",4@Q88:$h)h7shV#Dca,ga,EW]35__=d%13,k@-l>CJA<]dpU3T;,9uU)jURA]-R/!:bk01J@0T0Pb/=U3D
%Z5@t"9<j_nG:XJl)]_+sAQnk9cH=&&!2#ucJkt&Lk9Ti,S.$JC4t:q:puq?)Eb<Uk&,qp1HRG/8:B<XJplsu@cB[u6I@0nol(cTq
%V2n(fSN[7+9_q!qOLO"@cN!D6$LXhUIS0%+N1[_+SeKGWP#g-[pb6")6-?d9;[lP^Ja=?c=O;tP8MBC@6S]MK36YrpcbsOZ691@d
%SDTXUDpIm'k7[;)\ZWdSq/$\hJa4E^Mc^g850A4!n=N>r/-COc@!]*Y.0T\46_?^+;\VG;c\PX'[uaZgDO$#^*kt[H?X\s0\Sg9;
%,Oe><p_@IU:?7ec099V5BAPQV2&:G6],\1Egai6V$hu+Fr#=^ik4'%.-?<&GWR"XQcNW0O4HhUYe-q]G_u]s";"t*>MGd"q1Pmh5
%1PMf%@lcDr)&=?[B*D=H-!$<X=dBe*"1B.6FA=ID]d"?TOs2=`13:Of5q,Mn]q?()ZH?-L<E1'lDSbB_W[1BfA.8s9AcR2K>#?dN
%.O[RlUh>8.ME49/UnrU3$t*>V-iobD8AYB+(X*M2>QN+g^s.I2!hRNL+W]dkK4^?Vc71M4%:F2tB,V=.(Y$'@$9Cig$PY$s-kqPm
%;GepLU/FsK)Mm5Q;<2+o(5g(?WE:cE,p9,haEft$&S7'0"EU@AOtV=qj8^,4E7+bC(%@DQCF#9e-.&FhkYr%22h;#NkYQgK)/,1@
%mZrAii#,@["+!\7=pNb]i.)6i/88\""%B<l]ZC209]2*Eger]9ZGn^m/ZU2U@fa*-".kss=^BQWTMPen!W87JZ;Lb\(VjSC5S6_P
%LCR3Z5rr*rQfPGW!f7Z-YiS-%-HK$hH)_ue=_=tXarojk!usVl3KUr]>+gL+W1Xk\BSRju5uWZ60mV+d?j^Q[+>1LW'&9)Lljn>a
%UE%`kcJJWBVO;(3B&PT(+l36ogh+]>7Ic[!=]_u:kcN5"k/[n!A<D#=,&"0jSoVQ3"5\Y`i7nk<mn$oG$prBQkTd%X&p]H<q-:1;
%:U]5r^##laGHcuTq0Yu\^77PH,:$tUCB5ZBec;J8JC/>+MM+pRa2n=?37Yb2\_7k=/$+;PR32+_62qA?4b`O26onsHLS/FUB;fB1
%dP00(e1Rn.W**B/:odEf>^ZZj.ZDoU5bkha&Y"0,,esP2PR:OWJ=?i^joE^/H7Om#==!%e&Vh<r$*a\')Si,X#[$f\$R6Se\hTT3
%@AK3-!2l=*W,r,$$![Ojiq%i.3(9s"`;a=T+V_-p)FZ^l`Aq8#;]H\:"E=nR]`NO.`&d\8A$dJI+l8@;GXls&SijtS-&?jmcs-bH
%=/3jW":LY']e0rL5k>/^ELmp#3%3]dS-1'_(%;U@2a"F(Ec*SC;Vg,#Lf2&e%)hp-I-S_KIRGUk>XuLQk>aId1u&qsj1Q7?"qla7
%+A[&<OFg.<Vb0i@8Ig%8.OYHQ#8WGT$/R']%7XZ^bCdj03D/ErR1*j$TIrb*1@VB?1UB>=>Y]i^LF)%p);oGO4?/F'.*oC=cgrd8
%K=G7;q2j/0cNB1`QfD6XcNcIJ`,T%I"eO`oY__23m7,`K%-2OFbm_e^PgPn)HsRWKq61_laR^AIn#uH+KTGJL'L?eLo0V[2HC:Jl
%>Ka[O(Wo'N#d^!U6]!Qcc-6Y)PSpbL1\>ou/sf5m@_#=\QZJ68Rq2[KR9!A38m*c&E9QC]WDkD`9)2?pb`iF_9.t"@].%,/(qBGu
%A9:8]m.-7s=[hrM*Dd"^Z9B#/5G]bq(+9p?KbEI""iq-o@.I"4'Qm5A[@feQa<4S5k=^n0(*KBrJQXfQ]@8"E<$B_To3bcFQmh,i
%OF7le#L,O]C;P)E+^8%(BTu#]7>aBPDZ%VOce'3DZuUE8T-3D@N;9GN1,eFt.m1QINopGl(lmJpc[UT-(uZg`ZY#`jJ&$'Q,jTf0
%*7k53,aiL+Ae]P)F(F,<mmZFbPT0LF0kJ=A:(.o@i9)XW:)qN7K7$eBL?#TVnBO.G$*rM4+8.L"cNgt*bj_.ZMVpWIS+lN"LkNfZ
%oE#d'!@n!ubg41ajBM0h)d7\;VNEf8La&H<JZ;T?MF`/."DtkX5ZVmT$B_K"dLifY+hr,ub$ToRh]Ib_qKCkK^X/`_D90=bB?KX`
%)22hYhQrRh<Vc1<9:;B]aRkE[UZX*R4[mKA1Qt_N$n47g^aoIiV1Qt/>-9;TEslQZkK7[2=-'KJ19[\cQI>gAC6]pf!IIuM]36\L
%b7NZ`XbG+)m&lA0:9Z8[p)#gqgK^=kWcC$k(JlEud.K>s&o3,2qNT'N(!24Gguh?knmrU41G=X4affFNm"JLTA\Xs12+?G)>YWW;
%G03(8XUqK-%9*uaLEGdV_GslCAo[K<%i_^lWRGo:YKeToouQ\h4YhhE_YBg+N^fXL%#7k/_7'oV8VXmbM+^WmWlbF.jW]soOX_ZU
%CAKZ>:t6hk#4%`*Whr=R0tOA66js0?9n>3scD(a9.KVLTgnKDl.)VEt(e]W=AE^]0rT9b3*I<n)fH[>Rb#B61\s6,5/#/coN,#*k
%Tf/p\Q-k0p?O4'ed?RS5n3^udK)[#*k#(5@>[k#=8FE)h=`*\E/cJ]<E92%LI<BYfd*;&iX-nFmbN.sqk+!pgB'BAsip+0dWo9`:
%!ie`>T#5Y=/c7J-JqV^,KN<]o[30&K1]5pqI*I?,Y>]FB9uO0%!.4fC^\?fi$c9R^I>9;[gkPZG:];>?-2HXfFsVHDTRt*UOAunR
%`'?XM?jW>.m/5_DnLQClC_$5,D#SX)^W'4!6s0[r%P=]KmYW2;@14nL!YP>o8DU&[O%tkX"CiVWpZ\UQo[t=?$#rcS+$IV2djTZM
%j@91sgoH$r9'.qMH;"kTq+U32rHT!(C,!p_NjX`9/CUe1s5d+PcTjs\1Y0EAT'_Rp&5<\ET'e'hIiVgV$c^r>a=8r_\RY%>mhgRF
%Xn427XSiL-(YULg6X8;VqG/p-kB?47L-N6shL`\KT89ftXp$8dWtdcJ1=VWbZW;8:#7G0!DQPPB6MU:)_VNV-5@iUUecMKOE7G(a
%T[8'=\FY"0D"d:VIBkeDpA"C%58U]^<GA5sNISs%G7P]S,ca]P8)o&@\=<1?>;GUFeA3&<[.Vs)A6#O%kO/?:kSH7SiGr*.42a9l
%V`3.5^5KM#.YJ`J*?/C"Z:,]q/^QYnJQ\k[2`1/\p<Z]E-Hk\3C^Bgl>b<!+?"Kl@U>T@$qP)B_A;FA63fcSsp)>O]3=*,:gniV!
%ZRVo[JE+oIM)aLL5\SU=X<Qu!5>7m+jZ#Z<)Jrce9\NJUr^if3hi_Lg1@?L=]b:[)07iUl"#t+Rr4\jG?#H->Qq42!<Q&a=n3p8I
%Sf4JUr1F&aFGSi_n!CUa2#%_d.<,1(qK-^fN1\.a5r,.op4#f!<8&b&8fH+?moL:=":?Ip=e%/IL,[VWM][]<6mY#J^b:ShkSt9B
%fG0s#Jm0X\n/",VJko2V-]]GqGZ.nZ(kN4JBH&luF;c1a!3m1XM',)f7bcVp6VmV5r.G..SX_P]/A.r74[$/'&d2$DdE)l+H4@0#
%\nhBiD:WolK(4'P1G0X3:C:goTD+(bjbptC$#b#UdN'!Y&\DNSRaW8jl&LUBa$dLK,2Fu9Y5V4BQL:,2G>+eo-INnJl&LV8^LJJ@
%*eVD!#j>3M*<t-K?]](mI_rT:-j&6O=H@s&ebI8;Y:#:7/Jl=0X4OP_G!45fmpn.)7^N`E-<TS^SX&&'=,eR"mD-VmX%&;UMnW$s
%_>[BaIfoJFi[V+#iun0ZS&'#^c)nTWn94M>M0i6OF-i0sZmXb-oiH<'8W!3'N-Je56AVf<)#>NIYO=@FXaNZ0%8[dG]e]-blHJ_Z
%M:p'.TDJmlWc!KihkZ*05pbCX0sNUF^V/oulFi$Uh2^,6_YkO#4n'>\hiif_'+%_A_KCB[.KK7OC[;^+Z:i-B.Xu^YnK4hWL)abm
%VB0#5/4:T&5\7s#""<HESM/TnbFhhMVd3fq99O]V0lm+0l_4Wb(Pu3_;_FJ_A[EO,7]U3SUr]_MQdiMP)TjP8P6^/jNP.GGG4J&_
%oTrU)Zeo-U%2b/)l9s6M-eXnE9@;6r?KM-PejK>\a@>UT!O$m1SOlEH,sfapNBKBqG47b%'\\t>b%X?+oQU!Fr.1Y/:*XP^"-T*;
%3MeeadN'"cNeqku7(QkPh(b&[Qq2EpbgDFW;pWUlWnlmA$*V[Eg,Ykk=bcBg]?-TW?Cs0aF$aBH&73-!SJ,>%Z`kOgh85kkXGP[5
%,!.m!k&fcS\oT(O3H9C--WE6Pk6*V3G>=*QXi1.EjM_0,@]XrNB'c]W*trE)iaOKXL&1##MfM9.Etp+c_H#>;oS]cYfpFa6jLWbB
%pC:Jk3[PU]I"iqHiY,pIULUS!fi(Qa2'hK+&UOu/Tgm%,6_^]Fn^;@3'-GhcO0,Qhk:r.NH(s!7[J%ZeY4k?URqqC@8R2"HAjk8)
%LS6&ss$Uq,CT]*^=K.-h:k*,BC[NQ@=;MmAfj/*!6%X4_<ft^jhg->-p1_$\b2mP)`?"gaQ[0J55hC8SR,H(2XqhDqJ!/FX'0M&d
%2>3`$bjG+qr9;-WSg)/?W)/+pB;*"cZ*mW5Qj_Jbcoqrm72WTpmd:[0,@Nf&_7*t^WnCi5Hh^@0iK6^97XrLM,GH)b2>oE$*3:p-
%O+l%A"f-&D8Db,C^*t1Q;h4ULqPJf89`aLJ!n'"2Ui-T2h\;0d.3O%;^b,7.m&Z_t1\KppWk!RWJA8-.En7tn.jCnAqpA=&]_Bc6
%H=;;p^WJBR3qq!EDiNh>F0GCr=T8+uhK`8\q-!X1i/fA1s6qhSpj$-BCb@cH$[Um3G4?6Yph='kfj;M$S'pM52e(n!XbmRe^&H<;
%/r0`2k`h5!a]JZ.Aqa%2$N:Fub,0N?PY37nW4D(d.0?&mCPRXGPRVs4jO]S]mNX4(^U(P0G/O?r3@GJGGh`Qa&o^;#NE:P[r#35k
%UX0o0.E&-IHdYu[;fT3b@C7BMCdailGBQ"Jci3.((-h(*Lq-qR*cGPq/]QK]BrbVP-(<#&@"89a;LqZ=N+]YO$nU>8$@J%NV3hGM
%i^tp3-nYLj##M2t9dQIP!ZH"o56J!FJ?;7;X!4_FUtBU!p&B5Z*@3\7B]N;O69SAN:*m(p6n2(GMiOr3?$j<fnE`V?].j<+5<E'r
%jk8GY9]4XsS?"KV>4^'A#_gU6^7"t<BXO.?AEE=O_Ahh3L/tqr*l*26?/Eqs5sp[6d(H>!Dee+)Y%H(&hWVODYKn.lM/-^kXsc6@
%'%cML=QuhO0456a.p]jNRp*-KB,+F]fgWMjQT)<5>>_[eYk(=cB7#&I*,jaTIjJm'4hT0d"1WdYl'b>kMI!Opbo*m@_3.MOm29"o
%1N7;g23?n<(4YR&]\s*>N'4UZnB_[7GCO^Na'd#T*h,WV[f3S'pk(,=IL8/=h"I],oL2C-GOH*.i<MAqAaZ84@gj,@n)!lHj"Uar
%]tf\[Ej*fMBL83_ds3U?osc`F+"g'6+48!K"q1GUNhI<NLgR[lc!r.+bJ_2WJO6WVG_u9n??r0aA*f6u$TmphLWH0nP^%a.1Al1!
%GhdrB]B/.h;b$J=DL]0)58rhX,:e7n)u*gG'+F+ID$(k2GM^"h=R]#[On*!55=13r"qcDX#n2GC"Tnc71)NLVM?F59jYZt_^s8&-
%h7e./$j4R&qOP[a[!<mk"^=A;&2@2C-:T7AQn4-o+P##9"hn.OAa(c.92#ikHQ<-IZ6B=0pcFPO"WY4OEa2F_qRY3>kgZ'7>4^bA
%S_%_i`[$$'khT:M<pr$kJuAVBbSpEPIW+t'X6S(+@]e(Z[@2:%f9f4sRDjXpod3pK[<oS^mB#2d\kAG+!6fRHFqgfo=fYUc:6Qg]
%bgUD7aS^tkX7r[^d)EuZp??3YP!4LGq[Cs7Z_G?u.\3lAbgRdRWHf)io,kU$GAjT`LVR:G80EEq!j,.P2JHS^&\et*n8#U,pbr3[
%s%\RWQqn$EpfXZk/e\fU_G)sDQVQr-ZBp([%rbG-[*HBIQ!V2TDcQnbHu#*!$+-7e.=9gNostG8$ph'B,A#S&A?XlN)pak2e*YbN
%aP6lfPg#8[Ibe^=SFK#;]>g#pG<Ql`R?b/LUn$+DVqc9@oRZQY7R$r=.H6euUL('().jcj!kSSZ>cTqX->!O0;T-];WG;,Gqj!cO
%:ElN$i.T*^(uf?Gio?#oF$+?+$$_MCrtO5#>'$&66QmR=9hNBb>5_48JbZp,=fWgA-kSb/ULu!,!YMQCe$48%:'+;pcjA$b6EALO
%F_e[$e)cn"TO;=n!`+a"H"MJ*1HRJ=m*a*1c0Wm&0$WbF/@.G,fF\#4?aje+q8r":'I)#UDYd8C"AqXWg.ej"92iI;:/@>4V5`9n
%;EGcF3CrHi`KU(@9nU2l\>U:X;$.r3_*s@HJHTYr2sN$>Hp$fnlOiSRW2);>8LZ_pjB;`>)3*[E1lP1\-.RGWX%?-O'!>O?C&^dj
%$7$NQ]9=opiK+^GX#"QtQ82-dhbjZ-f&8^g]+,W4j!gh.8X.j0S62MK5\t)C1*fG?_Vlh19#kYQr^i2:K&*@Q1GAFC&^tUKCX!"#
%<:"pB&"4+B'S&q0d2ulS"hOVo?P<TQM2T/F/iQNL1qQZM2u7YY8SAtCSm7(YFj=dIiN[@CaL<2%=%q\_"PCh!NHX,QZDPF?<boD&
%:]h@DR1D@+'ZP%A)MrQP$F>/P,j4I[97%.HjKn^0kqJ#!gLTA=IHG)dWF/bbc9F0*nOZ]s'Yu/%^Y#jhh/:JTk(cTF(2UcD$>!.C
%qF`efVVRbB]ZSlUJ!dd87C/9q18iM,,cDVe%=;h7M?ADV<_Z+MK9CllAV-2!">gO^1IM>7DE/t^,$,G-I$?TGSpI#R4_HNK^+k2M
%c&?_N413pV_s&J(`;\4\EY]`b>Z5@?1C5EXdljUMi?0p(q#m$oOZl.(en<&12KMQ?,pRhmS3B;8T-4_79TsmZ9_sWBO_&5iU$ef(
%N@46!BTAZ'j&9GL6&dUIDS2,r2botaVpC@_0M\5Z:J!8iI;V0,fiIt)Ge.b-S31Abf$;V=8Tr%sbkt71dF=Y9":)DXqjhd6&<7l\
%:?)/gi00lcnIphVA;-\SQmu/p$a"$MB/c#JVL^fU7GTVp?>oc^:LY>gFp#NpV,^=`CaOHq6GG?omXT"cKks@3A6a9/005-B>R.b*
%X@(!0]4e>H;espShKm5AY.$H8F6N4ZZuhV"cI1.o8>6_6rNq$>f$F?0kt(,Q;j]X&1Vm!>qgZ"C5LJF\53/Nh9M[p6;hr+#<b_ci
%$(#@`29J"(P9'"sEgqk],.-Z^R[I.P3@PhggJ.oW<bK.tjg,)2fVA?_$2i^5'-f2&3Q]7KoPY[XSSJfSgbRC_c=4Hq'%F;XOqqA9
%Y41G:=a8oEXhmp5,qZd*KpTPK9Nl[4$SQ5Q,qZd*KpOeL][TI$-"cC5Ip,,.Vp'!$EocA^1L3;8[r&\-.OCpFZ1PhhC#"V.[0J!O
%qgfJRBUJJq/!:nG0^T*G,a$!O+'=YQe`ZRO`HaPW]jC"FfX7DK'5#W@V?^+sc>iE8A_N\bHCE<)36,g3=]=c3P<5"snVuc^:B*WC
%3/c,;YG&2b#u9^k:6SRSrra]DG7S<6q-d!BJs3(L79/G>45n:UWm(L^PFOK(QmZBGF>Z]%(09*.]F?b:&_$_C=DaYd#FgO:oR3qb
%Jb/@pfQjMiV8ln9UVf^nC=Mn.M[<R<"S/N=n\ira]&Ftl,RK=-'9%e1A1pO?r4M@fE&Mg.C;P*&1LlS.EAqZt-Y^6e8's-KAh2j:
%fU5U=K_.sO]0EL.>#i:_H0q\N=0C+1]W'Gi/%+6;2(>"C,5@F>3tI+9n2)U>JMT<EI`GX<^uL*DP::XO'=<#?9=rpS=dTl7QS,;-
%7f,(k6$7LNht0\AH/56cT'=js\MO25?7+BPp7L/DXsBC9ZaO"O*aV70Vn8e<#jV*p8WVVoP%\_sG82FnXL!?/c8CUqR`X$%ju&5p
%K;/BP:mAsfBhU?)O`Uj(Yi'2<[Pjqd?<Z\jMqs'd4D^0RGE>V@-Fn4'q/go$H!@>=mN>;rj4"sRBm5U%%eAk'Np.&El#Vr-\:Zp:
%NW20!3/\O4hciL;HkK1PYh.W$5&HIn*MYSUo!h[NAl9l9lUC!WrQ\Q\mPL,t90G)Fo"8I6H?T70X-TQ)_=&=9Pi)F-8BOO2ShZhi
%?)QItIe5pt8N,m'i$UrtZZXcuod[kNNJ9@!+P^t=T'3Qu+m=bo3XO6BB"tS]$N!UCW^PbO]99G=A%F6Pb=M%Km[N)h?@F^%,*qOs
%ql+dF>B"e1`&a>ioNVhE\k@"l`cZ^\A2CiDX0XaBYj"%Zo+gc>kuP=dN/["m7'#ou8B,Cr(jtUEagf#6dmV:1s%=;Y-TV':plL?i
%&^LkJ/%J.93V>06/+4l/9Fg25,"Pef9qsk]T!HVjge"`0E+UF-b9kocOp9F"Rn3/5J_m"\ST:iR9?!E(HmmdVc]UhC-6?O8R07)?
%,5>Hl>&"=h_UbO<DcR?\dYuD6P%BW3PaQ_QgIg"4dV?eahjELQ\i>@@*8J\bgp*@)o-A6^QpR@Yp4e4!YBjG,:7I*EP7-XK!me7G
%Od819r+X8WY$Om[SDTlfkn;1o=^lYL(sLm\PF1=C1eDiINJ&r[8e;D+rD=HsgKkLHWH,oFGFK!Qo2MS^6Hms*]fB?"/1#RhOKMVZ
%="DUKfpB!6Jn`n11+?F+4seN:X[Wq9:109[6lW"Ii[V#T:\?]sUr]e+5ODea8-'geZTAK,0o)858KF_VqBph)K4&Y#(*&/Kl]WQj
%?>DTFK#:J:G.k358s8KHTT^QLM9cnI/bDM^9iR&t0EOI!(YqcXKm'<@DtN@=P&aG+GZ&)&RT8O`ekC0$B?+^JG-@:S$js5&ZQ/AD
%SRbfZ?*2\([@p&:,VgGu@Gl,eAIuIVCF%?5gFL4dqF7T44.n<*g,eVTK_-G*/^E#E/"OiX>'^$#Gkoic4tF4g?S/HrpgSQ'"6^)A
%k</aBdV4;],<,S(aD'[A]!j,ZF+8>X-)c%3qj^<pJoo;7F)LcC_l70;I'2]HIpApdrnJH9aP_P]MBuXra0+"i8]o6ui1tt`Gro9>
%=rU<TRIL9,YLR>o[d'uQ":q&$bBN!4:JWQL!Z%St0=?2,jdR".#8U+!q9gra[!3LuLk]ol'//g+Tq3T69/Q#d=&rmH@6>E!eoj`+
%4\%7OOrR1O_37HXRY6Kh[;)EpOL]>Z:!BGtm-Rk<i/@jJo6't1Z58VJbQ>_i1csMh%d2g#W?a;oqk6r0o%r?`SG('Aijl2%5/W.L
%c&$W&$Us4D/Vi:$r2q>nO)VT&/(r+.3S_Qie-)#3YNm6%i.'a/h6WJf5XGnZNT\Rd&hrBr'?ocF1,>`?4J='q,'eTGOtjsBX-UK-
%3aEHqB@0Kna8L.<d^>[qBE?NtEXFWOPG9:L+f@TCCj;&@pP/;5=?V'WkC;)Dc=.E6SP&?u*_S>,&kV!!H&Ge#l[`qq4ja*Yogo[M
%](qN5P_X'r[T"KfT%e@d7_2PD?)fV$&(=bIHbo[pl.PI:b&2CNJn^Fm/JbL$7jr)S2QOCB4<,c\b-ZlU?h]Y<Lick@?R/+OX_eqi
%7:TN]XL+]V`>+@8gPF=9`WRZM3<p:Y,W);3NN(0Jdu)/HGhTO!0s,%MX_=LFNEN;qd"-Xj&d@=Q2'o2AkW1qda"VE-'XGi^^7>.*
%a#k>,+jEr^,7uYEV.6)H*PHpbClW64]l>F6MsmgB]>g#pG<V_pf1>-fV.T:h;@,r$\,ApugPT=dpF6S>Js4tHOj&PUIA&%ED3sC3
%\!-8,n=XL02]X0>q;/IjPNI4+^,NIqhH[c_35KY#1uXq<KJ.o/dY'8JpsOgK:&*.imroC.N?:$=8KRl3Wp]Fhr-KJCS$")A2EU"l
%hWd5)?Y8nojk\XqnnFCKX]Z^g-J6["A+/->Qds`t[!ZjsBpj:NS%e]3C@en011To`]]Q2:Qm@A\NE9l-IQO$gLHQpS@'^Kq#%knh
%h/K&tOqW5/?bMUj$r]AFP!iA-1GS%N#_T[8S=)Vrl/U"PH^pL3d8]s%F!?c=Y^NL?oZ]Pu.sn/FBM\["f_L=-&ua@I6j*%b`@mS9
%@:8'BDDn'^O]-HRan#>F>:)er@=e`<f;EQVQ3ho-@]eCfgD-XF1jaRmHR<$YPjpr*JZgWsFhCE4CQaLi".X*N1A,6B5oFE\b^'>"
%VV\C5D!3LfA*`HXGE]CR"an_^hC-7<gV+t3XJqiW#u\4bRHjCJBd_$7ErX!RA^`Ql&r=!J8n.X#;_?_p:90Lf_%D5mM@OK*,UP^P
%8obObLRJnpG5\?;.fh),ep;KeT`O59P9NRj5gGd=OiT,bE0DL-]]2!O92O#"YLVs\QKZjH7ngVIFR0,XlW*:tAZqB[TIBn`;FDgM
%6NV!$i3.unZ1LKC-UhRPeP)WhG,<W*oLH!`#Z2oK:Pu666hQ-9PZ=cl?L=@QFSVRCbq/3nXcZ-c/%:5K*$!&23Z"]^c9[%_RAZ;u
%8Vfr>U.g=ZVLE!udn5iM`(YU@@P1`VUdqE/k#)nZi2KVc(1gZF\XS_h.#H1AoWL]OO*G'(etOE5B'SE-F=g+r(1g*CcBnb`o=5V_
%OV+"-ZT_0#;3DJHok$?mM_]_S/WjL:rD]De[4"V&RJNmH-#6@ii@3#&Y,P!gUXu^gPEb0F^Gmakb-b1]ZZkEKlj2TOZ'Zd@o674.
%U@BJpksRo![U)fhM]OHA%<,@nrjg"7.8GO;V_d*BrO7fX8IaLJ)7frho:C.nQ[f7=Th>i#C?WI[/`a@.FBWE[I=k%,)E+/#DD_rt
%QQC7U]'?`eETOfWjmJ\kD7X?MCBsMrr8+>]A^OOY>A$\Xhs#><1OF;o^&XA.hl-[;j"=s=eUh)1f.Qh$E']OhXnpM*P%jZrR=-4W
%Baj3'Aek1SDpX(TQ82SZB:q&>nL[R%KENPU+9MS[a";VWV#PQNs-MspNQ1]Oa4:I7B%$>WruG]Sr*$8P46ldE4'e5F43c@&-N/X>
%FRdgmK,L9j:!\2FF9TCWp]p`4G9&<7&q&<h#Q?UQ0;.gE'V6ZJ;6A6K4+:7/AflMJ&$bWqhStjKpm$OCA=u&c)jY@koL4pS+?F:0
%9NU')hWOA4k5Fr\s*=k+^-gXNjP!r&dhaH3]aGVeE=0T#<C#Z]#/YAKM=\tYL'aZ:kM^ttGBuE-PAtQ-*,fA_bW+cbR<)4/Xr32u
%lZ#bOJ:gDNqu:Zm-b\d4SV,'BfP'</iFc&#$\%Zm,l`&0<&I;RBLuhDA+W2GF<0he*\<l$I"AG2"ZsWZH2R%BECIc5YBbaT9@6&9
%iJT$SRR(:;758I0e,R6*,SbZVhg,,?mQGU8lWoX'#M=[1asp9h?OU3b(1[l8K'4$7O;SgULqiQV4#C(3RQ$T`lO&aU&YNiOpdJ,3
%)J#LOR7*S5s'S?cJfV\r4T5g$'"R-6U4E:R'W%f`e^DAh&h&NdA8!#Id4a.UCgt0K4-..o@n*Ws@p4V'Wn7cE'htS)5QO`gA;M`j
%d]E:0fT@Fh8+8U$^Vb[lY'GZ`)?e::V$7Pg/c;?4#-h+YFW*sDaGG@sD@H\oKjT-#'cJ`I_&pm!9r(-X(lk949Ol.1buAe>(P3am
%6=\@Gr5q7A2_bSdLG&A.:PQuCSH7FW9ganC1lVp-EC-%JJ+O,KZAtBTUE]#4*>^C,``*1)@W7g1]B7g4;][(,5[@BYDP4`WC9+$G
%$MGdf+;6",RSB(.DQ/Rs-QA4\RXBe*1HDcH6Bs;JSq-pq!P9QJ%PrZW!L/F%6\-1+bmmQ$K*G?n:43\aWDe^aJS5IqHSFj59ETUm
%X@VfC#rW-U#-^rrNL12s:>n)=3gDSMAso=3QKiU.5dq[($7ZVT'dT`?+gbdIa[E7FTkm.-ka!YH34+62ZI^P2@IG)>!c22Q>>sW=
%1F8$>'B!>u#0efdCBNRsGq,`oM_2,:Ql16AreG,9Fpn"05Z\#h``lhgC)Rsi$S7FZ,tOn!jl/T:UF:+UjFh:ecpV(p0qebm6[%:u
%iOX1W@P5[<qsn/<+*&YS@uMt4AtcMA8/s$pZ=TJ>8MoUlISb7:GK(g_+`bi:p4`W)N2EjJk)#RQ6g&(/m@;X?Of;hISMVol=6,fg
%h\@.g(-;RTdV,q;16C(<Em'=]E"afKW.c-D)Z*O^>VL2L<l?D@0DSk*a\2e.@&R%h/2JTX-)f$CckB;lpfHIX;UGSZ.p3HS*56TK
%Q=R?0R(sP1-9P"Y0ZX6Eoe=MVK([/;&d+n)1X<<0N&/rm<`B\??k*iFe9_kq"S,_#5Hf#\kS!WH3_0<``gHpq@+lNF0GWB7R:MB^
%\F0fn(0+AVScbTZ*H@6RR-H"7JgYK[lP>J2/:63q._9V&jkSG*DDgo?,[3ntak!H80P/jFWMi&6Rl=\s["NbP/Ya1KF&*ThJ>AR&
%EnSkdZK=2M6?Lr2X[NjV>h*h,K\n5(B!BN:Xb9Gf9/eVWWWQlcDGH<91^6?(KI,i<DX]'sofgT0O8Hm@!74foe&/?hGme(H;C*&e
%-d1TtPA+p7\j8,U6K(e[7fQ=r61`^q)21V/0s$Jc!Q.@T?W&^%Wjq=:3ZSk:8>GDl?'rkXZ3k:Mj&)U%G0</J%?@#kA_c]EYG`8h
%<_=3e=akR`6pW7G.>eUk!,$iVWN&Ak?e8kCI"Gel-?\QK2T^#OmMBeZOKrS2%f_8a#godb8?-2)@/?%o"-d@L12m4-H2<QRA$jIp
%Gh>sQ`,qO&\fTie@)*EbTO0REl]!G'9f=b_cY9#hjE3<'0pij,"&%4e9EQ>p1+*_l:,Q94%5nYM2n?R4^!NiZW*=ul65S=U8sU_7
%>8<!M@>:SP^7]Lu_U/M+#sj-H4/8RHj-26_#j'PNfE)Dc5pE<AZ48>pNhB;aEK6Ck1;B,$p(g6^(Jc[Rol*3uD=CX;-8?=-Y!=aq
%3b^".lT`(5LO%Za6kFL-YM5<m[lZMS`39Td*sf/?F_&DmE!?Z+"6*&2,Rr9=L#sTNU)qFG7?#tfoI\jo!d/6;\I;d5WA5?h6+11(
%OAIJ>5***F=f:N-q5H[X+mGNK(l:ME-=r8gWKJ0[WZmd]9\.]ah.7IkATBM&[p5@af^QXh4DmV/0Ia@_)'tI)r$?[6-VcNNMUoSP
%BOi5C)+M*F%9?"tMAK=XXt:+b8W-A(SHjnC&L3Wil8/e)\W6oJi3lr:>pfm>)J>7(_WZ-Y$7\/lVJ(_)C(\!FYPHW^9Hi'qcjl9!
%HW+@=>B1#I36;qG.uL9)aY,=bOkN1tOuJ7,#+h\=KH`29K`tmK8Ij/hMfO'[RrP%UQ+;[F+I#8=UH=C"#/Z^Y@*pYWWDuo8beR7G
%aJ6?'#fXc"1_1uO-^6.nKiJ>r<KTg6Hq?kKH((gem3d)aYm+!I'poJ!V!P+8s"C8^3n:K2S_+Yu/TegQ@%&@'8m;K&F(CRj)'s3:
%63K_kR2=X5cfkY/E@%gn7giVlZW,UUaF]%__q:2O(18=(%H!@bDYufU@l.U/MeZoKk(Tr@@T%JK%D9;b+n$O-QK;OaP0l-;;))e4
%Qp,W6-UtREDKrsDncTfb#3-T7B$osf_pqj0`.2ud%Rr&S,m8i;"?ou9AKD"@:<T'HK.h]eql,b&K7;esR0T#@cm$[B>md<>`S^l%
%Z:P3`7?KD[":Lr;f1cGQ4thLg@g[V2CVgM?edr\Ao.mP,-IY<G(n'N"-:YuU;N/+ZbeN:%IYc1WI52p4,3Hui8T(0uBZDc0\lot>
%3`MILjbkDMiG3maX;T7,AO.VQDX%t#]2+]h=V,atVrGs82r[lC90H_tL%_3K_Ik"-/Rg44`MdLRAJi4.dQ%WH1<37YPXn"%V-&9u
%n5N63j&@1B/T;ngbTh2Q0R1u92V\X=-pL[Rps0N:j?,A[BL29Z:D1Ss4?Ku&?H[q:baV&VfqL[Gm+*D!OUR;finS#,Orr)P5`3`I
%=lRi?Am4!fWSH-7C4]IQN*j5k,_Wd4N0>Cs%neQr/MK\f0ffj19naDH,qt0$1JaDV0AH<!#%A7BOpVpB+q,0h"A(O?qg>+nM.\3o
%rL"]6WrplX`hAJ4KoZg<`55!Hq>Lq!3$i[8`csm"8NN&[*>Or6@@NT7qOtR<AV\[7mRQfk$s0,HQi,c8LOb@3N1`2dm)^"XnJ''?
%GqdB^>P(urV[sjbQ8uaaa7ue+Q%5?iTb'Amab+_=0eGP)dY0>\`K4;@ndrUL3/d33$\m*c\.afB'k:b[SNQAWq.r>N9K[t4/.F6"
%4;0Rms5MiTjFbL.r^4Qg4aZ"eFaLmn]QN^8-L^.W*saZZ?Te283,@'LX8aQM9o-.d)o3i&fW+R`6Y=a6J^IgaIHi]Jj'_d@[+8gI
%FRdhO;m#^3R7!n,WqZ&;(L[IN@)4UI(Iq6(hp.JP2Xn<BF>=(AVsEt1r]tAI^TajfB!gMi;ukQXV"2"+\Y2lT/S8-F*P!-qGlO_q
%4oNFhFP"Pc$3FVJ0Qu!4O%hS2kKL7^d;aL5=)V*AS?Zl-#SRa@-5H:L#s>999;oo"X9)MN)46:Qc:]FA7.?[FMEbaraRrjIVo`%<
%Zd08S5D*VpOn?R,iVH#Pm@WHO!F_lniK;DX^Y<N]VSN,cWf!s%D-W?[/fEe[E_ZKOoB'`a;0@@-TD=quh=I7;T\hP5ah.4LAU_ku
%W\/!g8D!LXdmM0YO.^jdMJ9ref9DZi<@42<PA/TM]#GeY^p07>\f_0r;QMdBXIln8DqN0V@FAE%ko`c#ZhSKR/:!RWmG]m`9CP6F
%Jj?P)q,V8FAS8+d`#?85H#LGr95r<B+Z"Ale:\QI0DQBOI&l/+:.JOimVXNDBK//e$3A`f+Ck@)1(UC&"XT;V$..0IH':-nGFU/J
%i]EiT?.0M4`A"c<AaE1\XCZUUR0k!@P@9l>TAs[l.\"=AjiglSm9&#!NoP1o/.U:r35AVdjtp)34K`4tRZP%gqE7*;eSgM'X`[im
%Sj":T:jVNnQf^(=ES,?DQ^L4QgN,E`s3VE(69-T+Ih9?GZ('RXh8*T)!K1,=e#iSp,>aLhIIHoWD8:9fmpe@+ZC?P]V'91-+")-r
%r7fDZWjSFH<iahu?GsV\D@b=hG4"E\hnF%b#HbG\b5pq2pea`>Xq""#@<\oLR!%/c?51\ff/t!dGhfC/CK\,@Fdmp@:,!Q+gR2<]
%fCJb#%*I>I[-b<N!?'8-'*>&:Ta^SoFF<`C!I:aqfZep4mSP[(*u&PA>A&-XctW7?h-cW>r&dBF-r/.Yjl9BG]I8Y8b+/?oeOmO+
%##m<or"it`"cVU80$og//KNitl9BAM?j?,-koA?<_mDS_C&R(6g/q2F7aXmOmfTK:D*tM7J"/+;oi%ThoPZCe:a:M<>_QR^+fN20
%`g<B0HD&53TXk,<2g_q@BTqg,]?&L'PSK8C]?4uWqt7NJdW^3VYRmst@>K\-\(>>"q(>qf'ZmJ+j!\jB2U8YQY4I]QO-Om[_M<r_
%4lOM\7kdU2$"L*;1MlVNie\nXrmL38@CrY!?,r[GQN6$?%j)\oFZS9r&?L-T(mAkXg:mi6<*Gim;iSUDoCR1+(V];L[L6i;F!o^c
%EKK!WVV)=+/Q6GJR^]l9T'n;P5*D!`?ku3pL(M<s^]g6("a<-N%\6Aub>$71GC1Ur_\5U`*#s>6[n3>`[@:1JP=2O"a<g>fG#?G5
%:NRCUmX`!54IR]>*$o2"LYd54r$\B"+qlrk81k>C3eG+TQ>uD0o8MRmJ8+&nFRdgmL#IjhHKMQ./+?!h`s?AJ?&&e;*\3no7geH(
%_k..,r_r;1GR>r0'P98n:^$.YlIi1YDYNH[;L$6g5k4ds\-jYeKd1![eHXZdH8@PsmHW>1H!*%UoHbX^[bI?hXT>[o[LP4PK?Spn
%Ns+mY]J)^Z[&c(g\g+#<VTQ313?"LPCST7Z+Rm^CqiZsoE0jG3!R?.4SH3B8[>Un&'.cTr8[N,J[PkEeJo%"0l:qsW]6dTE2=1#R
%=:Wi;cC$Z]9"gFj[$kC#HPjqc65Mq9K76:jLIV>gWnCDXkIs(h"+WK=ZZ=aar%A>o@_p-6_usTQ!s=j3]:HW/$M_pQr7VsHX":&a
%i&=0P-j&I.8s&3A=:eK9edEaqQ*j_r7p)//B[4S#dnjT00LKU"o@>l\N&Mm[)CHY&(PXSUG,IFM<$:6>#"1/;6KV`>FC6a7!/ot`
%!I2[hkX4;JG3>kE_)qa?J9_3(&b?.`+jAstI[JK2f7=d"6IJ^eq7PD(<pT.uH)irG`j`Q_%,/LYFN:=N2[ea]_s8YbMOo4ro\Xi#
%1LQV!G)-7687]X=d'[:K<Y<BS!0@HbU\i"-K@5gRTF_@]WHPib"2WtB95n2Eic?OYbt95HASdXOYE<ETJ8Fm2rLbB97c<I>FW.)O
%!9==qK(g>O]L?lug22V&aGUV!@45aWe"'GD_c2p$Mr>QPli%_<]!2YK+CL/_)#Pn*5jrqG9cXk`iTNV\1a6$-gX]f,JePRUK-ET0
%WZ7#j!9g>uBZ3$f7Z]>7pL9\O"Ki5b4?(<VTj[LZ'u.5_J>4)3LMGEk^IG1`!EGTEOXp[/?EHD;)NlE5i[VW]5\)Lf3kUJkf&Q8^
%-8[9E=J0R3bbn0l2kBV\>p0^=XG3.gBUGZ<@Jd7c*+@2;hJA2QW\_$Z[Z>XF)PGWq[&ZsBl&N&rD/T"LRqKYCG[PIqMHR1g*+Hn7
%G.Z;-N/E#hU-$Bg\(]BHT:^U6A/7('BU\.sQ3kcu.bHOE''pH`+-pBQ?t8O'G9$QnAY_U8.(e1)$aM"m`qf`*.tVXl^9ZL:1K34s
%HO5kGf?V\p<F^gGc01M4ZmID(![,^;CX&Lhjd!E^A<c[.1IAcIX;,J9Q2@6JY>[Z)3p2M6H2W&6\.4?1Be2O3_@aRKaXOsN+q4W9
%*fNpCOD&VlN"B#Zi\6OMepcW!Eab\p,q]&6-`6S5#]2o4mT$@u8Rq@,UioXkGXNIkB3[p]!OLJD3\<Bc/K'T*dt.%lfn2tM#Sr85
%^T8;Ri`E7gD+MW6'jc",M9IOR7QcFjT'gbu/7Vl9CA2sa/R/a=c8,:pP$%W<9[aPQ8H]\JDtob?Xkb'VrJJJ@I*GT?gehL,gXM+R
%"B@L)CdEKSs6.r&`lYR-lh:4@=3@<:ebj#lX)Y[ndCf4RHuETdEM6uW]+=SD02).o[EZ0bchGp*CV-2\mqm7E'r,#spWNf<WXgAS
%>Pqg?=HOYBY(+\[g"]\DG;m,qnl$B;F+*dha+J]gb?qo0Zb*cA3_+nXZfdT_2Z*8Y@'&2L#8kf9Q5A,2O'B<WpFggbj6B7>dG"!M
%[Z>a$bKohdrGkb`G`r)5Is_=8'[NUWB<f-51otcYh4%34F2s"$]A]NBE,/f=2m1;12V5On`c?'1TjM-]Wh.*^`38a@e,=acr6'qZ
%YA`"LYFXi0H\G,Q,7AMPgS853mJbbnGk(Q^G6CH\$XYR$[c#o8+3!X4p:^C(q>FaiB_=ZT,OsWnp0eg(qr2Xm<70PR(,".doo7aY
%nn:&`HKEoPB&W:7El%!)H2d6^K?Np[`P03-[H5j4mNisD8Pa2u;g\:VXnMEf2.'^8nT_IJr4/HS4aQ`&$!>ndIs%a+0`(XX0:TLa
%j`+f+g"uR(U[e._bqP`4c]qb5ZH\]=esP?+V>.(f%QJ)`G)R)'WijkZ:MgXugO$B=]&Mf:`^,7+n6pNLZ`q.5i2!_hBm<fdEVkt!
%i42]uI9k]S=8fKQT0;s9rB>-P!(kN0-P'$)TC`fq9bU\&4Fac7YIY);Y.?-g0+[c6:[O-3ja5/m4#i1Z(VWd#"9QJ3BD8l8qIB>H
%H,KThEDkNLn:d.U2r:&%6/DeTIP39;IpQ<@M_?]S\K.5'gK:Y.J,PY.l!k/#mH6?F(kBcDnko/pTYM>8*?p`C;O_h_?T]WX(S0t%
%<WB"IYN1_%hj98a:Nq8PD#<b?]RKSJNHMJprbZPfO?Y.b+4YgVrqNdB!Q4!K&'(T<Tc`sma3lD@I[=-nkP!*<mjG#eg3<M[qKZT0
%U0K[-_LREf^DY%"[1s*`*rTd=jS!eim$*E$eK)pUO4SadTF1>Fff.)-hUt+Q8^DP.hHW;5h9R+VlLbC=M_J5jKI;`QSU4[E7kfSh
%$b46SoWbuH+b/6k;3]4q2\jbnNGfct,3[+3Q0!D:qAPW#R(8r14^i=&H#_O)';(@)O]AT.[rSCM)!T;bEdRahH1?80S!,aj5KZV0
%^M\!a_Apu#LR(kFI+2IP>j@)GV<-NL3RCip#9R,[ClV+f<7FX0?&_?>gk2H?`FZ#aXB47"k)>Al8Q60)0C/'nS_r<SXfe0sEFQ2U
%S=K]iP<7X%/q^ESDADcT+0OVm,u=V[l[s0ePG][!ns6jGW'7nIo$TgP]j0&Nb0/,?^>U]?J2Eq"EaC@52']<.m_:"$P@ZE)XjF#c
%Vr-3(o&"fE7_[`,f?,+@^4-E:ln&#SZqDpOf5g]7WpqN^G^fH*DYruQY:o?N\u'PJGlIK7%f!Ib\Oe?cHiMO#kV0m!QXcl)H1C5a
%gA>g-1\L;apNE7Y%Dt?O*?K^1S)<P4)e@b+^OX3)!3K>N7fI/->q9i0YslLYIlr*fMeiFO,+*6pSb5X6c[MAeSgSOn'md,t>QBB$
%d/\^mD0^QAHOfb]nj(C)If345khE.iHe$8egY@$Va9'GlG@1r)+6D1rrb:f!J#iiU#oILtZns[&Q*j+eAE$"*f3&($A9GfBYog3V
%bEn!cZJ'Q>.LT%pd]3o)/GQQb$%KZL@[6<?U3lRl`H,^>%DWAG$M4d^Tprt^ZO[Ebkirr]H?hc*dT,P^<OF7B/6N5G0D<'Z^T'<h
%FchGdp854'q#7i$k>M;8g5m60q8:4L3"-tO1#I9:Nk3rh&VAki],T+nSTB-^r:C&><V,Y/hYm_0]R9gq537B)La:8tj(!9M+sd$i
%WIJ0)Dtihllf?\=OFXYZhg-:cQT.$NJV+N*DiQg+Lc;/YO`TA]*ecQTd3Xad=q8XTnH:,5=!&O!k-pmeFGht*+(cepKLCW'd!7Pl
%)?G>!?b[1=6H%8*+o2D!qfm&2]+ajlo+fXZ8-c]R0E^&'n2j]E5"qW'e<,["a8IrPU"]m%l2s-B<7&MrD\HeQA>-b'T`]&BgYDm_
%@0ST;5YHt66<A$L-Q7`s8b1[Lq"pP%,fF;`OY75-C-6l`-M&ZRS0Kf,dMMPp`C\S;i/W<o!5b^$dK8MNbCTck5pJg0i'S`Z2a4,d
%:9/bj'ZM=4">hrA"F#)1IW<Hl51p%`iPd]i)Z9Kg!sjVn1^I4qkfpu^@YffWPWWJQ\3buD4I?*T$rB>N"af03+])!$dfumnaI!XU
%Y[;tYJ`'faJ9L'r3(/1X4+=ZfKON#mO.Be%9[74sUKP,Sq"'F"o!c:CCZTn=ZBp_q[Usgdam)5!YDQDN-P,'?'P^uN2bTF:+-3q4
%'g`tDG<g]e##K:GQl$hqT>W$`KPL$dFm0&?;%L+%4pO82PTEH\4ZD7]?F1'+rPO]8SXgjJOehoSP<3RrpG\/IG0V4iCU!:^bEV7m
%]p@r])lql=Xm"<5pQn'0hY[jBK9n&<a%u='MS(Da].AGT;08Co?4'!VnZ0A=nAYnQ5F_NOX^[q*kqqP_<k[;*giH".mo?l=[InY1
%n8f(Z>D:QnqtQYk'ZFdKE;LDk.;tShk>F\fcgsL1qq%kkTebrecH@>\HFn.X#'00>jXK=%Zc_\&&+ZBEUi:Q.oI"o\S8<qU6BqIr
%$/j"Q`LX[@(e.UgbJ2a.oHaHKiCf4UGNmWn1L,A$pdDZ*3-h5)n6Fkm(:V$tG(aq>#]e1V`k2*8EGkgD%d6#KdjQR%'F9F"Z67HC
%kIUZ2T*efu\pj/uP-%,K"[&@SimuY3"-`)r#$,4`n85#2e\6NF=j--rCRu+DrU(0;W\tpIW4A]"jtb_@nUjgO?gPt*DsphHG(';,
%!Ie=REOC[sSjnq'j4/e!jl^u+JFr**VZL525]CloJ$l`oH.0U?l;*X%9Okg!YN0?jJd]<<95E'I>s_E%6IRCGp3OHc;>QgU4#4rc
%^H?d</iEO`j9;SmErB0eq"0ba<-DX1h]-GRa@dTnY?a9f*u8m8?6?ku$A!E[jLZ$MKrmk.ERd98OETC3qGqgtl.k4DR,Z,E*]p_f
%K?KaTcK/8QD=?NhNNb%K=T=-OBL+\g$JPVfqsF=)]\:\)kWN#(G41.GnEF`6>2NKU0-%#WZF(ZW/Zii4m_='NI^6>TK'>=IHu,Y5
%"CH:R/tXcP]0ohfc&K'5c-;G2bE(4,Q]Gn>%B](Q$u%hllQO66Q`J),SL<<(mBV,CoUNhpdl>jB4,qYFN1S.sSpTOE`Gs@/$-K--
%BoK>(cX[%oSB6l-[a#8gDG;dUYC;'?X7W.ukqYPE!c+>m^MiOk5PJcq_R9e5Fb3e,k.TC.V%3gEgs-.*jaqlgo=A,,2QRWh"W-VD
%cQBo`MM7B-\=m/Eh0Y`iq?:%'m^#Z[Bku#'7ukcmQNp=Xp$<iSIZKp`/@,!GXnef8qK:a1TRUs"o1/fGU@5rOII.+=X?Tqi:0?97
%K<UqJ3d^_.(634PKR]_jKBpBu00lf9g.,RacJa]kV<!lTm[p%:\?_.'kBs7.=dD87e4&[4R)0LMAO@VmMh:M-F5t6o8&ajbm8I><
%pHG'noAngRGBgc*hHJS.@cX^p[3Gl0gqc+">29+aqZJ.*6NR9m]l=bEmOC%`b<17Gn>La2i6d>>3Nt&A2]o1:?S*l^"sK$H?<f$d
%JQc1Mf?YN[?,hi'Jm1D)QBn0,kN))`=9(e@50\T5I.skso7u0+8RL9%Hb8CW]QTfN%:+4+:YPfT[Gc;eqcbO+msRDb?`Q>=ZNl'<
%$76hUieNjria`](eX"h%Zp&mZ"nM)<n[c$?*s#Mg^+N]b>Jj(kg?X[i>%si+Ob&qM=RJ^1J(\T/SifKhn(cP(kgG)9pm/Td*g"%]
%hes69(Z)i]-jVtnJRQ!YGOBm2W;=OX8:'l_&37>88QfHl8Xgda`5j)0'6QgsT9Xo=gaL`t[3.MR"o7i-4^RIPegf2;5L_s;ebrbE
%q0"8`Qal&B[jl61n,+WXmB;du2V7P;0e@M\gK<7tXBL%Zd$m&U9D(.O@sr]-qWRPm7C[)\mlWdg=Q&M#>jHG1M&7E[Q<k7oIsqmS
%#Fo+:$``dqRB?[](/bk4.T\[V):fsbPc)Ll2r,K\olT_Pq4M!6ICUaB2D5PI5((AYF4Sg@>WbRFa`g?>NjnEH7^4=K"EsUWrQV_`
%k@2nVG><kOC=#IB?@"s/!aRjs*)3KsUkSRsgsO,BIBTpRgt6q`q;^N3#@CF;=Ns_[T/aIa"o8.2oA04^?g.Euri0>L*`c?$f3Wqs
%Kbf8apiW[q0/j:,_^'`grlE3nq$-W3O9coZT3aQc^NmJ8<081Sp\Vpr?b>.Rb#oT&_8ap@Kt!_>++E8iqp2Z9]m4Z@4PJ?+r7*i4
%"H0015QH$+[!7&TJUC9TD[99]]DL^EejB2hc=Z7Uf3\![e]F!&U(msuXTa1G@L4,X]e:2I?RUQUk_k#BjB!%>Poma??B\pelE[qm
%I)1BD_pWfR\ao/ufC*gPL=r`$?ip0B%EA:>ZgecOM>hPF?n+qfQV=NfIKI@6f([r`b:A[6^UW"QGi!ll:.d/rJoB2;iJ^%eY'e`k
%^K!oeD0>"N=q)5fL-Q$pY@[MhejJ7Hml!fRXU.@uAsX^f4^HJWkDZ1L1<AFl6*?J7+#*^S$ug^:N:c(QYR!O[FKr9`XFP4PIWR78
%#VU)H-CF-CmIq\I83N?`a3C,"^F6ht^%s(@.N^^=HPSPI[XWPk.kQ_QFKSGE+#`HW5a4Tqj_(b\^(M7c53PYRDJVM49Z)9BX5egF
%j%1?[`o5Y:q*mlI-<./#HatE`lh0t\BW=;\a3R@jd`,cO_KOV1o*`+?mGK4T#Q39/""AHHg?fVVp4$&T!:$TQ@ikCa)WjnrEaShJ
%REiK@\RZbqN(+pS?68N43k^"!Gk;9IqsQS#*2*om&f'bar@VZ:akRC`ek\o]qi@(pLL4-Ci:t3!!e%cfo5Wq:N*aei*;X2eUL%7>
%"8(fU8($!+17^CqIhZ4UXDcn14R[a+!aA5A4^3<?oDpb8f2$/mei);cf)mIoet;580_P:>nc#8I1UjqYI'14V<oDNn])m?6kcR!_
%NuC:YiK?1mo,eE#_L,4#_PXZ31XFbkJqkK'qsf[E&q[ob[!pkU3b3r^!EAAVnYpJk?`>41d=3k9#_MTAEd@6X2#XA&>TKrdF;nf2
%kgkh5Qmh<P)P+q\Vek_]N`J&(2A]/X&KNH'qY*d,k%aTR`ef"0ahTnoS\08KXm5B3IX,QE0+'??Q_1;PH,<n!^U`l(q-)S,fspK8
%$'3rR?FCr@2V5^VKlGOdZRj3K5:U(55@/m[5&]Tole4p<P//3oml.jOn*_':?7B"<a;mFb\)Rmu[k-LrUN(\8DZX2&=n+i-mr,<"
%5M,Pj5G")^9mZB*]MYiA)X/1jhaW#(/@93A\o,f5n7_XNVK'@Ab9I"T0*UC7g=k1o5Q&)BU`e3&j`jM.T,cqXX6b)srQ"Y,OA.AM
%'`U/6l`]qGZMa)_rt<qJ4Jq1R[CL=Z%`ho?fj#`a:KL=WqJR0kc*N>2Ds)d+bMU%V%<@<A1(kENh![=\CVTRoLE@;I`4bDjYFag8
%h\sN9qlHjCn%1i1j!7Ud6oKNV!Jf3k\iFJWcIWa;WPl"<j,N*YPM4L.`la(-I*Q!M`\&@`+u*MZqgpog!cm>8'#[oJ$Dk6o0C_X'
%`<Tq.*(&u9I;g"JVfhm4otC.-oR3E<Z<FZafCtVM_=jsZL]RLP^YSq^h).+&jj2F4C"ctXje^g[X&RK5[/Ae/;U&lm^KDU/A&!Rs
%@'BJF[//b%dcq)/,-RRdX+C].^91`%Nf2^@\GG1)Nr@rTAC-6rJ8MO[J::!aSunWe>s0]eWI9"6W12ZVV>oJ+)R1;jiiu<\h@qS$
%X/j5,HJp+^#"\<ScO\0V4*`W+n8Y9N0K2rs%r=WCF&]8`G$NGs)i=/U*;q,%'/-Ccl1Tu`+"aM.ct]@qI:fTlJ,?sCCVI<&;#[ou
%7E-58\bPIH\KkQ!X;<kp]"YlXnk`\?s7Ql"EQW1o#R]a`N`XX4`d^W8_Ip-pYHL+aP$ek:q&@R>>qYLr>;-)E=("'0G>"4a0;5ka
%O4k,H\"uk2Xc&AQi:[ckqUr'_j3(%*Z2DB"_*Z*0Ekik>Q'-@sXc/`\h6i.>L0:'c^<gQl@V35Yn'`Vh<[YeoFPOm%gNZO?n"<cH
%j_&Mif(WeFJ1iu"mZlnDjlX'B'CVbdc,J8[-9o.])n20rc<C3&qUeMGhTbr)D7&)420,8EcW95oGiY_&ml'V_O'JO13jX1Fp+N<W
%4bFmF^:dRR<Ome1S3jG3CT#ab-DGU_A,dH5kU;+@8]$k_M$Ul8U-iAh9G4TG>0SPaqV86*G\cKMOfNnoT<AjAk:E3-KBKaLK3<eV
%DL!a`LI#m&"[=G$gq0`.DWOE83fZ7aBrIX_2O/H<9pe9N/IU@R9mt+LK3#ZDEl6;_>RE/#,W/ae,"?(lTa"@H-T`\h']u?_2`)?B
%j0k:$3]:Q6G[,=&h5l-rLrq)oLZg,m-"YRS[h(kLFt;#6:>?_&jolQXa#:c@/D+fgGZ2j)\Y7aCaZg@g!S'\']32O'UGfW-h&^cT
%NBQ'3S,i6_-M)Co;u%8PO%4-P%`.9Pa#ORIim>4I&K^>Gp_3a/:Q3>&A<X$/Ku"Po3!c8s>n],jC15T8!S(SE.W&gX#"bi]6;_q>
%&!ZPn$F;R-/'&?3;(Q@)h_`%Z6r\p+\dA;;o:$?30JY7i;@pM:]4@<O\6UUeb5r@sK7l^(/\/M=GG_B,8+(8$\hG2?Q&N>ifB"2b
%N,bbh#f9E+b8eiHC*"0sAuHcT&@nf=-L?=aaho%;p,;&X32pp@*St-o^n*g)h99u!,3XjJ$<Rtl?mQKQro%&@,3Y(_<,fK*!n5\M
%3"_Ad,C1&*W/6VaPtZEQ[GS/@"A`!G=-A(;5\rB;%S%1.7j5,L4^Q9]s6?1>6j5(*P:0?BngLUV"llY_&O6/GH0PbUqbZA[01eO;
%_h0JFYE7=83jn[K,749E%"-*PF7ud!r(LM)\=Kf\Y7eYI)u(%R61IQ2FF(u(s)Hi!gMQI+K/cDe38ko9OYhWF%CCk\H4omJ-dM2C
%%1.D/a;!Db`F>P)@&t]"G9p!a&,DVD^KuuXnf*5nF@Hs"i&E]RFN>IIcd!JpYs]d.0ao+G(Ck!MSE%eAj/ctHl:Jhu2`3T2:=`+3
%PAe&CET1(_"@1PXd0/Bf\,gV\\9ZRg_r/&TllDfk'*dI$3ZY]U?OTT#s3T/a6dQ`mCuT.)BuWRYYb#!N90=RQpgoc-D8\s<5L*TM
%hQ$Z[\]C)iEFkn)>/6f]]=i$WeK<H/^"p?Di(K-L%C4u=SrnHUD7f$SQ*;;cqYFLtSP>5*,V@q9QEZF^_L%`MnoFI7F5NV1hk[/\
%$k**5=6F0PCtq1k([Fr`:9KL!Q&N;=fkh?tJ4X_ce%a]k!fmP'4G=_7rR*.Mq:7bo&[=R>Qhoh5fDD1r=g!bApZ#TQ-b1W-kV)l"
%'n#lgD*KhL3d[8j?_gBg/mLNOHcJ@I4ufa[EVE4IaEu:H.lK36b0$a,YgnMbD%(Q+IeSl"l<.&ni.@i+=]<m_*)L>!n]c$9RSbAY
%LU/<pP9FQr"2YgV`qLfHA/-q$mbUh2Q+rb;1p/SN;q4Q9kY>sc#-K(?6*kB=2$p)ApW!\i#:1&(opTQ!+$m)1+N*RtL0V5GIhmhl
%Iu2TYI+uTW*ibV9mpnicmP]p:H;Lj\6h[;_@k!;WDn``.8%*MIYf'lK^+(pdc)lf-2f?>q!e?d2Ue5KM5G5jVol83?/:(#?dkk"c
%00E3F6e1rNa1_4mo%*u<N\T5..enHN+AbtphhKJ^=NFVO?U21ADH3B1@aS4$(=n@oePO4!8]+Sk[5"d)?Fqr%E`MJTs6`Rl`p;0C
%cL?8T0X(t01r9\eT`NAL)U9&,%@VCc-VK";%7DG_6;mpQeRSr-LgmP&0a<N&WT`@/J@pnO('YA>(j-U/fF9\<QRs*)7d-:ll78$[
%&TI6.#W!Q0Y8)Bm#kMsFaS,oGZ)A5q)<_$`^9<<[MpQ\k0:aOsVZd"/X[JK^hds'XWEN>(>oCEo9l-L0)uL.Y.X9gYcjcqN@ZoXN
%?FW]A?F[,U$OaZf@Ooo=kZS_An69-KK"jH2K5Q'G#'j&gT!:sD`"T"\<C>eM#_Id+.1<7O26mEsZIi^I9;=)Dal?"?TO_&\DY&4<
%[B(_8D1WV[VD)5e<`__#72')IQsj.LFE%kca^pFgi$035jHCi[_JLd@Eb(N+ff7G1RnJ@ZjSsPW'Q1r-;3NR8&^'n&H9lO]0';oD
%Dc8DCC(A(_)A_MF$],CLjXa=I^@QGgVeDanS^E10WDQcZOTE"2(mnkl7HL_4'k,@g!P\hHA]*#W#cn4]#<mo/_/uaMQJ4)AN!<QU
%?kmVto[<%ZX9+DN0a:HNFF$_t(`!r@%q<^579-(TAer&/+:=9,Ddj6pJkIdT3<C-Q1L\]=;Y,=uPIGc)]]BY#I2,)<bi2O_rJ>1%
%p/1_ZXJKp-"O6%?9D91LbVE>\R]A3eijQZW/=biP^/eD!9rc<8=V8GCL$k29hr:2pP"_$;1_,4,\oT!E1)]a,oOZus[&q]:&>Du\
%K#j)[?H'."qB1q85-lD)0F8+30]siAf,VjKICQ`*E%OH^'HXKQY;h%VH)T[ZLa$u4pT<H&J:cCn"pNAlS!\d\r3gi#LkeR;;jlMJ
%e(qfo!$b(2JKl_&1iT`G@$^/u(G>BD`SgtI0hDp)B-jL2Y&Yq$3$G5A@;ndm*"p+Akg(!8N-6ZhkXZ\!TiDcC+-m'>F^&ET&`A88
%GYNjU8-EW9&RkH&Gfg3NH^<)Y5tMklKG,N.Sg9GEj>Z*""MUGYqp&GCDUNf;0TM%pKIAko/]uIP4l.Nt/EEp`R"DLl-J'$sM8=TP
%cnDrT5"#,NNlU=(J-Z,"nO!h\HKr`%O3GVdml:GAo$Bp@S.\R[;n0'A"&R5rN,SW"-o<.kF-q\u<+i?K"7rT^^_ju$=TfKS7UqT$
%KiLG3j<uRne]M?%'\:.QDjq>@*<Q=*$4@>Jd7IXg/Be[EP`5r"c?"mK6m3OL<9c09MJn`gZiN'e@()id64.5e<jZ'r@?:lTrCkD=
%,+sR_i^tI'.V/"q[LZL'`p[*o$BN+g.#ZDbVEgLp\b7J>#u]8^8ts:XS&6!T)a'$-=<EIIC=,Lro-;PDM=usn+BV'ncrdp?gK:>"
%k/k*N(lL,S-ktk.StU>03+sjV]O9n'1[rZ:1igrP8qFqiX:T+l3?gYr=Oo<V@g5<t#)mOH,hP9+GfNrWd>#4Q)M5RD8n,J+@(4O^
%POf*^4(d_tfJu2qSAf#IM^\mW_Eepc\!UFt21Cn78.XaN]dCZ#*</j>_PrJ2dDDN/1eGp[Wb6f);q++f("m[<nLDa967"C:I0>,u
%^.hok--_u@+`LAG$iq(*q^R=SMA\;CKDhMF=TocR2IIJ4/8"-='NiUH&8;PT0aouiif=(4RQTLN<!]OHMKM;%0VM0O_!7@pDB4<4
%_dEq@;U?I`er2m?'Yl:-%!k;t56@os%25IuW)%ti+W1A!K-?Dc!G;bG_iV8,P_Vej:L$bA+_*[2coS$H/S^f5psI!V4hK=FrCbIP
%((7ZimmSPCkH.L3?P<dspcSNibK;O:&Y:\()N5Och(hSDE%8r\N'oY!TsQ%e9rVo#>uU$W;V./EVQ"W2Be_.jL8DknR4F"@7Tp3.
%iLm6+V+4qRMdc/Nb"/WKKp?Y;6kk@M\sWsfV.ieE.:?Xb(.B%:T;LiTYitK[qMhP16!,Ha8jlo-=4U/GO#6N#;ib-Y4]MCKV&k.5
%9K#$J7e9VW=\Xb,51Rg@>$OOj=h)0o@X0NMN7_N%g,#*F9f?I,N_;T5lB2nrq.hO="LqRcZH)T!!)*S>-3oE$Qr*^XWCDFf'cV[_
%:FP4D4GGAK'J%El@V3NFliRO%ikC3!H/\Ufhd#LOqQHj/&R"W-o2(]`93gujPF^8l#"qtOQLIK][kYPNbI]]8\E+541jPIAQ[F(\
%iH8Ms9f=7k>kb'EHo6b2Mq8YLeDmrkf7!J($`rk&)<=gAQA=L$JAF0;O0&B@D;j#P]Id5YK3$AtA>-s]0sgoh^/0b3oVBXfG3.(C
%-a+u9'Xos4!6i46?VBC>&[VhBpl.JW6!l6A;/X=U!2JYHb`&V'o3-ju?+;Rd,Lm-i7,I^@&.=pV1W<p5&Drl[@j6!,VD*)(f'kFK
%s7TiWQTn$f'OjkblCf5?k7]3K`GI*Co&dsCJh^--,VJUqCVcC1!I9boeq1k`3c$Ab'A%hm^bKW@R(*n_$p1[/N!X:97*q=/?qaf5
%-Gmd("_6OqYV6CdCVcCB(+]kTYSN1SCVdk9%'0VBi`\#J2I:"4C_`c>>AM&g-*lhiJg_47<F%Q&-kVmj<7/W4&JW*H?0`@R<sWKd
%]mau*9q&.f@WLRi)_Qbog+Zga`%i/d_9C=pj$M8!]5oYSKRk$jQEH'u0PH':cZBP'U9P6/@2a/_2oTMK$r2=Z]^G_=:@<M.+N))D
%N&$+B!1IFsB9Da%:i)kH$Q0];!TC@d+qns]6kVLCP"6dp3_3dLp&q@fcc7/:oXQ!<Q(D*p`A/.,7\ol`.`bpPohYeuRUB_FOc3()
%8a9KT=9blgBiC+/JK9t,lqsFo<NpGQbh'cU_t3OYa9+k'JqO`HTHG%qfE'4FM<@`+_h/lHm5;sa1%N-fL+$K3qa&F<cMjK%X+H]<
%@7*Sb1r6<i75Q*D.V:@Q6mUVr,(@2@6U)uuq=G-An/GYBVD9dSd8`%7C.qXP#>7ln'4Jp]eO8&0<AbA3g_)CTG2*_:0Ff=oR"a3I
%HAPc-Ki(Le7*o@8bX=aV>%6VgaMo<(r,>(6'NR/41'\OO<,6KNG^kLnY7DA8?Ykn).Bku_RU83U@Y7^c'WP8Eo-_fp>:9g,M,Pag
%<fd5'Q7FZ?RV1U]P7FH]-\J5d^I5Es\csjSP(@]Y%Ks/YPk7eg%2EU(r$l;dIKMA1Xk`/4D@du7JPfAkAl.#_[L-WrEsP/"D.&_?
%YA6LI7!ces$Q_r[#aXf1!k3aR"[23p0Hu/M1hqIc(MDY'8eLYF#tj:qid</`)McFgVOKr*%o&!\#VdKWnjjiZ`Sm!8[=bSc?4W^m
%JScL8*l%kPZl[!f:9ko`"?^Qb5Ql?(H@QRrR.UG&fJ2[m,"RZ!%hJd`[iQZD`TZsp+lJIt3Dk%m<g!:XV.uuf93kffi_gSZ]"$8/
%c'O>]COU!B0<P&H28A$S8N56Y^Mtdg`oA#>U_@1WXJ?5VNa>9nWqhWW8N3g9kHC[#>59+B8XF$YBkETA7ameDh9_%l7%'1A+to0%
%NEMA[8KUF*aG\.tL9JZkO<"KTnfiq4W"jS4r=31sQQVn.<oa^%MSiNV7FJ`o/+V-LBZaB:);sR,7?+Ci1SHb`d_llG-DV)3m@s)O
%%!bS+'gl;CGYt&^Ha'Ts+!bOjYR.MUo30&4ndH8]'13O:jV]ht:K:Y/jgKhD=LjFM-$e@\!c,FL#.[`ijl*]aGpX@8oSh`dH!Y92
%<M%e\XD9SZ]=Qm<n\u$?b6+glHortPAUot"XO,BOY:7=*[l(fNcbJ:CfAho(Zj<W*NBY?J?TqVF>_ugWB./iR7[N8JNP^9/6d((*
%Ps\7iGPkJT%r*pYEFk^JK/(7Xg#FrDg#KJp=6B=f#7Ktt6%YsFK7[,7m@ZP%2F/h*V%C\6></EP\%'5o+494:-9.aE#9C*$06BUO
%#X%O2[P7'h,MGQ4EC[BmYiCaW$_oEHLpf#$kTefu.#^?a9nXO27%5U4hcc=9C?mp?+BScI?nsjI0aJO(N"O0Gpq\.2JPig!,ru-\
%,t/R?2!g6'=Slg$2f,uj#H\O_).J:0RS7!a6Gikn9XZ,[3Wl\h72@Cq0Mu8!WG[Db2#'@jc2\';MHHMR;b(e5%.F-8:(2QL+>Le]
%A;?7)?k^Pui;t%,6;ANS[;)(39:*=t:a2o*''GGlUj>5P6'`a9-V,;,2?kV-cg2bjoqW3Qd%N]NU<?>L_.6]+&kWS+aj=:(&6]s=
%AiG;I&hI_(8=+obbWmGX7tD:S]tsq6?Oqe]ce$_j:D>5a&k_5:.=2@M169Q6p+Ogn9<QIu]`ncp6pAE\;!Mt.X\jr9L"Jqbi8o[F
%&CN!rE+j]KcA/+q*&o0Cp&>ZPisd('6%.$+DfC$[aI55pQDn(nW,_Jj6Za^Z25EDPm;,>,b7Nu\,&Br$c4K;_,&Br$c4K;_,&GJl
%4@?3rM6J^MndMee(<.N/-I37TjFu8@YU7[-fAo@s)!"#f-;Oab'G]4F;,F%=jE^@%nb_H4>a5C+Q4ub'X)`q9Sg`IQ@H6Z@"i_@J
%,/tFg4Q@rZ/kAH/'h&5fc'olB0JJnI@=heXW#oKW!_]Y?p+<N3&;r6Lac`._Lc4/^$d@Gp'R1-/eJ<'2.+QR%gT0Xkm1!m!DK(BO
%-_H68O-cbk./5.9nEcNM69Ss8`7>,^=nB3_"=I_7KamWSJho)c[jJTnX=u,tB-Yb[BR6p<A9tL(Uf""^;1;*^LN6%.#1d[Ws3KPg
%Us4nb>&GWFOSMIa6u)',H5E/ZmseM'kQiRN;P^L%jl`O5jrZ9&Ysl]#TY<9FWj>L2:X445T"g0A(m=dJ<n>S%.l?/+X\?9S*mn[/
%<`%@k@"m)(^&olB%ort[-c)qI_$UG0QZ-4$@"lDo$<Cg]X:TV`_$\G>'b64J!@ou;<X?ns@"maZ$AVZpJ/+L`h?E%#ZR<B!]Fjpg
%5WnJTnT^+@HdpfFhB)@`W4,:1rAj01$1pB3^*h;%"T&*4&FY*;T^N#>pGUBBhVJRWo=V7l]XKW3'-LWQ5eIZlHNiCd&&c)<oGJ5/
%D7K$LM"eDIO%],T7),Kio]%(,J+""1&74ja?9rh\KCBA"_[?aRGnAhhPAu!A"Q=de(/5@s_':sjn<sU@S\4]Nfg'd(3-#[cpZ`s:
%n=D^&kJ$*^iB:MpmfgSO,U=T;Du=g8rD3\U%o[+Fp>W;B7LJ&rUBV"\I,$Dto-98`D$^2)Tm_p-Yp-Zi48<)fE%i/eTc,?[WJh`,
%Gk5o6#l9\D=FE1I^DlrRL>%AOr#WmNVu_?[<5U@tW;&9dUsN1+p^Z]944O!-h[MSJ;@VhF,t2pD;Btt^*`r!Zr5PO76RGB/CN#YI
%H6&,HkZqML-6*[?Z$/[.R(Bp=$!BT'<'N:)2C)M0a[,AN[)#eC?SP01.n6K=H8cp)7,@cs,L,281i;f2R<?`U;^$QL*LC,b^"XLP
%pHA4F3Bt=9)=&[&43r;0]o0OifK7E*LV<;lGM'O[KM1Z;AA-">`?ni"ml^%Zp<M"<O'qF$ji2fjB^8,H-.G87PSc<GO,SWhf=f1S
%*&4m`D&f`Ple\.E-=75P37)stFYmG`I-EM9F4aiBhdSDp09tqt)3"`493N(I$$hHJ%ARHmgtl9i%f:`1P?iV@(Jm-9!@.^N@6+[U
%PrnIl+Uj^fH(/+U>!NFM4>GI-`HQ.I_?dJXgfO)Z_P!9WW+0IXj;_Ou2e<mo!0/B;e_6qm$<$.^%\4Tg[W;XP:B_;#$jC^H5g?ZZ
%bgcc/hj5%'+j2;;i9%U,(N6HOo*&Dab[mUL-d3!g(Pq#9S,P/T:-X;:U,SOU9#aTA@*Qt+d_>*#H@F4d]E#nA,D',faV:(2hNS+n
%213"&o(Qr8s3rB"b\d(<\:8uXZu5=pMq8P"jgp;Y);>B.2pZgeEV$he&NA$_#HdU1GL3qRL.c2c*/86Bh4Y-VcoTML%U/$Cl2k.%
%)t<_8bOZ9X_d^lTU>OsH[%umAi*T?s$HEjb+<1Q$R0(qGWNl'hh,fc,gZ;DoH,7T#EPbY$rC/tFEP/:oRmMIuiXdZj=!uKD\;!NY
%h,BcY[@tQf&+TNs\rN@UkrL&)K?AM!\(bTLWoYMeo-WW9PuUROWjFu*VI&E-CR`p/ot;PiZ@3IHjYVR&@6^aGR<2`g6+V[+<`$+;
%UbOagi.r:X>H$2p)]PMt;ko3Z1!Lj/oMO=sGhTpAQ@:R,@*_c!h`qU7oco9D0n06Z#g@K(K*1^&`#pbk5R[__%E.2OLhhf4@(q71
%**R=k0aQ!i_)+B%Ip+PnLCnWh(43F@UW"9+p1U^$MuCuN@S]tkM97tY\c3+9\UTZmqkKp,G<!,0p.cTtkIn^J7Fl5o>_pPYi8F%?
%Ee]3n)k22j_**h'j4HJSc2US[jsS"$5&tHZgb!b02fQ6Yom[Ep4)l"l_qdLqDC40+i)a1"h+li(*q&`Q4#Z&8YE%Id\D+h=]8!p\
%^<LR#G8mS>p[(c\2Ws$jCnV4&&9sAmGX?G8'HoJ/NIWs7I%o3Y,E=%OM3'Zm7aTnOPJbuDQ!cBSfB/:B)(@n>PSui+p:)%IrQ+;\
%I5r=g45a=G&"'i3*oLqT(!t0drRi!;[1<GBgCPJ!IeT96+#!jXQ]_hg+k2$bRu\MIc+Yn]XsoR5/Y;D\@F^V8%E:!e6Ro56J8nMf
%"0WkWZ\Qu4EE"9-qks0bqA%90f22=o89%ar)GtDGpk5j(7i]V]bbT![kNf3jDE<ICj`G<f"jS]tb&_uhF#2*gSD.TQ!9Y,bDfBS!
%hCG+#@(jCe"l:2ggS"pT34B"U--ko)KM.h>i4Zt;Kj"9rS/YM3.Z%jZ_GFN)6=Q$c2$QU2^(!FZL=?E7>!jcYHJ=0bgXGcBcc2X3
%n1)nmXZi[A8Ah9_h]5b@ZK4GU/WWDBVud"J^1e=<+P^U;/Rne.[M`17KXoDsdIoZ5I)\%7^.`8:I2*#3_:X_*[@nYDS:cLH7Q\[n
%AI$GgFn&bm[nm6;p3O;+IX%`*B]D&m8/ps\BBlkB+<.1!JUcjkNcE^g*DB:%g%$<+2?p(X`@r;])R@VCfS0qWdWQ0"OQ@3ECq:%Q
%P@nZRqLZF#dqQ`3Zq[])dE!nDemD1R0;@e-XY\*(4(f'M+EBcPn5oaDW1,:<5m4rsoQQ8$)&EJ+i/m$qbI*B;gADh,Zi7Z+m[o>g
%)s`pToJ5E<>h9Rsa`\bG$bSD1\%m>(E=9E<34QbNK7c7mi<fg6(kt['gp%/%34Qd#"pYqkl3[coqsjQ5+mrj=D(O=/q=/*rD(P!$
%Hh46'c*+E3^WPCqAZq;&_ZD5cJ7cq_h)K<UiSq9ZpWU`ZmJe-A2'qpi'$fPu/AFV(5EH.m110[jkTO:RRbD98r*D^P$]rYeDk=gi
%MQoHYNOO]EOZ'?>?u;9?:dpccUT+d[aP//2PJ4Ug/[SC.NH95"otc`6XOj>taAkiU\/DG^iYU)eIR+6tWk(W1&NJg6(gKO@Q3o[C
%>9;=_.,67a5AA_V7<+:'rEDYTf:iZD(i9rRfB<9Gr<-C[R6NqQ7-5G1_3+O+>nEF-d05[,)I7;u`$Mu;1>e`4NiffZ(I[Dd#[Eb0
%5:ls2iu#<s_`\q+d;Y/$HSjNQiVk57pI+nMB\sKjH_PpQJ?SjVUO>)r\e!M1pq"7fNNYFJ?K19[[-no?G8osKI,4[eh^cG/EJbg8
%k])K/;lAjB@.-:#MC/$LH:HN=];+P.M7kul1YuU05&lMiH[#*R0!KP4msU,-qo"aUm+mM^p_J4#o].X0GE6,']4(0:U#Y^KhWp8>
%6h8DH#m$o??*Y>DR#mIT9Lu,pHY8C8n=4pFOeaiHH`,AL]rTerU#'RfD2>&%J5o4!^ac0Mm%$:'#Jr[q3auGka70Xd\*[G/3s+o9
%)Gt`OSUdSS'?pKPaEI_#Y9H\dW;2m;$lu3V*#]t@L.8*RMJ%thTZ=cT']5-He/$AS=gq^-jW'Ki?Xc%FHrZn.g&^<$HU-hLd@&Km
%;l!7]Fa,b'A"i%cOlGjY2+$m#nVOWZO#W:ETLm[GcdumggoN3kbLsE'&j5$tmPNnsGWb*c!0:coTA]6%o,Sl*nm:>G4R4"/ch$#P
%nR<.anT^2h)NP](E/hp0]Q\T_5ANK:a.m3m/-Q'Rctg]s%$Hih0S9s3?B:p*LiLVg]4usDBp-_@e*k9fh4W=;C-dBW0;0.L*o]62
%@k@s_>7\+aYZ!?U=DeA#5=9PI(r>9K5sX!5TA&i34$&/:24_WZZh$uE@?\Xj0g[gt<n'DTYgJD@d97*TWRI!9mS%iN3^#VH5<@8E
%ZsfJBV@E7k7s.jAKFTeA6@`r)m(J*N&0SCZkSfIimV5-`(TSa7&Lp(s[.R6%_H'`sd+L1E%\PE)kpcIX9U?B%OL4]`%:,O>S5<Q\
%j7-?O9+0dXUi7C`NmBUaG'"1UOaV@daGCIo<-J\o6?L490t<p98tWk'qj=&$T-68]hs:"8WIVXd'5:LN6ZgIn';@:k%mkB0pF\ks
%H1+(AT(`_VkBZLrH*IgFJ@miMf7:M$'<V=\T(O*HcVN%*+AXrWp]!S8a2m%<_b1@`+D=o5S[+goht:"EY-5]dS\fTnY!FX$4urk;
%D4EPJcpXc(C^O5/ru9'kU3c0)&TK/E#Dn@!/E6AJTeD:3lt*ob1t;hq4r;#%Ji95mhfVQK.E0:hOi$/72dXX,.#Mek$,P>t>)iqe
%<<dApX\%V?PrCY*K5.=b&X:hq"qYr@<.Gg?Qk\t-e!j-EDa)>#Hrs8!XXFS#)4-$<2T0P*p=AT/hEIp4"N9['WuR..\USI.rF2ut
%fr&5m!@oSa7plL1rWK;6R.%ft#Nfg+6=@M..g4]JYem(Gf3j<JHj<\3[,N"*&=>,'EdmTY[%Q38_snfHp?8tU^HMG\d;P(pqh+Oq
%'C'p2I8?g1$2+6.)Xi^sp"c>3mb9hNGb4X6N>Ga$d<HhaGD!oIMtIr+mqol/'oht_7#t.9pdDln:\9jTGTZ`L%Z;,CUDkc@_/[!)
%igk<3n$.*ZpdGjSGAp-VY]qPaI?2AE^lt6i]N63F4VmMEaB`<G*k1>l_rC%p@*<l3ipB*`=1M3P5dc$(1s-ISUnieX;JO/0g#E`>
%B-2+=BhcP*.5bT)3^dI/rn?\j0-i9R2+ia^.]#TcSio7B_ERNO@UDmNnICJd2m2!XZ$8m#=?NET0[gjo^)\mVo%ei8lbc-:T`f3"
%6X"E%"K[^q6R1*:`O!Sob[]NaMJpW_C5_8eXBVm'EfS-)YU)q(JFSlh5^".LXEmJUSk0*;.TV,Va4MuK$ETEMpaA"Ona,e&Z*TKN
%OrkjBC9-OPXD;]WK_4AJA:=h)Y:#q5HT7U;IK7DEekb4KT(rkV(O7[mGb4R<Not]Vi-;L5QZ0UYH4@oQ9t5r<H/:VBStED4K&b7q
%(#:T]`X[[c&oo?1=X!G\b[qh?b1I\DFG%0.oW7k'GTA/O2IB1n)e3t130IBc@e?9JJ^1G/j)oi#3jC?UXOEulljF9N`X/<m60->t
%h2_#`ALI2oN,$N$n)t`0f5qLHXUm2"LL%3]`t7'gVcH;S*3^Fn\.tY*D-_N*2m'G@]?%[WcAj!<ks3B>:++L[H?u>I,r%Z?H1/!<
%`?=7V$W%8[YcNlh.#'K`eVol%et?WXHssbAOF^'E)dP[s/#-P0SZTcn"56qLcD'dLF=K!LS!BZ!(XD-V/k6r"KIUo24tY!N*`Lo?
%+Zs#AkT,7I$UMHn&AjTF:8:sJcF>8,2]=pd*:h:\NsXP<)5=J:^$b<\MT4tMBD";RVd)/(3b/%07-Aja6?Jgn/k"lJn'H<NpC<0!
%gMi"hMo0Ln`]H$9$B=4OhkBT<6sZMVF@1NW0;O#Tb`)d!DfLn"/F0N=Q;cbS]F*QX<VS1Fpc@@kHr:4j0B.*6]TInSBM*,qh$G@p
%ru9'kU3]X)`0ilGjX1Z_!mjMdd0dS.9rFsPL;L,;.+cqIjB\YDSJ#a8=kiJt6NnM/HTT<`hQ0&)a\UFiDZm2/aEtE<MZK[n+QmKS
%l@C,@=J&<)0h>P6`(b&/Q+H3.FjjbN-+B0k->-QrPM6\[?.)r8UO'h2)A^PoI63Y-0d?@qXfGff;J:IcoGa$HZ@7I)0]l/-$A&!_
%V/ThV7O\K&)jE\I]g4(e)KCa7#g@K@KgRAn;$qmM1*#I)mnX>3rAY/Qd;+eLHh?$ef,hX!kd<W?Y<A#]-aNJ7p7B@^O+?]ukfDU$
%q!Pl0'7AtgDnpRZobr2o,'u9,]=ZF]Ja_I8pKk[[O"9k46B<Yh>Id'b$$>p(/*&s>_&p5hh&ZEICXCmoF7C;npOPC_6$EQ0j9g!Q
%o%s,6]+5mk$+bJ+%Gug+%fY3?kjItqIP9((f[N:)DEWU>b#gQE$,pOM.["GtJ3ZR25Tlg+d+s*):il4QPGG;eTKAotNRVh/lt(72
%].t.5YG(`mOTKRGVu_!!+*YVt+*em30;miT"1fF6W#u"%NYp.Fi(dqi<Z4Gh_#KCg?hA<L1A4Q1d,":f/#n;Y.^VZ+%#Rj`gho<Y
%@%I+Q8T@HZU:#6[90.28NDlc])5ct,[j=B.N&i,(R%lg">-r9cN&jr2T%;_+mEiop,1b(pOQ,1H2.5h6is)3H+.8oY4HleiT!,KG
%\OdC]Qd`58'k"X/Uc$El/_J?.n%j12o`MF(@(lZr*I+d'G(K;jC_q>7^ikJ[>_28PXI!>,6PD)gG(KAlC_p^N8&0;TE`Hb>XU&Yn
%P`T$b7?F<cK\D:p*gEE[K]IroL,A!78_ReLc0W%c,Zi@/'$=.'2!iU*^,s!"E\(!@gstr`RKtr1j$)gH/Pct3]`mLi>$,@[TH#3X
%0o?9U^OnU-\]c'>&sWkZYG!45Q6(Wu:mY3qK"WeDA)"CR7;2!B];Y[2Af%l,k2_3S0pcm?UH+W][*8]\BaJ3.RaN1u;df%&O;K"&
%dZ974TneP0&E[;Mg:/hk3aiSP\[BeFlH3p"l\DW1oDI`c2&A">_gG$tG[%R>"V"bbq@l6"0;A(5Xld`k</3CQl;N4tlS1%RW4W\[
%.jRG`;Um3R%E_DJ]!Ig42Z)Uj`rp7n"m'@r?MF3?K\Mc7j[m,oar/fR:i<Sp#NZ$U9i*J3h?;pAmg\&)nD:tJ%W/_-gDu%-&oMo0
%_?J^IYeG\CKo*BkgY%>Zra3bD&<"GXD-JD]6-J!N'`B&+YAm:q$dq?9Y'gXa-b>$kg-]##\T-Is_Sp@>WN*1LJQ,!>MC?$4W3.?'
%VE?M0?@la;#r5l[_OBRIe'oF8qY_OaQS[S^>%GKo9!LgT,h[WVMAE<d@;R\I\5k->@o?:6_&IAUj`8gO2lDA<&umAaFlh,h/p_@a
%NO25:&LW!n;sCn6V=/Gd^5H2oh5%5pED-j:kW)V=LmCPR-44t>),T&[=%OC+ErY"EqR$<W0lBps?NV"$ob2kmAGuS%&=IG:$:j5O
%J3me\"t2mrCOj:,&XNKOaF"(d34@fZTFdNp6?6N*rj7dB%g28A%JOPG8&IJ.ma6!7LAS;6g_9.'idFV8mtpf;&.%aNNq_@[n31Nh
%Ja`a02$iZdH3qHHn\/cMhJL&(6$VjnIP2hVa";VmU;nk^?/;6I"3:;_/XgXkkSmgFnW(?$,olBtd<H&>qnt?I38W%5\U`_2^%X)u
%mh9?Zi-6Vei`eD!d?hIuj#s!]mfpfW#NJpI[Z#Lr-.J\A6`"gtjTuZ";M5B+28\nMnVO0MO%b_F-Go;;)W>q;N5&QiE4dqEZ%RG1
%7Z-+RV+*G94mn%p5OpjE?V\Z3%ZWKD-<1eAJ39Yt8=i^,W!S4+lKcjOG697s+Fe_/R(QkQ%g+u1cBNDf)50MnSiptY*rX#&\:tjJ
%g,iYQSU)<?F')bj_aZdgUK+&+g5XCU(95d%Yq[`T=^0cG-k@E;8[P*%+iVi+C'<YOitH3@+.8oY5a/4mT!-VW\Og5PQa:]--&=Z3
%3m@=],#:3`5i`gK-\sn2I##e$]U+F:c[(Afo=T:']\%m16saE;7c_N8>U/f%mi<Uuce8mQnn?\t92n/)oUYP.S%1LL;E_n@`Bg4t
%bqVNi8\9XTjWI.gAolJo].lW2W1u<-8*C.k0=cc)Ncsj2!8Sdk'Im'iUZSQk.Y>1&!BTEaUpkLJ]!641;9a@a*F2%mR]^)LWWCRi
%W0/es#3Z9AC/'Na2;5;LNR.Et:,gJ01OVFPo^m4[i(W=]#'%5A2Up1leN&KF3D=f2dCDPGef5[I+iAUiqLq;iF>Y2<IoUHC.28]\
%WMNFa_U_`rce0M4hOcCMkpH7U9Rd[bY\?Z9$klOLYKKeX/>DS-V:1uhh:"`>$BWt^9T;fsl;FAj+fqU.[$aAGN/PPk'gWc8jkIfY
%C&JIc=mo\+p.kkP%=plfH6&MSY++@>Z$d1Ro=T:`3R<$gSFaC;?p)b^#KD[=\-1j2@CQO%*L^pN`q-;#^j(=&Y/#:n*P_UjU-?TX
%`a:6mn"2<pXD5LIoQM"^`\doQ8-ct8[OHHljP#=l&unjRNUoUL:4]B-F(//Hs$gm#3Ls0c9kg2q]Yl!(O-fXA'NVd-1f_R5Xcu1Q
%MN[jnm*4:L]i0aK-JFKhh\a.t9aIVK&1f<PS.$-<n4(u(Tj798c)[N9Xf?EQTSZ9^)P]qW&N@E%9_<oT6n\gS7<Q)6/0\_3&s4]8
%rQmJM8+ib$/ga(D-,UaQ'uMaKpTH0M?]7oK871KT%8K2l5Jeido-ZMO^jLo93&"_"'E[k8:*K,`i"QZ\\Afs#ju]*MTbZ0=Ktr'R
%NUrA.Va]Wp*/XEg[n"+plKqGeO*Z0&gRk7tSflo(jElK+s6G;bruQac7gJkX&:!s:SHq@(H\9+lXOd`j&ELGhi8$it%"\.2eG"j9
%Heb=8*I?M7hpEJ@8as?Qg`Zp;$U2rIr9iK!>f6#**/sX]]+8/@$,8QH,?OBHPP;eHhgOG$:&*PFHh\Y2GOXRoiHL>QoUE\cg;ZcH
%_XH4(^;%R_oi4mA:K3F=+tQ9a&UnAR:]-`2`0$iQ&UpY-#et-m:5LVi42fO.9oH3]C8;-1;JLmBg#HrmoHUOap>pB9n)/CQE@(,\
%^Jem#h^N[lR+a//![^@M)rPol%FH.fd$AO9"%s(/1F:#6;/4&,g#IhFZ#<<nCW[o;Ms%^R>HafB%_ujI/agXlZpo2Z\hRDnWe'/b
%B2UH8T`f5sA%Rt%K%<J4I$>N]GkUn8f%EP5acFfE8uq.0XD;^m$L,auaSZYZhUZqsmkK(0q#L]G=?jX[H0.0s?KAf<i-Em8%%cXq
%_r/K\>[m1HlSSl"2W5R,kBZMMG^e4m#_PVTpK4?q<-%l,brB6fe;uAREKDSeEt$APZ2^>pL=^DpB62Vq].lE,W-dC%&'qXlR"btu
%K<XHITo.:`n2E\-$BQ1(JSk^T5GN9/j0s4SSO7/\1t,X_n)t]/fCTNaede(m6^On=0fh8SWE#H"s(etdG:cc+g:I&32Qb%S]?%[W
%Y)XTqks*<=:*7qSH9.f^,r%H9ktHHqiOO]qrt7H36!E%"%^+be`iGO?e&`NX]SAfgOF^%4KdpnY`V>t*_W_*T>+Mgjn&]Z#`u'o4
%BA4+fQfg"LeVVWhH0]QdL\]Cs-r^5<8"Yac+fN#rPR^#b;TWW0$d]b-7GpW;HF$tmI8&#McNp*7mr`jS<#FKCGuh*nFNS_>Tej+f
%,'9FN/je`HmilkFpC;r@H1,-cYmm$R]Jp>O0YBadY$cLGoc4Ie:Xg*f:H.A/s$GG[^t`%r-!ZDJUA"IPIn.n%>Z:8)dS]YF3^p4c
%?,In(&=?5.l*bj^$,+EE.LWj%8)3u#Ebc$IU]PFko9Ce"YeXUu^_`iOm;f[MWfBe!U$LnbSVZ.):=2-lfV#O]j1V@[:d8mHY9g7/
%A("<K^`,!ij`0h,3/fJT"$+t0:'GI.b+,3YUm-\)eTN9Y5n*m>&E6#kDBW.>cF>,<f+>:-,eYojWj>:,;pJi%B6#q#ir6>coo"A-
%>FpHE#+2'b*s!%6q%I.&@(l^i*13p\$%_mVQk4L\J-h!#>QYW@o,TODd#)UH6=@M9_thFOe&$&gNk9Z1fqZk7IJ2m28"Vs@m!l6'
%HQm`2,k$TN4d!B!_:nk8Oh<cWh0jVtf$<mD@-o0(2:aBJnnt[TGG..:g:`L/]jg@M([,ji*Z+%LE.NHN\F(RXaFWZ/+*7Uf489-6
%i49T"i]Xg>"#jnFlOFuW'tE\m^$id[+#n-O>kdLr^'E71r3gB[h;\\;?JrE+5bf>mbuRBQij!XDKTQ\cLA*E#_#"s+@-ct8#*-$.
%3/Y'h5jOC*2,ZqKpK2*PVfT\)O&Alo7k$;^lg/UM%/Q+<nbR8eMDrnn$59\F'0CtCVu^(7<!+JtTo^,U5:Q//&$;nU0Z[0D2nPhK
%GUteSUr1Ob2+$WqE<YLKDbQ%(as:_[m9R&&YG6+JXW,]90/"VaPr^(0Qn8qMT&dq);MRHh6HN@eFPfI-=X/V$12=VUc,U8K2a?:m
%IY]=NRm"T1ei>ZD6Mb^`2STB"[o]0oHZ5NrIK6N,eka)(T(rk$(O7[MFe879>j$D$^icmgQf,HrH4@$89t1DZH/:W%SY*;3!S>`A
%<S_(A,H/#*I)mF%FU5Am+[@FdEsTl"j1ap+2ZlWL1TPG+h[La>dA/K&T`bNi>7Mr-5hc+?"@ZU(BS@'5fW5IYF`%GhDaCqF?j&h'
%$:k5-'Kb0##D[8=R6sN@&sAk#Bpj7SfqAJtC.YYaKm'i),q))aQe=gpcSE,2]f&Y6%$*E.Eu`H4S>0pbW(fnjbL)P4N01ZXR/=>!
%d*lElVl^q$_P**mRM+)i)Uqes$&Tl1$RD\:a5T^*2!]q"6hC9=C,I@noY\=5)M>%Y-STY,XaOK8C1\'ka)<h*Q7S];q7B]N%8X)q
%f+:nf#iZa8_(R89*J/<qX3qOiM6P94Y'j!jk$(Z"p@!-Rs&=7!^@A"*#N_39-7EMC*sC[fmp/c8oA0Z44RX<'cL]o/lXCeciH9,W
%Y2OMY-="CQ4R5(RSY)hgGb&]mn,J*S&$\)FfY3$]'==innBIlJ2no^Wr$m*c'Y[=ajWS^8;((:Dj1LM-Mq_!)3FVX`M>I6AE_TEE
%LkN*BglQed6@ujs83eQo,oej3-!t#JiOGTRG:pK^`G@[P^3L(C)3,Y8ep**T&:):VZjfq@/lnmjUo8$\2r]#'jeT(t?46F&Gp91;
%;[3kXXOg-[5XTS2&3%Gu9_o66PeJ8n2-&J$d_OZ!ikQP&d+`obUO!<ELVa_2kHBIs"R#ctU%O?6$2Zb0q[G_T=[0bN)"T-MKYVtj
%:H1%8itDLc%6bs)hV]%WNOZtU"Qhdn_P%^rpk6G1)4C)[pSUIBIMd"t.(Dd`4UUUSE0#Tt'\je,i1=W>'CC.@I8@6=`uoVVFL:KH
%Jp6,/$,Q5G2\<XCH4@[udCpP*hHdY;+F%g7IP28Fa")JKU;ne\9td9nKZX,4.rq#ii#:EZnd_h?2(%e1cZkMmqnP"VR(S&MEeVUs
%H1-)Rh?UdM`8nUXM=30E#?U=3PP7%+^DA58h%Stcr#Vh;DKQe,D2>><ngVt_ie37)E'd#'TY1*1_<U/Q*(a<I:jGM>W4]MK("_1)
%:jHgu-;H3(=J_74X&<DWjOpk\&F9M&U\3_j$uZ]&O@s;'#=P.\"!Z'iL1V?-<WMiW,2`'L4LCQJ\G<9k'HphARH#Ke_nZO8+S+[T
%MWU>a0T'ek,\i8#]<#5?UN275>PkWX;El;pN&lN5lb3e4fM`pgnX7n#V[GY'YM4%gTR0(uOl??i2'DJPis)l[+)rPj7$FXqT!,KG
%\VUpHQd`58'o9N1(S:;(7%SDT,P!2I#Dg%.I"TL%n6R:/!p^:>0C[g@nd\C(6KB.h0+iJb-<qbc!q-RB0?i.2+S'd=MWQUN&Y_Qh
%j/^-);T[TrN$,5_+(B?1fQ2&8)G!#(n#G&b6];N)d^"q]JL"5Bm(:06=Bdu-kWkuWe2'RLc,pp9&Yf_ChdU]nNjr/n/k-)&a-iaV
%P.0>b4.KR<*>0f6mi@!ZpO%eEJZ9U/`<@2FLVK*#7MjdibV!X[QJ"^o[J;jlGg(f1j(No(*,TafD-B8bNi$pA5"5dV`C[FL=$-+q
%5.HBp3t7Kr#h":8dqUXN%''2ddG5R?LsjP5BMRJjYN@EkSsW_RUJNf93_!k"o9U-XMeG;'X1>WK!,Wl$3_6[AK6mkR0*Q>+M%CG&
%GA9jIFH`cnXHL^]J%>8-6(;di]%OjM*WAtkGtH"ja;p`"ZRB,M3eb*#7-T^bHP?'E/kQq):SMsQ7HjmB8X(j<-sbao_;lmYV$jp`
%R(VKHDhg4j0mUlLnd`S,K#pXqPBUi[lR3Ss0<i/c'sAlI;&>T^gQ:=m$],sWF.dOtIgaQLZ48s-4Vb`tX8#t-`U>k,mhB)\>#peM
%-K8k%]TImp1p(ChZs*Le81kS,6UHZd1Qajl9;C2Liqdo)0</FdbM9Fbc=+TbRZ%oeq,I9p;uBBF7[O"O+bcQLdMto"D(m]s<Kp34
%C'rpZ]J[O<0Datr'iBm0hJ93l&;Ii-eMbst:m.6<FYfO``G[qthgAO*fe'4Ai`EZM3euV97a(S^po*%ATnZ8\b.@R%MF2XVh]#ca
%+1)S_M<s@SgWuWV8O*['q@9lOqVHFhL#bK,Ong9LPoOJraSZ[>9+J<?R9r5faak3Omji&p3RGXJ&MKf2j?O*8q#n'd*,+<`MAOW+
%Ee1mEr+>YI?i.tBdpdA_N66KHgnWjM(&+Z:8&[V@mLN69:X&9aq)pII-g(/AOa6sW@X]]G]XKW1oCa(X0CZ\"oA53,:QTkD+nK0e
%mhM7W*&?t@kblM7pQ<3,ADZ>a4eC'])?%"8d>qf/rk2r$Z$F_[HH#"mLWqol%klSJjKNoB^;f]fL<]V64#1X/d4mXho9.#RS\=cO
%=g<7EpiD2747O"lGgH>ZEu3?1H&m%=]4(:hjBgZN"#b'b<p\=!2@lc`gZAN(6A]q1+\#k25!+=<p&R[HQ:+uL;Bmf4Zo$m@H<f<?
%Bc@-+j/\CYnPr2@coc[1%>'&iFgSlQNo;!:YDnr@bFoKL;'RtpW>!l?L5a=":PsNY@.UfqEh(I"eY+nq["k=edU?gB)R4S]\D_c#
%)jB9M15X`Eq(D!al_p=`o>[Q-YD5HO7Wjg)0cb[JCEWHCRFLVrU$]J4jp`oloBOd2)CZ/X;Bn*G*hSNUqhQKm+duAIp3`ERc:s7Z
%^7:5.0>Ze1O412fA+PrV")OR6IY,i9b]h^PaErcgo;m/g4O8A0c&5<+`9'M>CM[<n_DO6toA3pIr2fi.2@h<>293'@2u%94FjDVY
%%6!e>1G!&7O"!+(YQ3_+(LG?h_s@0]1R[!AA"7F(%faciYQ1XZ\e[BBS,VYdHm-Mo[UHbrD4hcE)^N.`6ub7@p1Kn5_[(.oKEWVe
%k0%"Gb3SN[*u`c'%gOQV/Hi7B.bgYM"_;B2$Us31+f0G4.o`4EMsmBHZZ9@4?;G4S&'skkD&fIOBqmgs;Os*jVo+b%RkJ6%\Z^+?
%f6)40m^=,KW+->H!HBMs!G\I]1qbV[J@bF#'3S]t:1l(sH@`M2Vn;/>1Ash(_S/Up$6$RQ=2oi*B0qro:;:u)5l2J&DF*lj]H'nL
%':"l8qM-KRi>7dYNc@,?U-RN/g/@)ef01Npo4OT=qY.S=Ik!?p]Uia.3_lSX2fUlgq]JYsH10a7T(aj4kBZO#H(Oa?RhsguM9Usr
%E/i+(1uSe2k?6\NoDD!^@InS.IfD&HILOP>8a`:tn/Ra:&AS$?r8q)NRpX-QT&S?.0;r9A5#]Da`d&d:(UosFB25gKs5-AM.BF=#
%E@0+BrQuWl')OAfS_+b/!&Gg;^4$5'Q!<V?+J"AH4N6b'@tVorD\44Gn"]HWr?qkMPW:Iu$K6uWSUrldX.*$U22,hc6"<WC!-qWl
%CP/RFTd5tHcoUhnr.5j*mi]P;<SaCTn=4JiG]#@3E=.>>j.eXcKfeC4..-l3.$!8sIr0$#@c5*WS5$HL!#Lmm,N+/.If`j\b]gjV
%"7nBh+Y_dR(BX%7E8f0"CZ%Ne^&ou->&b!V#gAX?3Bqe=>&<WIZ$DCfHW8dqiZ8j/W45@:rE1W<M>9:h^F/1<`;G&uS+fFnr9ge7
%p[+O(4O8A,c&8[TfXqde]><Xc"oSk!pGVU:MTpK1UW50:4JUfa1\s\q]T50"LWp4pd1&#&i'(CUo1j[mpXm+h]VC>.4#eQgfY!FB
%^;oAai6P,6hQ*RL*h.@mkH;(8O)sr_@Is%,oHQ,0/9@dpCXBHj\B:C+?:[X"0;R)'cEkP=]Zr_#8CWr]c!spFjpe)\pY7ne0/$4G
%G.'e1&RD6_Ls33Gh&toONaqbDAGkjlGpP1s-_g0r)GtcPSVX-t<84^(S0!/;@.I]^XgraO?J:M_2>KO8;B-CI7SKC:DKm6"`hZ^(
%-:qE'hdg#=*KbD2hU$p%fCa[8;lTrRAL&ZV4cngY9\T!*C0`tD%k$,F"Mgapinu4BiplC*$+$t!378e<8^f$4QW_Aa3Yg)0drG10
%BKR+aR.#AYSoT:1`\Z1Ad!2/X%ZM9M0@>$9oaZuEH10+)YmHb1]Z>DY`f!R$7cSdN4#EP$[3%`qdE4Vjj`6rhWPq1D;PN:/B64?W
%jF'82jhU'nRc@spTpM0_`nu_0\O!"#R"*Y*Z.$FBDZ\:+LrbSS8ER:;a:2%t]<YANcY-Q)UK3`38)o>WgS_U-^S1r]*7Ooi!<_8m
%K0^Ccdsd+j%;PQ%\FKBjf4/Ib(>kl*Y/XW]V[kRR@QK6%@+0P2@@_ioO+%MN@Fdd'D%P.$K\N2Q[%r>dLXAD7@b?[1TY:0*gE>l6
%fn$I7Z@698bnf#Tl>/IUmr.o.3f3'K61<Ku.0&Z!E))6a5DPWhpItl-[LC14F`!6:Yd"[uhOsG0X.op:>W;R2#2=f`@VOlOP[JYF
%XfD87n-lU*Iu^#kVo%^gf4YAl6Ysnf'4Nc+%mk*(pFaDHH1+(9T(`^qkBZN(Fg2CBYdue&f<DhR'<Y_cT(O,*c;2q)XA1_3pE(++
%0rd-t.OS/d;)Kn;-VqpB4=s'K>$g<)RI\i6-\P&^^.\R)S)mVpH#^q(EC,ldr'i;5&\P+DRpm;m/.!<d<q^#KD-5Pg!h:k[IA=W%
%SO==h-s0E=JousM6"RaK]5@GCk:,JX+QTg8.OQ?AaIc(%05TaHc)[+YOPQd^S;?&j8NB3ngq/$^,28Mfc.bOcK&Ds@B$85(B>PgS
%Z](RJZG*RYW])B<KV,-H_]:pufbcUDf/D#0`Y/b(AodbQ:S=d2i<bJ='0JQg^;CU(R'6#_Jb]LG&9r-_"G]HOis>eY*M239MJG=?
%@(m&;q8rN_6=rFlR=!H8UV7fBor,&aI6Hl]IuaAOJo4B2m0UB&EC%'`O)+WfK5PnC[eobn>asoi_6l__CKt'L]%u;um\4TRCO7"H
%Hc<BUm`XY)4RUDm&,505@FdV_?Q<Z0pb4Xo[=aHgNEJ>_#i9(B5&apWB'nM>>[c2YhYSA#p4:[M0l*u\gj@9!_<8DLX?@WKDh_C6
%!cM<7Z.A6.YT^PEXk,;dCJQ+IS<>)!7]@!-ArfaOR=/V/Zo&H)VUUE,6b2S(CV;?bM_s@RPSA+.8r^nLHe]'kIcPXi^7:5D*I;ST
%Gq$GVHW=fKY:4T<J;-Ka:J?Xp2rN;Rb_<[b]24Q8ha>OC,oq_0W"HdVNuJ/?^+h(>.7UZ[cZ`O$?:X)s_6uT:^!qC/We71Bh"hrT
%]nZ&3.\6@SHESj7=0^V_P2ZHj2.G5)nHhssO%`FgU.NmIcdu=_gr'K_bN[[W$5D7OH.$UsCs%!`@5H1>+DdYD#/M'XY5iC1o*2tl
%=`<56nbZDO[E*V"?Am^U`3+C:)sE`_Wuj[2d;"*/pAfh-a3;GRPkUPjG`\6iV;B+_Q4fC1j)o]BqQ8Y7TsR+NoZ$KFA'=LHmpT>p
%Q:$!'dfssL@_IQ%6+O&uL"!]5T)l>'Q*,2u!OX*4Lf$ljr>g;Nj-ni^.S7UMY5hH@c&Z;@6)AtTcHdDh8af^K_7+Q5CY#-BdoilP
%A)i>WqM7%ie!%/dSdqYn98p,a8uWTFoO!BLl89pD*[E4"&A>kj$r_YTpTPc.($e!kI9j=Lr`^1@N3h20S0"<)fBF.KSkT0(;#=]>
%c'QZfQlj9B,2/(73ka.mgls5[pmg:d2Te[aEDUkOB,m*W(0,OXbT^rE7=hi]7j7TL[uUjLr#'ddrk7ahT*]bsGFm=-d$ldr8)B3j
%54I];DrPZ+od9%f=`9sNT(N<P()q2rFGg6?M/tb+rrV?F3T$Lbr:F6FgiO3Ys"C0q%(-NoB-s4D2CrFS47m_2\]-Kqm]sN^>`_qG
%3e<"K9(qd5gFI3\his>Y0df]'qeq/<Pg<L/g6CT,R:iSe0Z9QLoVr@Th,-LMLG<(>&&LAbg+Y2N(+"`8gmZmLS*7A99norL&XX%p
%Dc+@4KVjY,2pui+iMs)!:@1SPN)T]9`.&Fhk*/7Us*2mFrCkjq)MIM+&'Lraj^d=/j,sDtK%P,sDbZ5VC_A1+1+aj?qQ&P66+DD]
%>5_V5_-Wua^P3:Jk9gN:j8AsC&9r-_!sd[Upd!cN7LoXQC[f-5"ddkm^j?/(3&KS,3=pG=_JXhFrj8WYO2KfqL%Zq%8"i'Qm87PX
%6MmCVd%2*2'>o0+GY\b:#OukbC(0P83Hs@]"3u2CCYW1U]S+O`(u@,bmOj<nTXhOo]N<>4j81sQcf=p#I_O.S6.C>Dqb07\E.G+]
%F9aJX&l*Z1;7o?HIGk,BR-rm\>[ZekhYJ![pOTec8@hkUn1Baii2g5DkT9K][mJKMrL^G;Mm@Nimnf4UO2Wk2UBC0;-")%`(]\[O
%X9%8GrC51H"SA2s"*gu.Fh]TK@HSP,KnaWL8dX]/,mN:t4Z`m:hu>H"?d?[Y"uOqe]^<a#X@`n_3@,U#BFN>'qBE$;8WT3Rj8XsR
%8EkKTf^"gbc:1/LEAW=cY]BH=,&Zc?7W<3@RPiUO@srV?LJsFB)iCI3$a2%"6Jof,ZkgfeL(R9,C;"QXTY:ajiV-/i<@M?IPShbe
%p8h]Zm/9B[K475cXhDl'1abR;?d;.$=2<hL_@q;)Mc7WB=IaA[!/pH]2mBg5H3K5uS2[Z3c[#\OMr2:$`C8'F=Bte',qR?JhSA.K
%>l=pZ%P(OZJ6@5OR(5P7)LDo?FNF73Y`=cU(;RA6<83%'9$"BA?OX3Hehj/+]rM$01?Bml0=I:Ug&bu*(u&i)Y:qA0`;j='0>9#q
%ehLc@F$[1<d>:R+DuCR/39)_HY"SKVC$:2TCc05YL5;Y4b0s/OA:[?RD;W:NFj!B3=LYf8k)oH/0Gi&ic29gG>4WPQ#"$rN;qF>n
%Ke^Jfg&-9A6(ug-_0'P_KshU]Adr1G:e>(d[^:cU$G(gU]Z_.[\S&>fc&M>^2g5cQYF6cMFit(4,r?J^=^Gd%-B+0)l6d"*[I2)B
%h1Nf?/cHZ;qc-Rc6IH^=nK8#o^,'R[q;If3^U;<%+1!T5m+.ecE,-uMhdpn'RBE;p`cW@Do;jmu1!b.Z*V6?k#WL(UK5c_X\3d^E
%!OtP-*PR#SE:]T<&8lrC/eDp3j1bPlbROZYYrk%gYJnD`K\_C0T0\DSO,;98O(&e;'r+\I+j:Ou,1ulSQYak#1u+WN,dkhYZH,FO
%<KUj%)/^l0R>iM]'AP.mLD@MkTbtYncs/nGG&KAQUF=om@akMoJg+2f_2QFc@M5h3U"31$9nB5ErEO6/G]!<.k#=m4P1jW=.F<99
%85na@s6MlsN4tg=dH)K?QRG<>[q[b`ANUt()IM3%.!uSbKBd7Y0(WM;NV<'7UkWj?^GLIim5b3T9`]ZjcEEb1SF[]g#Nu#9pZA"G
%^jC@P+*b!8q#fsU3WGcVQfn9tpZA"Gd"KS`rkNjqkjh[GVZjY\(qB;'WCK`IHKrmVO.L[ieF0?6T&A984F;ZmIphd4?UN$9eDT!h
%[-YN/"tfGJf?ghEGmQ&1_6[ojfj45DTk/.0BJ7`<a#eRZPK,c\J*3C#*5pK"hT80E"W-8=0m9e]0+h\A2ZI""fEWIT+iY#k_$+<7
%jK3>4@itJEL)>:1e(u:g%dqgm@dJ)2IOi?=7>bKp6op/Bdb<:[X`0FjWDKDo[#5P!@a(E$e<dju;PY020rDm>(`QdR0;2-STsU?(
%9W1hj+@q=i0kSa8hsL@q6hKJVghm[5F_Hh`X:_JNJ/D4Z6#hWIXd^sTWh8p>0gn5E>p%MhP_,(HacD0Qib/TP+NEbN"f'`9Q/LD)
%1i92)a85?^%]>,f0t2G3&MPQ=#m;1f/1D8:%HCkbfPf<V`Ls5'nH_1PK^hlJJ;`*eL',oV:P'Z"-!FO?:"l-ur_3*-1(M&#.Yc$r
%njs]qA\<eU)<V6$1!b1K'oT.p:bg:A!u:F/2c-dSr@=gKjLg/'`U@/#`B<Gq<6W\=O$L[g9NCeUNAlZO^D/HbE8*aKh*K0[Ylk*)
%\iOJ<]OkG9l>$9$Lid(Z3JjrQBP4[)I;b_qTe4\m:`"X'<4?CcW,e9K$Z$2l<KoKReHa)!LeS:or>FBGj"\$E8l"_ec%AoTjTj.Y
%+64?4?b9pNp'ii+MVE&UQ?CR0%6k?bZe9;c?Y;`@m[oMeLiAKpFRcL'HefHeY@iZd]gluL@$eU:(u6Zt%Y_b%K@21hoPD.@R1S2[
%V.Eu"/3\."I*9ceKAp7Fj?V+5&Bd?ad-jT11V[o\#5Z6^h)=E`Qk(.Sh5/$/'(ZKBF*^>$>K2<RebJR@fal]5]"8_^ABR%+Z86tW
%/8RibR_-baQ82`9[Z'N9ZK55-,$UZ3-F2`9Dd["Fo`c0I)fPrgMZ[o)$Tib9!Z'oYhn[,,oN]2KFLQ\u0aSl;=^uGlhHUG$@0+"-
%TKe(a1`hjMAO"=3:fM=-0n^*--n\o>j'809Z,b[gU6.Nb/qZjADCVY[ZYV2385]sijs;n.nhIUX$$?EEM-K?%qBA%!\OM:NM57DP
%==qq7>5r;9aC-OhdjiS!8u3sB=bND?9.*X!SSbA8WPWVO=\OW=DNOuU5sNRBRK+^!f/)s-*lR4[`TQO;M[$JGLBCZoZ.i)N+;b-%
%g'U_"_c\YJgD<^*!a5QGaSE6!m(#iqI!s)=S=^e,)t+#em"+onOSutAH,q%OY7K:glh)FuT`pd<m"+onOT!OZb<u!=HPOHh;td-.
%Y^RDtp1U?o4$D<^d8#aGHF2/iURe!LfFnsGJn"btK4=j!me*I^`GXU?pMDdtQY4!dHUZ4Q\5rrn?,OADU1+K(H5dcLJU9QZa5_Y3
%rl;595CO*`lQcF>K"Q[KEXhS#=R)4qY7mu9/]d5[+2gEN#7o_ojE:%E[ihjb4=1/U]m=.+6!aeOkn<(M\0/O$aD3>dMO]Y,jHY8U
%fS]iW%2h&$@p`A;.06<?_uTA6B+:eNn"1;.7K@]_1"Ohonna@52(<ZYW2M/0!96pcXJ`&Dc757Yrg+f)E].eo+KpGf*\^ne$P4tb
%)1lJemR2c9N?I-M#d:L5LM.#@1rfg#Z%AiLi_Tn8f$DiYXY-Kb?4"=T7am+GHaG<D0f[-rXjAFY+3J1&EC.._O:n\!T&Rf.L_Tn.
%?SW;'lAc,4kR/[FL_9g.bFUT\QG%cGr/_am><?V3C6.Kk#j'7_B`&4)f+?Li]sf[KA\<eD)<V5Y0@+tIo89VN0JCat"7u)b2__H1
%r@=7:jLg.k`U@0N]KGKhbfe>_O2/DAV2Fo;q-V/YpR(r&m-U74OZ*P='p1Hh/e?(7jQo"*5oE;03)<+1(kPqD.*6&n<J/^l8?ED,
%>#Q5A:hpX$Zd+rhfT)K8*apWR[k4\H:_G`5eK5E_fYkq`T><$6*qRO;A8n+e4XfVNT0B?`25J\C%Hp6el2)fr+(^us?VC91IYT!S
%F5(NXbdFd.2%NO(5D6I!]fd^iLOP1rNB:cp&!#=f_cC)!kT`K[IK"W(CbZO0/>!L0dR?'82=!:[5L$[oS2k\<dq$j?[FEQ#3%qA6
%pk@iu_DLL#C&Xc)jIm'D)2L-&igA]6?S^I%+q8K/%q8XcIBjrt=nGqQC]Q0Sd`Y,YRAd<snEaEb\<Q5=^h$dF!A;]E'B&G_2ZYPW
%H@u(bX>d)]fRPL%<uc``eCW[V(T9"5q$-NRVrt)8V/3[15:Wj(A1K6p#M()'=MfMSXCj;1I?C5hM[Wmh$oMIX&C^,_nSNWCM`".b
%YJ$>an[6F#P/oE<G845G&:aJL]B-qK6"inPr,"Ct3P!MfQl=8D5K.1tPG.<,Trsi>BW6]NI%a^H9:6l'RC9,/R^qofR\,L4Q*,`f
%Df&7!llcnR=#22K&PPaK7CU:^8paAMK5r/(o0J2p\7W$N1E,()*fb+a"EHm'qd:1=B0GT)pUt_C7A,D!f"\P=IW<=[/;rVRj)sJ]
%W8a07IW2q@Gjd,27Gd?f?_7"hig4;kWV@34E*`"WoA3LFMG:U`puQcS;r5,8qpT"Y5@24t;,WI<HBcpSU`LiT.&l)u8NdZl-Xud;
%bl4]"ftW8prM^C8)bAV0>7D5-=g&uWOn01u(*[ABOKc?YR6ndI`m%hJ90Q\(j-;`5ao<<`j<k\$r5:+*"XC]rE`4YIg@*Vs,@><d
%pB;f14d0#&1AV/U"X@C3qS$@u]cT*>7_\Y1mgDTS2sRt^jPuX*7`_epN.$4k4>8=[L14m2(PXeM<n_p&Cb^eP[M[EP_WJ1^mBY=o
%6/1<p@7p-a0]W5rUg`i^Fk+'hdK1_>e;r$?+NtnV0&*Ffj7;;BXDYg]bBOif[/^FfC&io)<RE_B`C\fJd5Unr#70'Untq6K6^;h&
%ZK<hH+Uj"M4;c9`'VL;r=ap7/$d%+85d8pqf+BtEK+1+#<+j.$.EsPQaG&?KbPi6r6"h.7Tq!G>C`TBdYJgs(&Ag[<c%Egu5m;Jc
%X-F6N6>4q@H]<3d^*SFc-iO&Kkc\Dkd@B!C^Qe1&qdk`\cnE^kNVn[((Vh]MG`DUkSCb!Kq!eaA=(JrFIDq7S@D4ke2<;s,cjq85
%3[O/D+af!&\[kMWFR-0`I7F#Q<bdI?lj$J2H(-Dt'f[RsY]rG0/K_MAcG2-;>i5r,O`PYbX3oh07T'Lr@Go1bbchgSp[Z@/&BGcs
%.UpG6aD)G22OIRTA_"gV%X#$qUBH!'dsU8/l98<-2Js:CLKp66[QF@I^0-Be6^k\j5GVfS2u)71mq"k^m[4NY3cR4/5"=)]"sI-G
%3eR;o2>C-<1p16U0%EdJD95uf:CUL\Zb*A"RaEQ@UQ*jdiIb(;L=C"E<MmKqDmXguGW9cYAhk,0>C9bsiqeMG8tE]XT68>b($A'r
%;VbM?,Z7qs9D7#Bl:I!8-8Ou-Q*T9j1,ZU=h>3`id7P:+qhC*&en0n7Bn)/tmjGu^?ts2oY$t;OEuC,rVV?okkI_9qH-Y`#Pio[`
%E-]`Er)Wal"ahhDr<g5\q"T4*Q=i>#DYZkL&)G[Ip&0Y6YE(i?h??nlf?ht^K]7/!'Xsi6gl=^@RmL!6$l2t%gdOWe"K0[_d>];4
%:n_NM4;BUq5'IW-0%u!O:buaRLL5l@[6E0K@_eoo,/KsJ6eHi!L0-!(.W/07WlRKQW_:ul`>/-k75XY;,-#f,0U6T(Q;>JmaNB83
%<L7..;>_f4lNrj"<L&D5mRm!b-h7WT;UQ=k@aPss6nDbD'Yc%AZ=Fph=K4'?;LbIVX"&C/^7$%m_4tE10r9A2Qi,9Qm^5h.H[3i;
%N$"R1)sdGGG@8*Jj$'\R*H;>8b7j<ZH$R2Rq#&\<G$r!IhEH>el?#+l?Gqs'7/^gCU`TbJ4f[XA234b_<6_1Q*`_fi@8p#>l3Tg@
%@Ar'D%/"PD;1Dsjl5CC[hbF>DH-T&V<+NXn7"m>E,pMV,%OHY(\&#!f*pR_X*[fod&q8V-paHKHO.6=T3!E+:'&Rf8WNY5S-g(.b
%FOLJTJqBI%QMPrEe&a]/6(:&WBb]7ml6s=J2B=oK.pUQ`-i>Mp'-Cj#TW,-<MTH_TGqTW2ULE^?^]8m2/SueY;;MW>P_[!YO*A\)
%XcI$'SC?@91'h!6YtT5<"Ngb-;]b%og@gQ\Wh$3%%F)N4*Jm'i>CHjR9e*RMh'm%Po[$D8*Vc0kfiqTN<OK8o2sk8j%\!Z6kWKPf
%7&8k;5tlEpPY<20g!c<%6CfN!Z9jkk0r6F3<s-Fq2gnmT:ET[(JGVei*C7bS-VWIpcPR,"4?Ku14U3L1Z#cHCnehj..qE/+b!f@&
%4Up_co11DL&pc5B)3+KPA%W(t^(3d@k<*8GY/"MtnX6d\$9a,9le%YiXUh[g*LME+=:7tCa#h":ngYZ5rouW@D+t$#/dk8]98AhI
%H;]?9Z1BmpFa,[Tdh`;9OT^/m[Pmb<eUQlJ1k.7Ydl%V^iI50`3gAJnVI0Mel0jYtHiRjh9ij4uHnl&ecS/%,Po+LWH]0o7)gVNP
%2/O08]XfuoWV/4&Zn<5NjKO$t<d8q:,.>n`S^=7DV:5=;d"<&n195'BY]VG/MQ[GI;(-OlM3e<LUP$N<">#eK&h%Hj!K>^BF[HK;
%p:K8?Z17o5_l>'3YkcjAi\tH`5McJe"F"Lu0pn4t4^h6=mB3Lu#,eX9V#Y_#8#/"m8lm(IF_d7,?2D\YYB-EG$-Og<d#bHK2!FL"
%+R64.=(qH;ci0cTn`-`N?;"dPmIZNLTOD71f8Ss$EA)#CQ8I$"rN7*#fC3p+)JP?W1fiAV>Jh+bFmWo!*Rj6Gf$u`KG!"F,]A*n5
%eKg89S\et%3jB,$bD`^7kUr*pN0^9Hl[qMD-I5MB/?&9MOUJP_Q%d3p"K_'smcr6.V(=QU&19b!^-)*&Xnc5$mDu,*\@hM(e>r#i
%0qX`\EQ0RX)H*4.C&cPWk=K+qVR#Np-`'k"cG+T90kL6;*,&-b4f%(<)c7dR<`p=[-5rUgV`dZ$SM@T!FP;rmMjQ0.FP\0T6f_ZP
%G1;#\glDB8P<qDa&=K##)m@LJ^PX[&li<!eX4AFiFF/'XdF!od!8q\B4"/",PK>)tTp0IHLW2E]B,f$5a8-nH?RS?H7pqN+oN6R1
%jiNGGA)-@FO1B""1h%29*q#AfR/Gh^.GeL+YAe]OmO=-RYL?"#3.qjO$,)53DR>Q-3_/5Y`r!@?DJOTti/NE@g,C'0/62IS\RX(.
%_"PL,8J,B$R_uCIK"?UK\$h9^kce$SdL_,`)<[<GM&8Q\A-(2:KY.$)%1/"/Tm)lIKs##>8_/WZFQ'M9ituci,K]98.a/H=A&+He
%Us<_L/uMu#4'Y8jF`#r:/?X*:Cf'?h"t6J>d[!f.Uo9r%2$LGIig,RrPhV.!nq@0m>:QYIH)(_2\r'q%M7OeI-/g3-)"cd>Z(Kg,
%l,7X1(6)51^o4(Fa#7P?(*25TCSCLJC&#dd&<4g,=kMO61H6.I=\)gu5tXqqGf+Lnq*?7nX@Mc[+WXZG%>eHl$Hmk)@?#V$p4-rg
%dW:sGH^P9:I[AG6]s/tii#&L5=\&Q[k&"5sq^r4,+i%=7]G\`3b2RJ69p]gn;?TA.%].m(d'G"/L,d0tOMt^N([52hZ:/FaltfIt
%2-<o1EI/juC'!*hFQ#srBgF:E[VdU$+(Vnc,)cXZ8jtN:e%DuT.#GVb:<a-HUf)O-n\MJU<,iV\BL^Gh>:MJ`eG@Z%/YXD`lTsJP
%]\Jma<QOJ\LpU,0ZI=-sbF'f$hfkK(^+:P9`^"AlrJ/aT%^`c1R8N[in<kG)Fq3i(7`jRS/A/NJ1i'.*Ktaj!mYU!=680@^@++>t
%Gfpr/_34`=ej=3t$-S\hl<E.-gG5#dR/4h=jO"IieDJR*-Hd(ohq7AS>Mcm38L>uuEF?;"fNX^MR..3BLS^J3d0N10bb;2]2U'ZO
%f^+pb"AS:r_IKeR#KLH<cqU9/W.VBI/8*qB6UF=*,N\#AVY)sV6ND)YM,KP)X]oDN58HfAG.*Vp-rAK4,)Qh7,c4SZDC<no+5bb"
%dKJdoUIug*bU>R-IPTbRbfD[q*T6[)"LUc'G0rBjQ*;fNop-V"=iM;=<F;^5*,$:UTd+j9O83XV,$"i=!uTYB0!.!frK8jcCEO9`
%f!&ts[6etG\0+pJaT\A+3(=(nE3Wp=_N^nH>t&g:3bf$F6FeFdd1@r//e1S0fh9Mh.#!\l8_dk1l&_TD)I>o:Pd(`Zci[cVXHu6t
%EG&tf_G40+.:G("q4T&L11%se(_Y%dfO`*R$t>!jrlRWPa`-!V>Er7S_JV2iN=^jXiXkZUSm%JX@/t8hJf"J?8^Yt@V_<p@aCD["
%`jB:D3L<uIqs-IZ""0Fe"PENo:NW@f_dbY6^qdC`lP%3p'(Pf&Di^bgLjs?<nJa^(d,N]t2C'.K$[.>3C?t#Bb/jbgKbXgOCe-9r
%":S#IqO#XLKYdimKf14Cn$^T$&D+)O%QEnm2`^4MGBh0N6`W!>a2=Jdo=0dbDN13;X\04u/V53<E$g^dUd=S[g\BRfT8eb,kX"9@
%hU3Zuou&"Odj?T<OX4>dqJ!5b7\dHtKqg4>atXtg&>=X4?4(\>NB7fqGj5Yu4%uW=.6FCu.C=V+hLpn@Z!IN$@SK3/jM[KnB4]HT
%^9ZWRepo=2Z%cXBJ@I8Z(*0,qj-gXeRt_p@=V/`bd!R"VNiq^Q7A:`3oP>an#J)_?7oi7CNXQm8A9Wf/!/"B&hmg@B&a_)bnD-0u
%%5^&6n/'N][b2"-,)R?]PFe!FCe4]@X[B76Od2`a2]+Sh.!8Goha3BW(qN;eF_o8$S8D,cM:bq00_;^aH3#ihj$:m+6u]TnlfCQg
%+65('lRmt+j9F&8ak/H`UOlbO$<b:Q(t)tU,N.Fif^hQO/%a5i/6\bsF)H$ba1B?6m]2"J2B8%P@MkCCp)68q\fQuP"e0'/QT?SQ
%GR(WNf.s[42P5hhY`K*$I$g6PV=g_kQ+5teW#@KohPU2CQ$5]uF[$FgBqW8__RbCAceP3bgt3GhX/h*m?pqcT)]ZdGk>;[(>D!pO
%G!@P36D`&e%BHNecSd'(Q8m`&iVm63=$"]`K\L(I@4?:1KN)1[e$g./N.s_PI1$`k<(keF(*_$,b"C,FbT>?$'o"7f/=[m4=)DZF
%1FgeYKk:&5`&_UgTc=m=[s8X.$;p`UYjY[QRCLLh8g4Am2j-+^=I(S0D95DogX7G]PgkVs+U0g%9A]Bec_4MS,10>,q*7WTDp7!M
%Lna9WBNX3Y%18ShUt!@@)1+UW>tAd&i%`^Xdb%;4s0NE81_NGCXL4i3_Up9n6EdC>;`4to[[!+"R9r\Jf*uN/EAN@LZdF@DD:[&q
%da*tS5).Wc_KJi:=&06gOE"(#:*PZeWD(ub:;r\EN^,(A">65p'L>Jonub5pdo(aJ%J.b?S3]&i4/KEZ2m%,%a-LAU4e6.#TkIpZ
%h?(@NT%rHI'Nc18+R`)LkX_eeB0qi\$5;NHHWeAGJdFn:8:PQq>2>&l\ZjY#J`e(#5>'H8:-OM:L9-D'aL<n(9J"!6Zs[+jG<?=@
%pF9:B.ScZLa^o.%9tmu4<)FYH;KPN,:oO%sY:m<'c!eQ;cih,G+Gb$,*Bqc2fW(GlR*6RX?i.DTL_X@uNBX_."VQ[]*/g>ZN5mkp
%k?."dCmP*kp#odB<t3+6EhVOKVWU5`mju6bFH1QC\@E"[d-GQPXJ*;M"^P]^A&Vu8h524H3$Tcd1"e9.]OK:DA]_4hW)@Fun6ECb
%,+k&#s$H!g3T<ls)(lO_RFFs-Zr*2uTT(AP]unnEXk5B87RZ!TY)5Vb-fL-oKP/<u>M03*7uSMUlK0WW1?,l<b<fXPi=%)edP=8<
%,Weh.jGRLJf#FR@*FPW3']u6E)pH[dE&#g>//h++XY=Nl7V>`HAq43Rh"gl)A6XcqhBX9Q8)itG`"!L9dNN,]AaLQ@:+_:7M]MnY
%6JG/r;ZS&%_;cXHN@0\iS\u^eK$YJPMQ87s-Y-?<$b6#QK=::5iGE)(0T\%e=K-:c\g5jN)K*Ne!3!f5-"Q)cb7F\h*"h(tQlqUV
%p0GMn$21md@OUD@,ee+`!4(iSe8I(+\^P''8Luj(OaRHj3"V5!XsjtVPJl/<8<o!&U(A5a`)jlqLA6KJ31<RYLLR.o,V0<FLf49e
%#Acf-NIu5I_\"F<1ShnjdCKL"XU"S0`4G?bZN-\WP=JXm.#_>`^UT+I0$s6)F"ZM:j?b"ATYD)<5s<"P?q@]jPZ@LKH+*(?-YcaY
%"te6-Ng&@CjnO\1+c/Kjleu7smX2Mo`4ekEPUpr[";2?c#os5@+ShG#]IP,#TX7%9>8LYK(oYG_fKF*Id(l3irj&>7,#JiW6K,Me
%A)MUj;K.NE,+jAuGXuGj20^dR]QA!CH6n;_L"PXU-P>7tF(n6:7P.bGR[KZBNI+N\Yh:3)EKuepED)[jh)kMp,]Z1R]:?prP_6I\
%p43cUTg@roEt/#<$TCt[=iB]s**n)^3]j^d]%(iC.u3j,+:<0"OJi_PBR);``c!C)/d4It6o4%oRYl:JFM]H`GeAbFWf_-Ir^EB/
%#N:#!U^5luqlJaKG!Rh"FG:;Pf"(<54]&4q[T+'Mm8rHtfKOk$!7L=_fMN2I8Ysd/8&S*<n%'ld<d1Q%CN:m\Yj7bp?JaUli8qjU
%8sdD+>ra=7^,sjTX]q>1;>)ObN/a'3k!:.)!;&fk:_+&E=uRI*(G<`W[0sSP:fuZkn<5D0!PKt>/hDqE&K5aB;*_Y?.Nr"=*iZ,a
%T7h,6MTLZn>Zm*HZQ-)@[6b-9Q,QAF;7$AI4P4H,<Is42XG8AN1kuS-Ke87BaNWl.E-N#M+nGUe4@:,IZ;t!5?4F<u(aIBELZBir
%`h`p*#Ud#NWQ;I<Gid*E>#*#pn]Tm$`i?.m#$O''P.E0&W&1ZV]M`W7V8tnU5\759ogL-:rOR:iDteaW_)\ctgOZC(c;p;u,fo2)
%PpF=l)qIY/.uC-LV9G+QCne:Q1C!D/r5G3$m$3V!On<bjR;='a=n#NQ>JOB'+.&`%kYL"OE'&FL2GeUJ,(Rd0>=ps5$Q5(Z819S'
%9I*s\`)=Ng+94aiN.lVTMPF:TCg.<(!kA;T#(t;PG*f-j>cQR>c:XQ3%?^:B3-qQ?C6#F#`<[1/:gI1<-<['';k[VN`f/OQeihtr
%&TFUGP=b!p[PWhNGVZD\+W9MM++?(58hf'8DoG"7Q;ca9[KO5"AaTE7\ufuu!i4VI!0Pl%G>)HLaFkpoO&BDAn$41Tb)&mVhnV46
%[I*q;<<GDJ^`pf+C-c?&Nq)#f:`3K!M1+PIUkmXj+F3f?7>bKpf2D8*/aZ5:`l?BGbF7!2DWn#-IQ]./b2GT4%_jAG0ssV&ptA?<
%;ALfKr^VjRK<j`=,+V?qKQ^5N0G-A1`JkW'T[_qJn]A]$^,Y4%?XW!:_nO3CdF^O.];G.-a5:`)p:>5$[l91eN/b/b(etPea0K1h
%1u';u@I_k$,d^8WaM2^XCRr69A%g@%XYGr([)aC[@;sk$a_Hr]fn.oZ\FsrVJ88QR=?CR9`tZ=G"WE?X]nC$"[$mTR^b<fO(0O9t
%r(sq:!/]<]`6X/Ek&R&'dQ.K^!;W@anVs<o3+]6q<`TCL>4+mk3`ZKU?,2B9.-!XPl`t?UaSb1e*t6Yqm>$-67OI7GAE$?=&B$@:
%JO8ZPT5Ea+EZ0-?)T+TA_Fbo#YIcTZNtD(nRFmgj_$LE<d)b6>mKVNSn4?5Q9>Gr-[Crn'`o!h),ckQ2,1iBtg2RTp)1#LZiYB?Q
%RM8)LZV'jX511QlWH(h5<.9k0*=Po571<+\DQg1!5miil2m_OL\Z-qa\S[na)esdk/6PhIM6"BlL!VBO$q+uMO6@oYl<q%)mh2pC
%>>oVh$)#]B$aI.[h^,@\N#K_RJ^OZ4N]KtE(kMmDS4jk$oLN$XMK=_Q(P34)'UC06pj#25\ihE/TQlXD8`sf'RVd<^cQf>J8Y\Y9
%VHj]Ua@fXgeR2oGr`)]M&n,7s9Sut_+k>9>iV`$S'go_!_OG2e'^CA_.0+R->GS?'6;Wk:LhY/]3u/-,$[l[)dTIKQ+uUlTQ#0sh
%Z:O"3TY32QIHU1-,UmDMenXMg>?5oW#rkMSNoJY+3&k>I+d2%Dpn!'I<\XcAO3T\XdP`^Ybb!@R7=ITjpJnXq([[+tf%t\R14d6&
%r\t3*WDRoZ`Y0B[fu@doig6cMViepn?Zr6(QdJMVE\:B\Rn-O3EY+e\Q;*1_MKU#`P1(ch'>B=G>I[s$VMNN/_>%5EP8IGP'7R?p
%<Np\g8b-X"Yt?-#Bg)d#BiN6Pc!M)/+AVKXk.j@p_:Bk[^WG!&b"^-M+A6YX[E&rC.;6Y2W!Y>[j49IIBgG&\G$1;%>:AQ<b#lhW
%!Dh+N!lo%a2F@41K.@Zo*n-2I9)8iL*f2[sc?h.`%i_@jr6&ro3jaE>pa3!T1a5#F*\e>m5A,/'pI%RX<'J,A/cD5IZa@ZB.(#P$
%0sOe*GXP_FO_@b?3$X#e@3>Y+_h+-oCR$J.8B7_qESU:%rB^O7.cEYk_1sp@`NKVcq!P3L-4#HfK.AI/n-u9=o$j75%1\ZGO/5iW
%*qi7kCQ'Hg\?\#f4Push$TF:^O/njD6GmVt=TANB=SZce'!tSM0Jj%g;5.rS2l.l<4%fB+,XR%epReeNQdZ6`cM>hg1IUOj:O-+)
%1t:Lu=9hK'-(I\[rQa67[l:nDd<Q687F/l%Ij:^WUG?9sXJp0r3-L8^L1`f'bC/COk.;<G;u4K\&6U6n>t?N.:s3.=`jKm0J0mPF
%Z;`00s0ikmr-$ZaYKjc8?rX;AG6tFn\&X5[Po3LV4;A!d+ALpIFSODm^d=JHJS6I!"3?*E&_OJlb>`K9F:ir1B;W`dL%:4m5ljDX
%q?ZK;\KMtM0g7K_AH.X3;6/Je)+#9SH",f/.;UH27X/djQM2R.m6"@X?cS='K#QOE+`UD>VdM"qT-&[D\Fr4E[m3>$-m'Q5$0pXi
%2MXjtB-n[X0_X*B8O>rLZ>61`NlI)@]Gj/aoW=:[d.mfJ.;\X[^!#DC2Ing>JkY9-!CN^47:5+1fGRhka;Ag`7]66-KM0k=J\NK*
%),qOMfXO(M<VL=K-8r$1_\jBOP.*=DTT/A)X?jS;A*=O<>jB$,g.JkQ-3:,M4fM=]8TI/!=_M<jjQ=br/[$]b^S3"nh6<S_61g.M
%qf(FPTMm=U3rnX>C)VWuNo[nS<#X^'f>K%EOB"s5f%,F7b`*)uo_01fndnt\&q"DRQmVnuNJ6$HKRdqjJ&BNB`R>X.])^M.lOek<
%Vt:'QT9o5UT32u3<C/eZ.g0kL=KR`rJD`UrUU3bEl^ON^BoYK+RF<RRfk?78qTmjUM]tSiL<=/[A`\jK?(b;K]-4]gGuk79E/DaR
%G9OOhGcXHrj%]=X8556h_j1J-L>4n2ZX>.]6*QJljg,6>(@cd=[Ro%jSK--V@Mf6&?K[ssFrfg)@WJfLa'N)X`3OQtK"J4&!*;EZ
%^V(+Qgeh#[8J3gUU`.>t(-\7^lTE(Iq[9)U3b?EbB$BWa`HBVtnX6\eKk`Gt2trk]$KZktn:DgXQtTt_U/Zm;e*#[QPte%mn1-IJ
%0S54T:"mUiA:[QK;ZVkrF/B`Vk4ZfeE\tAmqNYaT]GlHo!n`+bTdq]SN2q@_;[b=2/R&AD1B]l6@:dip,#2Jj$pb)8iY1qca]9:p
%:#KA(TrN\Q:,kP."C.a8O2GWrDaTp/'I?rda,U7nnSs-BTmc:kH('>T94\Al%=[7^2I<g>6!Vm8@=Sq*_?)@V4rOI2G3)P9dOH%A
%/";-,Z!8c<g%`g`btu3V$sMg[971ks1oMj,E_)1Ef5Q-ZLYa!-i[ZZ9$*h2L+`EXl$?:E#rb`-Jk(eUjfg@?Ag$c#>GF7[UgO-Gs
%&;dL:^9oc:"Y6S1TW1[?Kd6B$GtA4I)rDnr6&+$:P;6f^7sGs=2aR,R!2]Xj1eIu#pM&[?b8lBLaG[a<,,b&#YI&W[(q"C'"W/o+
%_)Mk!r0RFI&\e'!$.P$je8jE,[&(m7&Ih#B3_9MV#>812Ub(J/<Beg-qZmnV.-rg348Fg<1dl#E2T267E6BWrSF2%9\=eJ$$q7g!
%,(-.DD0o'0C$.S(Kl:8AhT_OW7O-;=f("5b,TdC`g(]Fs?!3__c=2P+WWem$Zb/TK]KV_MpVt:7DtK".%g_3RGAtJ6(Tf0jb&ruM
%K8&biPq"M/JXbRSW2ra(!KXH`ZBH.K_]m`36p4topCqT_3%.E)+;CA*-AR5jR2\_7UtNPo&E$)RmTYnQj;g_A)^p0`7NVu_JFk%,
%l(5,aC?#m<)T(UR?mG$%m-Yn10cQ:4dWh/ik<.eoAL[%PoXgm_m!g<bkMp5lnfbT;f2=(bi8<;Glo.rR:2gAEB^[DM0XsSCF<S&n
%JPc//Q<SZ-_[0"L4#'gI?`l)a]IB&7@-8l'/_uP47f&G=BUI-tGe4]A2X'(b"^<IE*<8H0Mk'S%]E]g_[I[B*r4aAq;?\/R1\uu(
%=_SC>2MeR/U7qmbFK1'`.bjAdJC3R38'-'&S.Sb;N]-aZosr0=*B$bAE!m=9`aptkqD\tHF'bX#SlJC##*A@oj!biJ8/m<]HAX4!
%^6saFcZ_-&^=3=#hrH>UFg2N>",PTY?lGm7)8[6q71s,t*Z>D28^fpolYpmp/>BM9a=je-F.(rl3u_6)A`YU\Hm_Ah4DJS9G/mPb
%fV-o-?Ih:^f$3;05t/O7i*5hJ<\gkf'+uJ*H--.2jF)Vb#)UpqP/P$ZI?SY2YdI'\FXm.=PmOkn._g^1&OD:cp$!,sYlMq/mo'ce
%Lur*(/dpJ]-Sjsjaq6`=m+86r6p!n&#aeFKf[OmH%oh=6:cSm;6CX<qj(&jDrC54t1*D_%bsR?i4L&N8GebY3f+]D@F.pnS][>Nm
%_Q3$C]Xo;6gpK`mK.=-Gg`.EaGbpm`jI+Qb#]Tdq&t(T77)gF%&\Bs3>gmruW_Jrc0Prn85rP=O['Aqf\9&pT`T_iM&u<:T8sBXk
%2nC^)^L#LK[o_MY#->Ds-YRoOnBI8ET,A*i&[J2HJ7lSR:/sRbhh<#Um@6.jmU?7gff2t57rHA)Z/:CVc];_'[*gl1$a47'AJ%rP
%hk<oo;_`Z4PEiA8P;4&?7=aTMo1eX_p^?:6a9=\`d40[@$QG4m0!8554NMkblpau[1g8"E`Bd/9dS6GlJZ^d16JR8HY"@CC>bf`T
%<t9?cYcMHIf*is)q3G=J8-b,.busFS!+g4jS>^@)pWe9+Tu,0U87C0G(scmG0'!%7O*2?`iAP_BG0!s.#l#RCOX$r#gk2bsCfKK?
%&MPS(dT@A#:6`*?JA^c,9qh;@ZsmU"bC:eB=7O;=9b2i!auj(Hh<7Vf`qNU*QJCSn/TA81Tp"JsXl>\p*4i.;aa_=oU;<u+3B/Z:
%kYOCr`mHFI,[lUQ^1OR:MDcRuP9er=7p?p!)4a9%07#IlNcRD1nXdQ"M^,S&7UM\h*05(!NCHG3_rSU5OEK[.it]ECpGdL99YQ1$
%\&JXdQ8;u;@&U?88p@s-i"fOb"AD$B4#ujX>(uFOM4'6BXpXZ]SF[=6N#.K$kfUhF>(3;?c3i9D]A1h;([fQQ<,X4L_"1OhntRqu
%?I10N*O786?*kEB@LTtgFA7^\(7gOF$Fd6,5k"au32l;AiP99R+@^M69So!B#5:\<5XP%#!VEmYOsO/=!eE%o6_GmA)<.!?-<tt%
%5&<&c5.7oFfZJF+s0aY"O9G8Y'#lqiadS>I$C/5h`(&PGb_hPDj(0O@]H_(?BZM@0mMrbT(60cd5qs;'V"[:+ce"#HnrPDr_CUrc
%GE\1O\OR@agh$2kSmuEE&V8JoP3*u+RiZ$m1DObSElVN'VT)ajlGa;CldE(6Jib0E[*C$L'hUi2oT0X<khNL=!_Y(.b;CWr#SnO.
%JN.$!-Rqn;aBJKVlS3h"!id,87_YMBE#OQ`Ln9@B-DHkuL=,'1S",9T@-#P2^%;LJV.e>g(odXO22]0M4$l,Za+XX;FIN-t:oC+"
%lnAq,-N?LncR$I;h0%paE@+#f;c_IPBWWN=Zd771L@e./>BF4jB/i`P@&e74";2dG4!S,e":Sp"fZooF@kI<FHP]l*KkIu?iFm)[
%>B5R?OIh2&Liir+h\b3I&=s07Tm>Uo%0D"Z3E$NFlL;l*I-K5+2eiLD:I22lXr-R6e+E]opjqM$HcQ$]NJBFK.[*BjP)s5]OC[gC
%Y7c]H(i4e\l`2Aj)LE*B$7H-1N[8ZTCBX9/*1UmQ-KY[%RPMf%K>4KoQ:].5Z.+3A.^>r$]ELc5r3)-Xf2_riA)IY>Q'48aA#km0
%-soBge&^Z?XVp6!:,UJnd*s<+&e'PuC!MsYZ`k#W884I8e9DG+JB]oF]&5pDX\2&TO\oJBeu0Q4Xr_Eg_Wcth-W.Mj0#L'$&ptJ1
%_U56nPV`\[PK!le#lq^i(+8hC^?Ek+$Z5+AAVcOH%C0fO.j$s:V(r>[[,9pnVSW1"_6L1#F`]H-RKm0<Inll)B,PKNJ7LnG,;CA'
%E`V],qN(D97`+uGY!^*ND/`aCq&g2P@Sbb_3dG2'jQ&U[&VH3f9G*7*186"k9p<DTA0mmGMFK"W-0q&o<d59U+seK;f]A?Aa&+>S
%k-*d/m2Qh\cHSH*m8Ru2l^]V"FZ`--&iq8YpaN*9]os`*8\*>?kPfNXI.7W#+bqWnF'5GXE^qk-]cI4fo)Xe:TM&mf6jLpq03Tfj
%gLc+nF8O(i5[k=6.&Usn/KM+djas\-kRRM+_s'2819ZgaXlaCe4a0l"QFrlX57qmt0CesY$V,t#4eBlBVK5lc;-K0IS]IKmBt5WH
%@q&_3C&>JL`X!5204UpdV15;*fMksZ[LuDBNmd]ejVt[qmirrY/.']NOg;%Y*O6\WhYJ.,0r'#*Xu$8_!Hgk0;*NnLKEq(ad4KZM
%r6c(ubdemJ4Qhe?>F2K]+Xu07jiFm;734kd@>t<MS`%)A<!ZUq=#`$Bi4dfh+M'k*q1mm!1"",<`%G-@3oKfqHE5*BLmT@'>>MoN
%(!NpA*b/CQ$^`uqprL.e1#sU=5M4%8P!\R3l]%aqe5p]:!\pqt:Y/;9JhX`#Ml:rl56b:i,WR/rluE+t5<P/D@sK'l*I5l\/l>!Y
%QQiP7`1WpuK&IqlXXO]Nb7bs;9q'iLn2-[7m0c!ReQi6N3Rj^sAu[-DUGl45bdQH8QR$]!6+Jg3lct[iFsaRAZ4CMQj_crHBRXTg
%fZK&'i*Z9h.tnSoA!_mdI>OdIn^4U!GIbg`RCKtNIWn\+m')CBahpE$1>Hfi<\.#Ybq45=rK7ZoInSo8\)q,,ju5+X*n,rX)I;OY
%AT8Nso!.V'Z+5eM5U6;'Uci'K:NGRDO3ZU?3'Lb]^E(g[+NT0R6(Xm#X`;H1b0mgr,2FpdLU1R*^S^C\dqk$hXaCOI^A^_@P</TV
%K`g+"Ylj_l_l@%>Km].$)m%-:\5!eP'dDR,1hV0i=hjQ6!kJ[ck]PI-8M5&Td4ZkAQ:u/tp>ESg\-V57d1VOTg#it;2]ffJoH;cl
%]9kJmjU9"#.5*-$_!Cd]Np$N^d7*c"M1YA>$OWdQHV4U<ppNYfU`U5OjP/<iC@_-2$V$[3,;;/,En10:,cLo2fAH#MrhOCO)]0q*
%PU$@Y18%T\'kl_m4n.EG4Y:"%+efu*8Q'G!WP*7Oo.9SY*3q1.)gjHbA]RJ`=WF_hWG>EK3j^UK/qNNNng%[dl%Y0T+*IhD%F805
%(a<p:lYL3IRG9NiK;2_b$C\:]2t#o'F_]b&-=;+arJHEgG>F]a2*1Z8&_K!U<,G;3'DD"JAWR5E7AjTUm$^#4McELTg'suYdWWq?
%hd^jcLd]*0Bjg-=6FP:mjRc5C=,,t+-3$!U%"Q:Xl][7G+#tYF-F_t/VA%X/D)re]_bM.>'RHu-!UbMUg!t/C!YjRL!+k,"^M`5E
%0rtGR@M7d/>cSq!#^1uN4hf.%9m3<bTId6nNsheKSK>(nEZ@F0YeL1K]jtD;!^/Bm*<Q%gRpNP/3sq[>=-8P5CjZl;j&UC0XP55@
%C7T&?*GSLh\UPt5a>QV7+_qPi,INDrnEjapIXOB?5rk%NkKZhjCqsp]%%DYXS?5W_f6ia`ZH4#4P0K5ZqBXf,^Pop,T>W/7-^dBc
%P8M](kmc#]GB`*uQNnEukoP6c,C5sb7*\NdI$0pYEYWtb6/:-^:oC*em)fKI:nE@L[G[:BB$2OSOj,>k_%(%%0rLgZ9sq0"aeUno
%"@U\RhG?&'F%WAV'&Ba7?HFHR[q$-%0*-ccE-"]&SIu.9"K?XGS?B,$;A#=1]5pUpejS5e>>cF#m(MX`!5\>;=,78?oNJM;Rf(bN
%h8&>#!![;tUJ<IaiA43c"9iHe!,9^b.(_aQeN#oQ.E\`#h?bUs@Z,Fc$0IcqaZBe/e#^es?sh`G"Bs1US'F1MZ6"ubs'ub?K2V$J
%TPNGffO%:0*_OsEJ)3PlS(t^K0$=*P>C&d2:<FhC0?&b0VJO%9aOr7/.QD6S6dn%F>>dgl*>P)7Xl?prVm<#mb3GL[DeGe<PVggC
%;79-dWLs[J>&s77OABugNlm)F-+S-N;*biC(>T[p4;KrH@5hbm`,fel.?i[0'dNQLJDLD(FsK\!`bg=0EZ($]UA%ZHB[4bt!"j9Q
%d"s5r[*;gk+^5c?KY8*Z6L:ed%.:r7BtG^(QmdP$)+f`J_-W8AT9h%F#ZbKKAUe.J#hIl*b*N)7<i#44!00AP*+a^.-;i\(oVP>U
%[?9A"jj_ob$E.)a)2]h-b;lbhU'8o[hFa=Q4P5b(0lZ(cJ!8=s_F->*_;'=hg/cK+VRV5c/W@.s@)8YKZYr@`;t,N./8A!Xd[I%I
%?lcab(a$i'`Hn'e+cVH%i[3i"$6?jrrSn"tTXX9/.?SpL#^D%?36K/V9VR+In1(SmU]:IDEF]#p_@5!jcl'lXO>.h;$-lqtE>D'H
%%;:7umcu4_:k\`6<MRVD24+M2hNOn]#&fZV8/s/JRA8(<Cd=!.@k!;o;nG%I[uJmW5TS\]h^p?gckLE&p*Q%:e.b<blQdf@+V(aU
%,u=Jm*3:R]`4-u,*.Yor('P^<b![7DU;@E0rdAL.,Xo3F1huKJ[8;AYfON+5Yf,Oq:WUh^#:LR+k_m7"*VNlWFf@Z<Ci,C$Y)5EY
%8oAsQ_L,ih<;Zcgjm;%05eu]bVLj@,cjK:P-3O@/j_R#BXbsHa+G?!iHWCXU#RZ,P?W6e7%"X.^(Pj'i&15Ae\N?N.&SRiHAY3(X
%[7`4p%n=>A(tN$hbKpO%8=&9)#_"4*!SHH'&d=.qP/::X8"d[@&a.E`:8r89`"4*nl^M0$72oWJ=3Wn(QitLRATPWjD#6imN.MZ^
%`Jork'paBl/Q<3SE=&"<^@r3B/Oh..F?lN+e;>_!+;+l\.I%f?<?$`=c<<3T#p9SEL2`4bI$;adKMRsL#>fA-5q(ZLFN%+n#;f\"
%FVKs]#Hf>'+iPkBbZRogM(UmebBVp4.)7MZW/&]_bd*!1$+329c:El:7XR=b-mC5Z<9/EXd2?ZSB5A]1&6=n'E+]h1B9Z:"G(3t`
%]>p@"s!uQ=&I@@4.H!H1*tXR(3)=%Y,XY#GB':iMdQMI\ae5$I&8VtrFKm5*'799Z(JN7$Q^lUQ8P@Gi$\b1(q@kGXfJ;>a+USi1
%JAV%cEoL@u%q[it;;tYQ6q!b?c`7hYR;NI6a]M02Tb&<:>L(I`PGhLr&HO!hoq9p3q3;SJ,3"K++pLRcfnKi\MemZ*Dj--3-BqC=
%I!^1[?>6KW-pn4f>T&Od/VoIq(K#`Ur5qF-4%G0cdSSn>'EY%3FJ;eE_90'CoH(\^ULdkTN;bA>F.i9SD+2.A<,G(04AuE9j/AL[
%'*lC-\B'h@\_c$,[95p[jR1ThI'g>`nh+@OEkr3>2F0ZRaj%W+4FW7WD/CJ&M95>CEk)>b.%dI"G*hAI_(CmB9hu\%?c3"6Z(ES(
%XE\7BMghmL=d,NW*GFM6S?V.kk,T35eu7POhJ-"da[l\9QHh*&Lh/74Ve=Kj`2.a$"86*fq`:&qmDrR`GZnng6opD'.8nP%5!/8*
%(0-Yloftq9f9V&eKf59/fagJ=_Dg>*,gZV?MoUNV$Q$UDGHON@C2>)K1j`SJ[?C#/RMg'CM:oDi'hNn<Ga-G'Eg474")EO"LKKt^
%gS+g10,L=bL5&?#%!!liBup!BO``0!r/!mg?]YL@aV\N(-m1p'J/E>r`(b,dBQdL*KSsL'l5,PHUhM6.KUOHK8fe1p"XHiu!WQ^M
%O8\7;>;>Q6Er&9YSNGY_7DIo#C-"1$;cQc$RXh/-R0lI+%5f+qUni\STrrRQh@3rRdjIC/&ol$!;qtaD6suJt%aiG`nIl@f,aa?M
%Pj!^mP_c%!-jd`W>s^E%M59<Bd7S"kb4(m.0ku,>.[uifidk?&V9jjO;q!_7<AU=]:,nU@0?U$'2KlQgL(#ho:Os-r0sGM@7\ks[
%//[l9c3KkrZe-PG%`;NSf1S]a<\&l-48/\(kM!d22U!Wf(u?rG;s"(*`@t1]6'@c-pC^Kkfpql,Vuji]We]NZ1*O%21;;AF.qjfR
%?u_kP=)AUNfp1qjd1uI$].qZtO<\EUf/Lp:=J'2BQX$)'ku[`62i05NCIGk]MX"Jl-Fpct[N,%7;0J,EPig+SGUlWW3&tEF(OtJ5
%i,^I]f=L5=0JQ6HcIJ5$+E"L-&:!@`OH-d=M*u_0E\[/@YXNY#_nOte^!L"OVaN)pIGOQPm-Y$drC8>N:b4^%n;J2JPJuZ]@\Uf"
%P'7H+$$9:MZte8n>&ZJ.5bXF-<s`Nh/mJc.C&1`EU.Oa>7#<6PkPh3&W*b6,p"<BA5#8QZ9)d#>g.f+Gq.f];#t/*fLiVH@,q,8c
%!\k8ApOe8HBobfo'_b/*Fi7da>mT[CpJc.b"4)KQY4%Oj5cXW,3]E68":Cqun<E\^#H;)kUZ<]s)5'qgF@[k2:(lY>P6@Kl/"N<*
%Cen9_n'ZVkJ%Z699%#8(9#scM?'s8u,ZD`@6PdnTco/Wm2`[b_ni(e4Vn(0;N'pg,UO;*6b\U_3QDLeg/mgp@6Ao"?+?a[8jK9hY
%O<#-r#'X#>TPLQ(6Mk%\jZ.58CjXQ_@^b5^+iUEmWf@2tMR`HIbG3)tQk%'OH+JW>";>f9T[#gX$%b!T?6kF)oBsI&65ub?ADo#%
%M1Z1pKWQ3ji#m%YG='Vp7[c`C+dmto*B,54Ft*Ye/f)`#cr[fAb)ois#*/j/j$Kn@OfKTlldNWd;);p7AHC-na^e/'r;mSb!QXR,
%3I@[L!H**l5lij_ip,Icm8C2d39FW"*[6WF36&jia@+-RmnRt=QJ7j/c1ie&V9Uab-pZT#ihYmkG&9'f9A`>u_d47.1qBPeiZ[*-
%/*jaaZa#2\pP\3.3/lUgPVE2j;l)$>Eu<7**9&;:8kr.9QsEHDVp<[8\7(a]WC7%!-*k!`FEk3)Y*S'$j*bG!MF+(AFOV`0oX#GU
%)U=,.mZM.u!G(oCkYf6F-jfiLA7uI3M\W'TfnCd?X/!4'FS,&@6+\!5ariQ3e$A^#?ndG?'HN"#.eII)3`)UpVUUt877sH&;KO?H
%M69W4X5#;'kg2.9_`fTuJ[B5TInqTBd0em']MaRrn#B9&JKi<pYNem"\'XhOT?HoUWJa>i".ZuV'r>(:#^)D2$T]U9V6#j1:(NB3
%[diA>fet;9WHIDIA+JJ^.n&k\I`<+s"*)YMKqFN-co>chHhMg6d_<([q%if`1Z;'&?:k1Cf`i0?KPa0"+L5"A_[\+6$)<sn$$SbC
%Gaq`j/eJGbk^BjE2GM^r,GjT:Y%Vh/AdM0kat-$FLf03BY@:;\e1onqA>V4#3&]l!GI]:8IiS?H0;E4WRY34JHVT(dKJqIO>_upq
%'tlpejlfUaRaP`4UROZ<!\PX)#&\ts22RJOb5iF\U>8m*22N;8AN:Cp5Fe`n<hhI>?gL4bH>##o]WP.$ml;fM5+flmTNS6S[VDe0
%e35*>9m,]67&EjC.]Z%*$l>YgkT"/7UN8i&7L'8FhmF@C-nLrq2*+ojMk%SH"dZ/n1aB(&1>j,gZ9,r\0rfeZmp=epMJ&S:SBTG;
%8)@Js3hl#a#U1["asKq.\iE]q%\;#</?2-s1WbKr,]6L/7#B86;BAHqcp<^j-73alV%+NC1bkM#lHmp(=2C>'kQ+kF1+]u2_SAUJ
%Om#LZEKr;$pgC4uDRBln[;-AA,*ejs[Waa#@Q1er*`XM>?)5EBSf#Is'0rr<d?%q)Um=u6Nq[q\1aQ=ZNr$:>]I#)W#RWX`>(t7!
%Aed?sj=56oE;9R;6:[fGI8URr8>&B]D9+3!]1r^Wd8j8SM&I;/8<k?._Jt/_iCNQOq0m[Eq'FgcbjAegTh+)cV]K"U?l6qZ&K=q9
%=qkA3FE4@/('R7E'C:VZq<HFuTSF8'KVp*ub:F!N(*s?*$'H-qN9?f^LI'rEWEKr8'TVG4e:CLV2VPMb5b^'oc9q\*J^t-dUoC/F
%YXJhSTbEYh)O)M7&hOCi>%PLVPQUu?Z,BfY+Q4edP&`_FQ/J%78XTQNmfNneF#;];?IW3:-Ul`AC"J<GMU/J+!C/);ZWO70bXTh+
%rWtOD[Kq)tm-uA(:Fd,dF\fHAaY@C)!%]'1="Oc@)I5ttWs_l@+JFrI9q!R>!+Ook`N0DsB*BD2l1jcI[7U@=WX=8g<6EtZWWLE;
%kGeTnDU$u6p]Mt*f&Lq\7'=[G!+kIO$a))^Lg1eOeHJJ_A:\!>Vn)l$&<p#7![Jo#eh#G%V(=m+Hkb<RRmqq]Kc<@F$5+hhlA]]h
%;*)iN$P8,1@0/#RM3k"h!8^F)?!e?I7'>"7AH>%6p6*&dRL&VPh*"hR5)"Kg/jLV"SD4XQF(8&Ak(6BU<jd%Z[rZ<E*:gqAfl3g;
%aG*1%ecb62FTKkOUmKB*/c^4T]%BAll3L#4oRU0^!5pu)C#RI9>j5E.+:tn4J0T)?!$6VmUf802D;'kH6I`jP1b$p#mqSMtXCJ(\
%!4=[U@VDbM!".I@Xti7//SD?kB41eeA0e!*!%<g*:qTAmBOLm2PemFmWZi8P-t%cRd$m"^=rDi/_,>mM!`2N-S1&L\5`l&nX:%:o
%Yt4.L>Z.Jr:T7F&/jPe(:#B&1c*`a6[;3KrXp^>QB;3TF*m=%iQno/dQurEB&rT`2s$o#3'@<%:l\3,0R`"CT!eC&qgNo2d>FHj2
%YCGKC_r"%I)H2<9>hl)WJgq<_O;\b3SiEf4U^I*l.8D3ieD"bfA!jfRbe72,:Kqi3n;Fj1YVBV1SuMd\fe[[4"N"0%hE5<LG_gO^
%Sh)C*oFP6RM^\=o'<N2jZ2e.BRNR(%!mG:O=TC##CI/e%(/)\A=TH-51,u0_!(P-LL+5HR'Qi]HP^1h^q,@Mo^HZ2p*D<cl=b:EG
%<<9,0U@p!8l-V50YN2Aa_"5Q?V^_\d;!ghK!7(3^Y\4+%'u\dkRK2W1V@=&1J7\XQ9n55u/XcZ]^.<r/!Rfl\VQXRc!8b6+*]GqW
%\4ih;$r$`!YbMAW]V%oD!c(/V-30?N9Vs-:G6eMDW<j\W/hYQTOJN+m;-X:JC,SK]0ErlMWW9,PgC[MM.Y'(M.:6$T0\Z>,;upOb
%6W$+S!*\3filat25aFK4][R,C.B_`b=/M*]pC!fM!"EPUpS&$Lhe<Z,q#)."g]HI[$[kfZ!4DYEb(1cWEZmFZl?2+(_\1Xr:^3"-
%"8cShEqRLU0?O:c(mJ`.AH4T%9bplr!O0Ms9kAk>O\BHhr0Hi`6Q/4]9I?o1GV<^rNi*`!_Va5LCLTj)&;/>PC'2,>eB%nFSf'(F
%FrT-8(%.FU=MbI$$G9tKn-`NW7GhpejC1[jiFM$00mWsGP"cpc$^O[/!9`!;e)V7_@_Bi-%=iF/;T*R>1ZGa7RKH!Z1&t)cab?]&
%:dOMaR91Jq7f;2.]bLiqEAss/$P;j/J%.E(%U$V*/-K#D%&Un+#1*kAggU;Y-g9[#>`q@8C!0<t?B`e;1u>iChs4]E#CX:KF@#YH
%_f%bCgEZ3UaoG]5G$SE&"6f;-(gEgFTZrJ2bu=oB]m"m8!r<eELNOh&Tgqa&i'*u"Y[dgNiLBr8&9bcSZ&n7E=haeT1@Mri-Y2T"
%'DH>S$C!)K?7_k!H.oQOR4AG*:R!O$gD7<)V0n]/0`=mK03<r:[Qp1Z>4+QCm7XV4bIjNa:pPEC]m-BPS%TiMN:Fj8-0fHHDU3!F
%^S9_/WEu19V0_t3%hLND=CuPP0@e5_p\%II<UXBWbGPqg`jPGb^6[Qc;80,T1:+rQB[at5T$@,n[soG=kY],X%8-lr@Z1q3^7W:j
%=i.83YU'K23GTcD0u*Yq4NQ.V+i9g?#*JOgF9B_;6V/\7UUk*AIuF_H*inb!F*suq?7`F7GoF#@Gs6XW0QTU&8r`sb>-QRSb&gDR
%^*H`=5MQ)u&+8].YIchNn:rIV4:@OSD&1iGAS3QCZ7Q7(lEqo=_4W`lSC\*lHh[)TB*]2E<\UTS+6u4/_#ah>W[.GoI`4$E^PpQE
%fW8GW=cc)J,O:\s!28TSJA?/2bH>4u,,j",?`KCaS4B!%DnfZ6,Nft8ec-qLGZDF>^VWm^]SrAW!FnDd)imh@QqgVpXB*u+@j9*_
%H1nQKh3#jHeJ1LESE7pr=qC#9/73"0MA!uY?`$nmB/e##Ve%;a?AqaqX@j:`Hr[l(%2JA=X-Y]+B@Vp?Q[.ae7.&C\WX-BQXqm\4
%cX-G?HW]kC1D=(:1[4;J4Z:h5F5&bZ^AuJFjX(9#HZaX3M*or7hb@i^?0.1-iY(GK2eO-`$L6HX`tnn1TT\8N_tABLE(50H>/aWg
%khP2*,'2*/Go%5l**]^WZ?>Wf+#Z^m2mGkbqXnD<Sp+C:>J_5_nar'KMNE7VXc2qj-J.+uEiDJ6+IN*IracI9Fo&=:*M+&e4j_)h
%P*on:6J;CqNH^`V'JW_Y%^*jO@WnF2jOhekKt;ipG+nBW"hGB1f+iMf/Kk1gXhe.K&5o2(Ph<1YE#VpZmB^?Hc_iFKrs^3A'TmaX
%o_:OLd-=Lo^i5E^rmP4ZoE$tjX3ud*%bKQ-aG56<3!\2Fm8d/;?gj[ehUk0.-OIe6lDaK-.F[Z\)ku)$N)R!&,&9^#H4L-L%JLDC
%]8I7FFJpcTCCfA(67,nWh[?mA&!K39FZPSc;f?;p<h!:W;P2c4e?<6L*LMaPh3V,p&1u-@(*W+i*I5[%R's5;)HNQk%$+tUQ?U`g
%hR%k!l.)SSdJ%NhrF]V(o,02`:=1'(?N/,++kCsUXa%3'C@:=FYh?_r]+H(I$8]C\/pm9c7t=,a<VU6li]"M@FC>_1Lq2G,V<U#3
%@^o;.%Q,g,r9k#:(*/sq/<WXRPiSQPZ/8J3,_egGZauiPI!W3VFh8WcqE=DIY>uWQ8cr_6)Dla"T\ZW'(oT3:O_l9>6l5)2ZoDlk
%(,MD7;TfPQj:A-MWg5<q:F34R9+ApB4nlM8D:_^d&j-VL\(c1\E=a:NrTt'ejsgcJ_KR_RYE5>e.o'?6hF+O?jf),+/XW2tfZ'>/
%:PZrbnTUL@8hq=el1u=BN2Q8`1=4FIDQ=puac;t0VN+'l?M$>e`)?ngWH315,]l0C:rOW1![Jf,qU@g?[<6^%8a<bD'#ui-nV^Lg
%k:tN_$J"424l1AJ8EOKur@JLI@'T)BjZ./#-R4QFrp#Dur.MYD1XiC]N6r\]b^$(oNA1lQ2u1R=c.`0E;1>fJqTQ5\pJ<na[9^6l
%>faM\7U`s^:U\;,5U+^!fNsS)*>l0XjU8%D?BTG6\eSk_*G,>_/serpoahQX"%$XnB"Ap#J5),W2@1+)MJL6>[Wt3M.03jN&u?U)
%9NuV+M2bEsd7=GA'-Gd*,ABV2Ll"_h\n_AnZ)J^/jn3<Z')at1&<-Xc33nC;mj%H?HZ;eBD/-Cp_$1)?qYm]^gA?'T3,oSrjuk;7
%DZa="f%mi^]A.IJ14S2;<,;=kKSeOnO=n7=.NS6A>m:>cf%Xj%_mHOO03Plu=`H/EX,)=A#RiX,,\d$[r4d4_ktfIP8A2;4?r>@p
%S?Mt+G_cL>W9r\%]NGZEnU0kRIH:,^DLFR7C85%(rqp3@Z6T6-DmKb6D;1'=I)0Sql=1,JEqF7%&(>l&YE'Fr,1]W:L[?AB;iYi&
%*EO4oB>j:g4C,.tkn]`+,^gg3D]qFAm8jk68.u60rAe2bLsB=_26JK."p]D1?OP#$;4fcLZ+kd5l"CH,2%V:U?(_8if4&Lrd>WoU
%oV(Y+`alLM?j$B!L[4&=W,d-0F1A4uYPhWCV"\Gnmk-H7#9n]j&dS3dT@&\Wn4<;=G2mFKUhe7a.oH$qASeR^ojGVaV&?_CN('dr
%+h$,og>'Q7rHuoRf&q1oDPBY>rKhBih4sZG,&$$!7rdHU%Ql9#@GVHZ9%$?c&4^]ApY@t%h"r4g;:M+G%QS\;&3K7l19LUU+MidW
%K8n>Q^f*6pcn2m?3b$^HVj1<7Aj(?:1]P1Lk2]c2oF'U$C/C6?8UB7b+CJmLI+,oW_1u"'a3eclB-"u[."[.H4K()'_iXLgdPD:`
%(A^#6[aXo.(]_7YC.\YI-#<YZ,i'kA4V*&f49gZrH"*W$0/dXZ<DX"Bmq`;6B,lMZbHAZ+_<0eIVnGY!`$",VBbfNa7-&EhlFSLh
%Fc>eD@YN3$eT,bjU(Sj@oY__9(cLB(C%ukt&Z=5CW&QsN?O3XeC"T?7p96irEpFR=J+4*3fH9)XfQi+C@glJBWic1RO+7M!pHN4S
%.s&=W5tt*tjh8ZmKD83GFC"1s(bX!8?BZB,KssEtHpt6K)iG&2M44HY#f\3`?s<lB98>["2ac:?YTfX)$%b@Q*qb<T:UQ%,5HXQi
%fpi,(U74fS1C\)SB)'A.kV?,rVQa5e6:cl\>@f_HY3i]A_HP;?W!&*b!cK)2/rqXpnX5('SHfaT.Eb^^2dQB-X,f7gB%0!/Q14bq
%A;[?WQ%QSF'O>)XBbgfHYTfh[eLfc(*)O?WE&I\GE4F:-oQ"K4n[99'8-Qs#Ql:dHk7M>AL7G*GC8,+i]&X>AX[XD"2N<JF&)c:?
%0LAdP>]F.c)Mq[>C[.P@&0k<4n+33ij;5$P^%[U0NGtH;[8AT;[T<ZfEK2jt#1`;p3K%6g'WX6/2jf5BF,G\fA]KZoT`@Q2pD4K]
%=,YM$3(Ze#m4eRrT0I_+pkhB@=)GV8jj:bS.(nXoVU/8*[C!&^ODiPs=7naHL)?<(K:"=n"uB^Hgl!upW-4a-;/?=WN^nOf*@pT"
%kcAMj$Z1`1`14fC'[.oX=Rk4?mDAZ`A!hhaf;??@D6#6k#<;07@MaSSWODkrEeP2P\!JA"[W:@+S\#1@8-75:0:/@$&od&oTA:I/
%3!Bsg-MotB%KKZ8U(4@?%AnjS*OC>1>iQAXP#H*$P'pS"h=,qZ5Na#eXLdZ[r3Aoi*F^;M?k.Mr<=t6qPIAP%[.nhUbR!8Y2AV5C
%&Zkr@ej'h]Cf@MPB@^)2<ldYd,Me^L*Yi2t:Q_]33ZjL*%Viq%H6-"<W5LXsl]+[W<QS[>27rVZL*(:HN;i2)f>%u[^#HS+?C2/"
%>%Jrc",e%<@4k]u)&/u^7N:kWV!TCU+;l.--_RsjRW96kl;h/pc)W"UKl0:P7Y^.X.OEo/YSCK#B\OR??kV3fC-?;V0\jIR=GjJ<
%J[;=;$71uDh/G<UK+G]^XM[kc*Y_7#+Sr38K?bYV>F/hdN!9fOmdmH9iop+X_&UVNeCj^1D],u@]FBnbrWn-T77R"M@GC^NF(`8A
%qW0/-[UACdQZ7<2HJ:Gr0?@oonTMa/Fr:EmV_sNKX8R-T9e9($M"$6bQ:emdXX[[tm;1gY)eRj3IG(L<A)%/of882aO>nUq-o(-q
%c]b/I0BmJCI==tLm#Vs[gVJ"p?Sr8LDN`aqZ3p.DXn7gZ^XpWnSu4>cV`TR+H79YV?K2]>6`!c5n%8nqlo^(R>DFpJ35QdF2t#S)
%[ee]2__2>h;'1c`V2$lc.01<BE;.7"2`ckY_ELY#2Q=uQl%4l3CQHP](NP2;^#N-jcOpnK]Y8NXr]*-[XBC2FW1P]I@+I$#HPu.]
%<PI^)g>u2<hiDgq^>71.&Zs)YTF",d"@g4f)FHu96jF80TjkE*mO"%H)A:[i$LYg/jQ%3lJ0l,Si55a;o'KF*Lt;F?p6ai7CTq@Y
%2m+N)dtm;kXWhNL2H1+uTcl@-OgZd/,3j1TDW9\a!'Dt/gRjHH=V_A&mmtOM=Mc1gh0_RMXY8(ehY0!2dl!s-4TZQWKm*^&"7d@/
%Gbn<MPF]qN8Pp)eo;)K\j`?\,@]KkWV:H&ON:_Af#Oo9];_NKD$M0+h+iFM&jNeq)k@;=@c-n7)0=EY,as>S;L[E&e35YuA\;27V
%SW]2rqrU=O4s_p9@e[Z2nbf6'"'d=);pu;.J[CLXl$j7["D(%6',UNLa9/.@Gt<BKW6CX`UOqn3W)]?n"R%!@ID=(YM+FO1\Lf9:
%X<["_$JC)Vj0Fg=qR[-$c/.E&*Pi+?%f,K]A:Q*6,%KQQD)[m;1j"(03\,"l[.(R[Ca]XH"HjMR=`Vd(GH_mu+?\:PbnPj8iW]8Y
%]U(;@nWgg9YTj+3R8J+Y@`L]M0+fIUQ*CFU#!cL]8Yr>E:aR\`$,?V)rCpE:nqZTR#.^3KV714]"M02amHPHYGjXj'RNr?+7e^Ii
%HY77?/ZT\Y7(tUr!4pf:XK<F"S3f!00C?_:of7>N:_]BG2pm0!Bd@NB02$Z>[VYn]e48PH1uS+]0trM^Bf2JsF"';YGL_J<^)-#.
%jit@$'/WCjHbZ>Jn&A<?ltT'6_bdfk_fC==aks4[H"`QT?Bh^:Mf>Ep+]-SK=.9MqhX[C[Z!L7Q?Vtt<ikG3-U_#/T%]"`j%te?>
%"K($.hDbeOq<BQo"jZig!'Ik`Qj`6DZ"[.Ngi*:,0o;5:Uh/L8o4D2gh%qoF_"Q3L78c1la#lo.WEfU.+k'/RSDqe/NLFA)(FrAl
%Xq$bZb@)0k"chIOJ-Qi>9]R.3+G=aF'nEq6.E%25.jcofr/3bLI(Tjd6c)FZcGU,RHcMY-5C-"@MhjoBnfX/Be%Y%Z3\"qYR7D+"
%,[,EEARSk1s/5UZ_L,WY'<N_.>ASie49hbAiK3B=T8R,lO_GKF_<qik*Hks'jTD)(2HcqHYeI`7:pm2u@\3YO/cfPNbL@3@aqI0r
%$CQ64l(J80GMM'\m:Jl.E0EU7)+]iur,*jnO-=+l4$u^$,p].)^q9JGf6Whh:Jk,6aQ&p<V[[mRj=>_-SgPEVP!\HL1C&O`+iU%B
%,2n<.h6-`&N[C"gl$[pXVEZs0'ot^QYT.g(MjVQ?r6.O_*omOt%*`&_1IDWL&?qEHSrEIC?;o,j*$o$n/li*ohBTUfhgrX'88(^]
%>B%t,IROl?`A?SE%g<]$[s1-I(3X<LQrU+r+hBoi7In[jJp^5U[>RVS>7:0t[OT2"Lm:m1?4TCk!TmH`;nl[he*N3M+#':@&9Fm<
%TKqL3ZNWu0#igOTk"&rT0q)CAE6X">igo^S]7ZAFE$3:_:2b2&pnOrH&'>8u<G>Ufbht548jMMk!I[ADa^qt#=#mtO<1,.B^;J_-
%/Q%YBlh/>[QSZQoaN:L'.sUeG9oCZ"N?6E[\D>BI+G:OEPjr->(8mWg/9smHWHp=0q"E&V$54SZ4*2ODM`@YmASoJ0(m<C3OQ_?U
%UXB,l?P"HBo!iE;2c4.t"Dc:hRbp@EhS3@!:"^*bn]S'&;\Wrl&au&fba[<g(sO_3622m$CGrY=?RIbqK#hoo73qA&FGPa^N-XEc
%cq\T_9N:mH*oq+*L]\V["Ge7,2o>gMAm5[LRMs4m>+/jX4e-*T?D>SArKb\s;!fs:T>Y41DilGQ/k'Q2VpfRup?);E@;2k61gD6G
%CP>#oDH",WQS:PuK^TZ@r@^>$]c<5kMU^m8[*uRso`\qL*N%Nc-+A<Z_fQ2bV*hU%3K]HRFd)Q,GM(6LgF5;91dZ)oS<-[)5)c?t
%0fS`OrH>)(&aBm!JY%,>?/7qLIZgeB"ZU0mA9rjQ/9ZFJoq0)BknM)<8(0@4oW#;pH#P>X/n>[g[OoofeE.^0T\nW`a=0mHGt=8E
%HX9$0TRO"e8^e;OC=.uVF9r-Q5XaC.5Uf0G1cm3$9[hn6032EfO+-`d_u]j@qL3Xgd='o)5>33;&U#:N=]EWWo**Lif_U:nlVqg,
%mk38Z.H)9Kf/shF%1EILmY2EoBca^.5ki3f9/Q<JF]6(XA@f#O3LHZ^=\@dOGtsZ:Cn@m-KW^Q,SCF"O%$^*3Yq@)T8D+X@6:!MK
%<Bar;2$K=#q1>M[!Y7XK/LL.(T59HeXCL'R,=REHG'eP!=PTl5R+eh5ij6ADg%:T&r^VhV'/P0'&jQMtc11[uFhqd$@A9^_[dk!D
%A_YbR_P-OWc4X[HH7ECY<Iu6gP5pDcYn2X<H2dNlAsCl%&A<-%='3,]5.Bm]'_]nH@Ws6K?McAA!@cct<3I2IF\l^C(g0cAbPZ@W
%NrXraih0;tfsMcAfj]0=a-,%3;1g&n6#1.O<?P5AP!"G/mK]<6B"$#9j9`P2;AAGs/scO#J()Q>]p27.:[:/Na[QrG9\KC\TQQ-\
%X)n.,`YEuapZkj7F5>EqTRlg.mYj;kk42Ze7-.s[85FgBk:lq>5siWiICM,YpU06b!/<l%$tNn-E\&B\R@D3k8kafH8US4LakHuC
%XNPO>a#u9je)mkj%"gs5^fQ@\H2[S8L\km"&=Z7UZT0(p3L'-@kF!b5INQ8*.?makZ?$I.U?T$l1P'QNhg4E\?tt=$GY+NtLF"*V
%p&l4_6?=r.+p<[t\MJG][b'm^;sHb%7^6qXLe@A<NqlA=SCK(Z8=Q-gebPUF5t(!%bF17JJp_JVd_4V_SB2@R&PFYqmQ9>j9?JMS
%9?)X\2aH!6\KRSOb/<*;/cb_&OtK>TOt@7Gk\f^tVJESfQiu\ngfgZi-1d\-a@s\f482F5#QWeRTFrRJD%,`n-Qsn!T<P+_p=l^?
%=VB$.PTNJ[6R3o>RNitW=Kh8N5dL#QI]t#T\!r;q&\Lq5/n?f^&#Pa8&_s@Gg^#=-&fEB0SbsiY_t@e7;;X?dI!e.J?A/(?&PeCo
%a<&mcR2(;&NO^<u,'u7se<1Igh*I9Eab`9pV]/&s"L>Q"r/WTWnEUf:5;FBKed@A\Oq7@.k]U"Ph22Y72WPRlY0VZ'*0SB2a15@P
%H-(cU]i5DbQKbnb%6+.=D.r:!#s%2icI(h;MkkaR+#OUbU'2'#26LEABUo`@=\M=b-8$a/1p'^+(+?td!'*\?.)Q0AWK6*F:O$4/
%ReqUp1*T@`I=NNo(9$2)"+0`)]4f-L]Z8,0C*Yt!;s^nPMlsCL8Sq%ES5I/7A3A.>A<qlRZ`oU#1Z&4r$9']g*DH4#GV[in[_Vac
%:tqD0oZVH*]YQDQd/qRs/1U!!%YKqMU8(uuWb"Id$d$bsk?u12KP[XNBSW":ZCHP$,Rfu9c(V(H.;LXCYk.#(U0R%#7<htXd?J^c
%ek1r:mE.a*O?7QY/C=I'c18W6EJQ?j=TBNVnsW_"+khg%/`B7D_"h?(CQ*bIbjl3N[^S>kW],atS>.Q$oL<Ekk$9l,@qgOQ#tHB?
%2u">gZ=f+0Zle-t<c'6uf_UDp&pR=FI26ZbX.]tge83LqC9]2?:gJK2f8:"tR`@T!2@*@c&]f9X(.9'6\VA0<H5gE1/S(?V&;-ga
%g6]rc%ABNbjcDC7^.L7rcZ752ODd"]UfE^INFA9Jk'$coQ<'`DN%0go/4CJ&g&d.mIdjs\WKYD`n:PGS`))Fg4]bPi^8Ie[+Q)8c
%dsCiXM)nAlP>;#SWln5CEFLl$f-k&J72]t:ViR8T13n98V'JE4O6p%"1))o4cRd/qB6WK1ob]\T/EI]d.`lE6aidua.)mBAp8Gok
%+O`LVOG'c[s5(%f+_%4WQT[WO4#iZ7lDq//+);HXRb!5LS93'i$ttXgF&l]0KpMk";lSrg(1<ZAM0ZE+iZ]t_QVi4:gc2>fL2#mP
%`Nt$E?G(aqm$1Qc=)b/kPo")og!dn"?;;06mc&%`%9^h+=;;*iB@R0(XK@)p8Nt`W\ep_N6HN82I$`1P`2a=^*I"W$_*n`pb;EBP
%C!logdYbLn%$W.Qgj>Ium@:!^K]UN8C+W=j/5%Q#Sj@"n<*BhtA"?j3/M`odKba_(p2e_d^ogSd,)aeAo\6hdK3h/$d^2tU0Q[TT
%0*N,*>3[V%Y8)9FhHhkc("!!h+AX.na+EC@.$!]^R49_UnG6p+"f#2Kp+37@XKq8hWhP4)QphbZa9Ya)?'<NhHTE;<EA.qCl%)ZT
%/QoQa@/*oAbI4F,M;k](mYa-ok#l,[\s"SdR;"u5cNW`u!>%_+3o:r+f;Im#?9\5G>tn\?Re#aoJF_7/?JE<!pPAsqX("P>'rk'J
%%AniL(>+fEF!eM#R^<KMX#`oW@%7NRf<%&/pW$"_4U(8N+u!V/_rLIi!.:c''h`)gZihb+D.6c$C^\G*1Y^>EZ[HNp4>Y&@<YGs<
%I=*jgO8AQ(FieB3.du2_!#bknJ?&im[6";6AI#9UfW_SK]"07slaB96ZkIWmEokuomqT&^VoY*L2F#A*;#[!7DB>uG+D]A>M8/a#
%(4Ue&,d5nG=Co*kFr))`?TWUX"S1Zj:6[mP2r6Bqq+\6XM&T>Th_^+%@u*_5o)<m8;u0M;XSplr>iOd,85V-MqJ2O%r.B3$Qo<PV
%_*,Bu,Pd>2=TY&NEe$o`pTU,'?'IUj-$;pX-hbjYotT%in#rp$R65T^85ILG%XUX[8tJbL^Hj@bcgnt1fbW!==IQ2QT>//4f-1@0
%EO_pQoDNep?gS%g-lh6I%NC4r4!_VNbH,aMN7%cMoe6\eY\#<TXq)Hd;8nN@4=nZ6R5;P,$n@6$Is?ap.@F#U@mVe6X1Ip6e'Hik
%#afk]_rO@;?>h1eTSO5Gn2=.L@KRqWRXpc=R-W,+<Kde_+[Wfa@Vckc03&LTlD2>V5-[CQe#A0UNZ:FreiS#N(<RFSCU8g#5$Da!
%U_7%VaIHjH/-lY=R(<?GUhIZ!YL(V:TAi"?O8.[\n*)>%eHY.]$F%QKQaS4ZOE$d1->[nsT$b;l;aY0K%d90eE@&"So8kP#pS8T5
%RVuD/Se].Vs"+eHRAp+)-W/A1=/pG%q5FfUUTaH@aW%qu*,Bt3ffn7D*U.9B)g!m*7jbn]23%Onl(?cl9tME.TU(6.HS`)t*7GJF
%D3mP2H/J(%JE#-jMHdZA?-!QDJ%;d]*lRFBAl[h'mWNK9jr8tjIB1HOrV>2EMeQ60O$d=`<EK1*9pAdK`X*-4Hu"WLEXb>$48.o*
%JZC`=W%pBho>HUlFtSE5dsr?Tc]`2!K%fZKcoX03i[I;!DU$"RB[ti\e%\e7dG<2D]+#+S\MMCtm1BBVa?8U,I<>aaUsPs_c8?4l
%_m[qi0M5>Z^.b<o#Zl2P[Vg?]3ffG7V/6->4"PD1Bj$2Td<Eo-$fb$>n@:uZ1RfO0/.H?p`"n?@g<FW/gJ;h,Wq![l,V]TTUoF0k
%Rg_p3=h#j6\JeQS%#CH4_7OfJjN<;O+!o$8]<aZ5C>Ogc>`Rhc1kYMB-$8c`&,fi+l(7Z*8GR%h*cD/#UG_-NI+[0@TSjLFe(/ge
%2UMkq'u=jE3gIHQ>j6V2<Xb!M^Y`T,c\JWL8P#=1T:<[&[j`?,aD>+I15e#aD%;^NRPXc4![t@N$HYA;UC5k"4[toj9Cm895,-WT
%X`i=G8D*[kMlb:Y4W3oc2igg*hpd#-4q6f`8__j+HSd^/q4eCg?6:If2VD`T@hdsqiU>VLhaC+[+!f%GlHkGT7FNrkgSaEQNOO]t
%+k4\5\Y*-nCJ[k"[G>s`$9F.)6mVWo_5(+Yrf3=(*n:LK-^l#UTAB+,A$q4rg#!nMi;ldU,;4K8JG(N&DD'1?D+(A?ho7!,jbHPK
%7%.LOT,"euWl1NGMjMbr#Y_tJBsG'T"?&>l3)rj$X&kaua"<BMm/(as\X#cP0jOQhB=t&^1<#1$_8cRHPT,Mn(aV0*&$DXg@O:Ur
%bXg).&ITpB=<sea-jCoD%#0[d?=M?\lVe2@#-:H#DF@WVS//(=CGVLL#=J6W"E32@#@*fLd1L]NX5`9lQAb%#5CEB2PE0UeN[9@4
%D$/\)/hfh[CelZ;CusqXkP^3bfu""kg*;QQ[q"3)HE9s@>[<GmXW@pL6'o%,N`N3OeeDcWH!:Q]8BT#`&Ol]:-FBlVhuNtWqY7.0
%EA8>0#^Zfu!o8OMeAMO_]j-*oqIlI]*Q8b0P3[q8WkgFNF/mp5b8!HI7.cASogRNb9@M-lS0]daVJCcn,_UB\\b-Zh5r@25Y/DjD
%P-hmY+oa8qdrCbr$%)FuZ8(936_glN%/8<8[)ZKQKO@[)p[,:D'Y:a=^/0%*m4^W+=-6:pp,'8g0H>=,WfIJNE&!8ph<j!kIUk"'
%Fi3c'P%V`j%Th@$Z]%Ij+IGQSa[mc!0Tac$:`Ln7n$phIch/,;A6kP/09%3a&(#o4WHf`EHemI,47J3pn=<Mns0)fP<$19ieoG-J
%V&^l9Xh)h8bO<)fC<eK?&tJ@mb)883`9j]4gLBn4#Sr?^RN`Dc$C"b#9o$XoCF`100!W?SIP3hmZt[4FDaU>->"j^0]fSM#AJX'=
%"':VaO>=*A`A2-oj&-#(.Lq`t;V2tOY9@4CL4SClPQ=Ya+S4C$2,bDo=)-#iYKq;g6?ii^DJi82hi;@O:^kgW%K2`(F(#q&OiMlq
%6.&,:EO>+lc16-K&AOWaQD[U63>4*Z6Qt(jH!cD79'TiWU_!C[cN&Yj>j*G>E6WZ.'?k=eSon@N,!,J]*.#%!!^:J`.LSP+BHq*c
%RDcn;o=Bf<2BujJ%WQX\^ADRej5t"f."p"%4.J@\Q8F(A@1X!h@=s)No7a#Ad8I"RPSRp>d21la#emup;gbUJ+Q1-[o"c7:!7OSd
%kY+D7,a9b+KIc=V&aIB3n/t"NP4'6p:.4?nr4VoPE?3^LqT[&c+=ejG+>JeJn!i:p=6uh\TrQ@_"m/-I#V8=6A9YM_]_!MBUZK[g
%2@_)S.cE1>"^,,kk0E4p[k.AGEu'.oCOh!OdfE%:"@aUki[Vjpm>E^9,5g>-E!C!<N'#DCEu,W:,94M_BK\gk*K;9N'k.X8<O7rZ
%lCQBLY#@ciQ!3dR;t>%$4@n,c>c[9\O.7pffTYj6^o<.BWYc&AZi#Vu_Vs>@>OU0Rm_dE/mAr]BW-%8mMGns*S]=)JeYJA4jq"?Q
%)&n+lN%[^))Gk<if9eU,>$ffV:bSiQh$f>RS(TepG5]<YXXo16]+\2C[jboOcdB8f6ll!ifnK2!'S#N'UDSWTY%3q(5W'DHbGDZG
%O"mGd)2<>%Qtc%U_F"OS6P82o*rg=hQLHl_[L*Gra1U5/\MiV^g7;bXM+OXC,F1b9](b@FLY0,Y*iksm*(2=0j<G8`Dro8e!g&1H
%r2AJ8,?93f0R_SYE6s?ME`lB"Zj$&K;6I;13>LD\q!WMN)9Fj2.*n_`".R*!fLU/-TJ58;k-ead*PI4>5PZA4@t=^3o((f3Ubr:m
%#0YL*T[-a=GS+L#\p/=GC[Us3f+tH^%+8&O'tQqJf*E?6lcoE*PK](CjbhhZO/APO[?We-4,S529-`F81kcQB[AE$QY2[jQJ\c7<
%FWB<46gPZ.'H"Q@A=f1:'lC["5R9!'=*[)/[Q1),T.dgR-Uc'tC5AjTo9X;O[eYM-@rP,R9<YE6!4+mV[?;s)%c9m2=\+]"K5c>r
%<0t)8n/\u>\b\1-=V@@=AWoYP&Xf\@a"/(H1%I(.iKYl4[2p$);f3C)b?7=M:TX*h\^"'YeKRht\d]@nh&imgLodcMaAWl%2q;PG
%:cqS+,P7?I3e/_q.Dt=%?6]`el1!u1>u1LoB'sLS_P\/PcT$`&DIafuL_f0!RqV2YXg:CMnU))L.abN]o!Y7ZB$W;_T!-Pk585+9
%rh7YcCu.SC^:2/F%5@i<9SkluTfDR\M4OMP)Sh1m08L&/nc59u)!U#):Cq<`,\H3#hVNC*Qm_kQS$r>1J<!3d>71KQRkHrKkh,TT
%:CMP8)aGR@!&J,([VMVa$fl9_.5Tr0$SMjN>b]G8&!jR+M-c!Bh7YHHTj2gQ.!k,4:)<IW2Jof;0`&"*B_7IEj43,Q5pu0+m?ZI/
%dn+7X&F"m;QqHuSP-4,A->&@A-rka-9KKpGF"O'WU=o..W,rH"gE\>`LqfUL'pi6q8qA)"oHIIt5*>(j;,#sM9uinXc@SdRR1;2T
%`s2d7;jSE"q5R(bPDY+;"/%iIkpP5=W,o+4d,XB#IQng+e0i0W,0':;bCa!.S()>5eH\hiK=%<fTK5dkC5G?Y(P#/,k"euKH9[MV
%fL21<5h1dcCh7)+R48`<(r-C=5OJ(YZoU+i0<9<h3BtHFbckQ!>QF)K,2oZD@-='6-Y/cCD<?Y2=YGWV>n8FSqi+p=s*!3/fK-Hf
%GJJ,2%DVAhNfU/H^1TMlD0u5;cI!'f8`3O#:#>/m?6?UuP3^rP_/!MOM/bU(J=VJMb:t.+HJ!R5Y\R^ZXpJOWE:(]aYlE;<OdN\_
%W:60.p*'eYcZ2@X1HUYDIn<g:'BXVfpCuk:S.@;82DLjUBQd,9@O7F]G-7`Pai(N$d5^Fp[$NjV3YqK-[X-M7Ks^mR50jtEQ3\]f
%.i(&-">-kO>-rTL>^JnVZ^qi_?AkQ/F[``KbBbRFKJB"Vpc#XPhs[]%6`H`ELgDC=*J:(f$#d$.``mj>'i]5;!gWu)]omLS;,4pY
%lNVcuo,A!UYM3alUj:<!e/'j$.Y:kr)](4&BcBTWcLW[S#Le@;F2&V+"%l/V:dNDZ-p,3@rBS!\7Cm-$39D!+aVYMpLFJZ=i#URc
%Q&0a`'bqcaa?+7R&S56%mi8.^P+[#K$r`a#&6uR]AOX:RX7oA^&(isu9r\ef<7Amuc3NhZgY4l^aEQK>,".jLW`rNubVU.'UE]>U
%ckU+QJUXMR9jT[8msL#D4IIPqIG0u?-G>0L!FH;RfG=hk0J+.:ETR<t*kgV^gB("irT#?\JpZZ%ilq5&$(eL([)\+'A:*)6ihA>"
%'=aFpAeP__"V`su7(g-3RuhmfLTLtY4M@cC)&?%r20Hk?'ec%V#hZKRF"d9@`K0h+_8To"%M)q7_1sh+$&loD?Mh9Bj-e/VHV&0=
%L3?j$V4a-t61"gs?U0p6[Wg`kb72pX_nHG=+1A#NM\)ueKZJ3h!FHKb5H__Nj@ecGX`;SZE>'SCFl/D4"Ndi+:R(dac!H1MoM5cd
%5p`RK;j%,JmJVU#kB:(ua)]Pg*.;;X0hAln!R"sd[7I%RGmD#a%'&iJ'/)RE'/2Y>BQ9Yn>HGK'<QOf'B.XG1.LqdD^^p!&o#*b/
%>#uMAKl`MoGh=DRF!5d?mH?L,_u<!Jo6;%G#`o_UdBsN!43p2:2H[cdfJKN>4jOdXp6C<&kO-:#(B")K0:crW9OGIUk_F#+csm`A
%l[kfP[KT)!g\(+q`a(5GqJ;,p7aHFH_cn6"L,35L2jm9qBgclf75/K7dhiIW?K\;8,-^]S`RoAA9[DO[hH\j0c\Hmo5#R*/3(p@H
%eT+d%+^dg#q"O*Xd[1[A'\0R,85\d&G(A)U.$>;XIBPUSXq%:gDSjeR,#W*hjYuQZYV";t?oELY69*/L&H%Y7e_:UhJ:#aJ[l<M@
%#^N2mVTe'4oGF*pS\h?2PhIK/B"H#+L%P*AhM7;bC!^"]#@)C3Lqq`<b=J%$;I.f,@b?:(/8_W87Q,PU_>Rp)_2j\G:a"gs"ghs1
%Gq:[d\h9C4_WFmr6$KD*&C#h-ZK`:;&sBA,`sUjJ%t\#*@Su2\KGu[S+i$kgMOWF-h=UZN.+iG#BR]@I+I=F'XmZ:S("DAOE\jeY
%n"WlihFl]uFQF^'Y'qK.p8HE/rkShk07g.r)A61D;Dp]10'r^HZfiD8+4Ci(G,.F%lrI#O#8+[1r8n8ed_Z5l\%HI'k>&QB[PLqO
%_Y3b6BJ@*tW/"*<oh^Kh.j)4E!3XAQ].%^5et2GbXTltdg/EI+8Q>4$idW0EIb9N&lY&2J0jMc2rEt!-@i%p]R^eZ>^nJk=h1HMD
%B7si+%i('Vm]R;YBo9Oji]^1f@eiuVU*CNC]T(3'erXUY\K?4PAq)jLJZhHnea?nt1!N[N3E#56ErW0iDjCslaT>_d)0U`/,:o"9
%p_`N2\P%]nq^!+OZiZK$#%Ept>nsmh&d$s"A)(>oOiB$lEW6NRKH+(j0Wn,V2JoWNN"FoL+d,-E1+gnhGmAFN9@B\To^WZb0T0:H
%/'.1""*eC!YsLUmgEKPUjWU@JHp=3=l%D/:Gj^!(-;Fb:\mpj8*Yop,e)H9c#8WZDFpPW5*(W`;<#gKWRP!Li?qu:4J@'9TVWdp3
%CX98o4D7h<:Og<[iG8BC\SV6?_c#W^%\4uI%Y,4a-6GZV8uW./Q*nn5FU+bc@]TbQf#Rl@q.scA5>A`q?/d2<IN0Nn(eV$eciZ/q
%<>)$(PWY)`7@r93,10+NLk3G16(cJMD<fpm=QmSm"S^fU$Wk4[C?Xc,s8LU&(:R_Qn#8u9G/%)4k0g.\gWj(Ca[VR[Cu'2&J,XE#
%]M6a#U9d]`,:]2CfUYt;o#iKi`_%o8<.Z.`r?(q>ajBYc:@?rsgR(NF2)'a+#HdSUXZg2^d?Pjs4Hp1$)XR\t6s)nG:i,oSbYQi(
%Zc9rK)R4M@GiIDs?@k_uH(6.^kcdQrq-J[,eFDhZ)sJtsUHggPXHG1_n0paoDY,p;YeKt<2+R>Ap@[8Fm?_*K.F^p[rL?J%Qg!Zk
%oI`,VoK^A_R.:<Xm#h,#GP_P)WS+Uc-37i"CGp4i9K&gSNj_I\B.<<Ip>aTp[Fdl0Fgs5I0').-ZG0nb^iruMLTSOM,F>%Qp7<6]
%m>('o<Z7GQnQH4N?i^*IK4Ma7TVoKfDYlOe8[#!a$NS+!&lTuZrM0BiDnYHfm2"a8G?jsW=AaaQLYAF]D2gjVKJ\'@+'Q+6QQ%a\
%YcWm'PurC@Cpt,RBVE+#"!Rn4[RP!+p1#lHNFR9S>4HH+!9L%>`)4SB^HK,E>'6'\q/QiKag1Bolqp1Ta6e>#^";;LQ5juE+)_b"
%p!!uHP[bL/(j.R00O><9KIDYtA4XfLc@hDpPMJma\nY=9OLf4IAf$5h78"Z5=KDQ'Q5VIdS:o5h*G#)V@Wn7cMZVhJNFr0pG(N2:
%??g*:V^s(q:n:"[^/ci!e?\Z':rj?U<Z8\8/4@E?&$#+rqOe4B?U/!8/ITmAga[/`?i%uY6@s>;"/N,#l=k<]GqN^)knQQjD7_O(
%3/Vp?\Ze6.07g1$f1&qrCL-:T7l04IV'2_)j'#XO1`pkM9\4/%%$T-]JfB)N_V:O,]"d2qjF"_$C7GLlq1@@JfZ5cD,WYLu2HR.[
%Ve/lii:EDH,-o!J=1s<+m*4a@[64H`X_3*dXR\+=*Ds$3CRlX[YB;QgM?ii`gKgt:D<jQ'<ASgP,isn]%>H(sbPWc.V=3M5n]5;,
%ZZ[OP&"<RJ_t9+dSJed-^0.c7JtJ/7AQ4U[*LQ3U+U)C,.SE3q[9/n!0qRjf/kUIN5C"4o5?4&t::*]?=D8Z#mTZhc\$aA>d*HtD
%ah'-o9L+el-e#:0O0j<e[RYsg`Z1gLn'@l#EX_7%4GNZ*Vs?;$9nWW)0@s$70r7,$c(p6Gcs8<+Zbf2$861HN/"8Li3(^<@;Mk.G
%?MD/@hX9!7Ku[jf_B"*)_ReXBORGtBpcJfkPidTN-L6_!qYbbtM\HUlW)G-1GXVrULJ(:$_j-c0:'M"0T@1M9*,Rkbbn.0eVe`+>
%m4>;kZGcSg<]NaI6+1ck<j(5WW(8Y4UIts7IbCTOk^K#[dZRgT$urcKPDKCEm$:`;GD)HsA/Ld<piKOk`?/Pe<4<Od9P9'bQV$Lj
%QFA+skk7sENc7\(6\b&Q_9O2Fm6d=T=!@-UGUk:Y6mgeJE#+g:-o^<TLX@\5O,TGBR)lb;Xk6^6$fI7'NbV<U=U.3.oAC32h)&rN
%%anKg@u:E6o+I?&Dn]@n9b7#*!pJB+?j^pBoJQA>p@rYu\@O&YCQgLj427YPWJ)eLnD;0#dF4B/QAY=I&u[d)ZgZZ)a(Z*0WJ2=h
%@]-Wf_:Q.-1T1kYC1WYM`c&O=F,KOiE<q7DriQ)U07H3mYjVF?F_[B^@:7s`"?&]_&t`:sU"r&H22JUn#i:dM?0RBNC*!NS:M3\Z
%$t?^iXfk%f](d8Q)R]+s$N]pqH))SjplOrDLQZ8Y[R>fRU.0n>7S8R-[Qm-kLR\T;^;0%)ZL)>"O4WqsO&G,2b2"+5:JXC7'aiAP
%g@7M2<Wr;d<W+PCZtY>)Y^nPM#9<i'Pl-WM7i@QiG_DH_g7lARFfilK#iuZ[X!nc?$im*GQs+=l7TZY"+:2+f:Rp3F$#S[F4f#(p
%]F=U!Ya*Y:,ksfek*F$GDNk2$*A%h4:*j`_QBC=(%;ukIG_OkqSdK"=M<Xp'M9bWf6etMImuer0M]k!dd;NQZk3)1$/YK;!^5T'J
%R%fXL8WA0LNWMr)Qdp1H/k\>D)(7\<'F<-[ZSKUb#9iOD&</$='"_uR5Y2=4*/Yq;5,.%[I'b-N0_@MqD:7q@\H7oJH-?j/T^U!X
%Z,\D7JJb.WXW9cSp9FJ4VBF.M6`?^-U/Xf[bg]"fi)&[nl'tX9%RVP;QW&:cQsNOG*Ju%u:0FEf/$'*<0dS$+^EmiT$m6:.=sqAs
%U.tm=McSYom2UkJN1aRKa&EEmekL];qO3.-3pAY'_eWP9ObdAQ8`-r\K`<@D/gZXfnY!?6>a)pt7r;5fNC+oMa>L%Q%Unbdm6LN_
%RqYtRik<N3/+9PZ9V@Kq?r.YNlX!dh9k^u4+_Dq'"jMZjkn5mDQ!'QhT`eVYJ\SH4\ilDk6R33X=MUHTBp=',6_oRR]Bto<(#)L]
%N^`m%3nH?ESkd;>`bn<'%/F]dpXBG6!cnLUjXq5`o[M7+RtbeqU?G7Um@.a0C$9H+5+Dg]qJB2$rRR7/LU4cM0sbSk,5@MZOW)FP
%^rD$[?>q59#]A.T<AU#8CmqsHDlSHjc^oB.Dg$e</10H4i=;j#6#,2#oIZfGlJq=nB]$InNJTpKR.W?@URX3XL+)6P2CPU1Oa*kC
%(OOI^]8#8c+-r`gCVrjuR9+T@l"eGR;F4#]Vr#iMa9c,BHp#lTVl!XXfADO<k>df)>,QekD%o_uNX.D8MZb)P^=(emEWL=mdHnd6
%jk6J'PD:HnfDLfHIBW,7N0gjJ2:,::]RC-K7Z(`_o-G\6<ntmiJmcsrII=WBZmg+ejk'"uIQ0NdH\':oTtQ1H0sMX)e*l09.-FO)
%I1EgMmj7l'I+j":9\X9("E6@fX%;_($(Q`t;D^>p5tLHZl13Q<S$5L?j/E_6BYU<q7PmOj:,Cb\O"H*LZI3/j$c"Al*?BUr>s'Q'
%DuRGsmRO?DiXBIFB@'n1c7!]><OJH*&s]!!JuoY.jHD$5[DRqK)<!7hS,K;T$Z%='3(p3APV"Bm!&t:X(N6A#S7S\?3pkJ0$WBt.
%I2DLl(1$_6SW@38<Efb&EKJh@YM8S(/Rnb]hOT3Oo+Ch;pcGbRh_"[6]aPkPgj:*1oA4(ipTndKQ`4"T,-F]?q,]QL9SUL9NuZib
%Oi`BSQuC<%g<4*8!EF.)Fqn[NO)u.4]EJS\@<cD8-<!6)]Us@-`8%cgX`5?+VLoM_ThQoBH$m1d@aIUVCN-PjV[7;E,0!$]ZiOl9
%IJ5l5>.a"-V6sPRPf`)sM\VOaJh#QrE-)$VTrC6(%Esf2_Uu^$[92"i?4BBU2+Wb1.hjQG>B.@;H>_GMc%t=M-C/hcI4LOt'ukds
%>nXE\$MH9*J,=C%H5_R/7XtL:+IS-/XEjCr"/'d7i^^k_S)[]k*F^&B,Il7DKd&gH#$hL$]^8l4MS)/Qp.DCICKc!HDP+As)Nf8g
%.<uot^G1S/59#^kp9VuLC&%Bh$f3lS3Xr0aO.<]@E##*T#2&OH0?]MM6iPLg+ts`$"cgMT<2qm4no!/$J+>d.Z\5@8-!/=%_g!gh
%NUG(7@ZiETMYtms\%=d3b'q9#BiD$&#-*EFp8-;s_'k6;HtVNi+s&ASAH9btX1(;&8+m)2g=/7@g;o&YF?/j@m+jC`0b\)!Qj</1
%a6@s<l3@.Q#JQpiOKYhV0S+rTZ:qPZV>,A*:\Fe!b[&J7(re+.UVq`BN6:!1gQX3t31m09)n*eC7;qH/LaQ1tU"4unqC$./*Aobg
%6k<Ka$>F(o3r]'9nNLP#46KV54#6_k6K<*)D:i/oA&9ssIFoROQZmk"/T"cUe2e.*Zt3$uGE@n3Kt:A#b]0*^@h"^;(PQ@SQ"IDt
%J)N%W@oj3,$YX!\fBrN&6fI-LWR0TDJK.\kE^WR%VZ]Xh*`<Pfgm&06LN!a$Q^$!Jek+-C)XM+E=IAmN9us)/+lkKHjs8DYBkstB
%jt^I<aX<a;,kYAVSW;t@S'F'"(X9EUECjVu.(bEknbK`HKE@iA!]5#Wo:A"N'F:V]6F`LPKY'&a@EpkjGQcZUk>60/'L*j>)V*Xg
%DESE?kKGnY2CRDr>u84%<HjZG']2;6Q>)GQ_A9HNGnANg;@U32O?<qF_(GSL@AA?EDEXI.qgSrod:\Fn/$9i_^#YRPmd(3dmA%XL
%CVoO/WV-T8hIR-CJEg[Z)@<fuKCochHn#*BlkTn&rJe7&gQeYO.:L\Z'(?p`.12[<kO(4dI7fqB*j*Mk!n]<mj6_/Elqq^nrA\Kb
%BV,BA3bAVojHg]$&++tV)ao!OiQ?#97_P`<eXc7JPqD?[2or7s4%Z]Cc#p+5FJq"XVCnG-h>9/il;EcMEj!Z.%+XPlWn:DuW0G.U
%k8P.Ti9kQqYUcUj]bE\RN`$(2d\cEe3,"A78b!kk<K*mY&@4mL(;so;hPpr6b.6"?e_AMYq3uZpEpRV0/q_IM^PJhD#W[p]9=d$:
%]ATr4@ohrOYpQJaI7a(rP,nTM,_Qr=>90S+rr0%#j`WkqL:--r]["l<Par,Io*),:FkWbFA=>k<%=4tt)kM%G.HXZB)aZ\'T0cj/
%YEE<J7PiD=WS7]S[C[Uh=%"d4@G%,Delc_A>Xk^9^sTuYo@+`r6H=cUK6E4ZOsY*IftRMqY"/[C_L2'o^T7nc,F9AJGM!Ub0M78G
%@JS#ukVOFee5$*V$j-$@Wtt:0lC;OH6]3BP(;r))\9&9*J()42G?edpWbp\b2kQr0_&5.eXa3Xb-X?:e0=a1[R;9S&@;'[]S6Da8
%p>][[g.l24e+PPqdAojDWc<#b$?GDO.aJS]4b<Wk3H"`S5Q@(broO":J,5f;ps9!7?iT]i^]*mZs7@E4\+BXqO8ncX^Adgjrr.u1
%lYZEps5S%tr:g6_++O0kJ,]BgJ,RPTs4cH1gY`&+gV<[0^]+,frr)<chtp3!r:</Prbqi9YQ+Cp+92'7rp,'S_F`d@J,6)CpqQj,
%^]*?p#<BAYSc~>
%AI9_PrivateDataEnd
